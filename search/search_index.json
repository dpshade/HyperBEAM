{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"hyperBEAM. <p>DOCUMENTATION</p> <p>Platform Support</p> <p>This documentation is currently written specifically for Ubuntu 22.04. Support for macOS and other platforms will be added in future updates.</p> <p>Welcome to the official documentation for HyperBEAM, a client implementation of the AO-Core protocol written in Erlang. HyperBEAM serves as the node software for the decentralized operating system that AO enables.</p>"},{"location":"#what-is-hyperbeam","title":"What is HyperBEAM?","text":"<p>HyperBEAM is a distributed system that allows operators to offer computational resources to users in the AO network. It abstracts hardware provisioning details from the execution of individual programs, enabling a decentralized computing platform where:</p> <ul> <li>Programs run as independent processes</li> <li>Processes communicate via asynchronous message passing</li> <li>Computation occurs across a distributed network of nodes</li> <li>State is persisted and accessible across the network</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<p>The HyperBEAM ecosystem consists of two main components:</p> <ol> <li> <p>HyperBEAM: The Erlang-based node software that handles message routing, process management, and device coordination.</p> </li> <li> <p>Compute Unit (CU): A NodeJS implementation that executes WebAssembly modules and handles computational tasks.</p> </li> </ol> <p>Together, these components form a complete execution environment for AO processes.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Decentralized Execution: Run processes in a distributed environment</li> <li>Device System: Register and use a variety of devices for extended functionality</li> <li>Message Passing: Built on an asynchronous message passing architecture</li> <li>Scalable Architecture: Built on Erlang's powerful concurrency model</li> <li>Extensible Design: Easily add new devices and capabilities</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with HyperBEAM:</p> <ol> <li>Check system requirements</li> <li>Install dependencies</li> <li>Set up HyperBEAM</li> <li>Configure the Compute Unit</li> <li>Verify your installation</li> </ol>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into the following sections:</p> <ul> <li>Getting Started: System requirements and installation instructions</li> <li>HyperBEAM: Core setup, configuration, and testing</li> <li>Compute Unit: Setup and configuration of the CU component</li> <li>Guides: Step-by-step tutorials and walkthroughs</li> <li>Reference: API documentation and troubleshooting</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub: permaweb/HyperBEAM</li> <li>Discord: Join the community</li> <li>Issues: File a bug report</li> </ul>"},{"location":"#license","title":"License","text":"<p>HyperBEAM is open-source software licensed under the MIT License.</p>"},{"location":"compute-unit/","title":"Compute Unit Overview","text":"<p>The ao Compute Unit (CU) is a spec-compliant implementation built with NodeJS that serves as the computational processing component in the ao ecosystem, handling WASM execution and state management.</p>"},{"location":"compute-unit/#architecture","title":"Architecture","text":"<p>The Compute Unit operates alongside HyperBEAM but runs as a separate process.</p>"},{"location":"compute-unit/#technical-requirements","title":"Technical Requirements","text":"<p>The Compute Unit requires:</p> <ul> <li>Node.js environment</li> <li>Access to local file system for state persistence</li> <li>Network access to communicate with HyperBEAM</li> <li>An Arweave wallet for identity</li> </ul>"},{"location":"compute-unit/#next-steps","title":"Next Steps","text":"<ul> <li>Setup: Learn how to install and run the Compute Unit</li> <li>Configuration: Understand available configuration options </li> </ul>"},{"location":"compute-unit/configuration/","title":"Compute Unit Configuration","text":"<p>The Compute Unit (CU) supports numerous environment variables for advanced configuration. This document details the available options and recommended settings.</p>"},{"location":"compute-unit/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>The Compute Unit can be configured using:</p> <ol> <li>Environment Variables: Set directly in the shell or via a <code>.env</code> file</li> <li>Command Line Arguments: Pass when starting the CU</li> <li>Configuration Files: Use JSON configuration files</li> </ol>"},{"location":"compute-unit/configuration/#essential-configuration-options","title":"Essential Configuration Options","text":""},{"location":"compute-unit/configuration/#basic-settings","title":"Basic Settings","text":"Variable Description Default <code>UNIT_MODE</code> Operating mode (set to \"hbu\" for HyperBEAM) - <code>HB_URL</code> URL of your HyperBEAM instance http://localhost:10000 <code>PORT</code> The port on which the CU server will listen 6363 <code>WALLET_FILE</code> Path to your Arweave wallet JSON file - <code>NODE_CONFIG_ENV</code> Configuration environment \"development\""},{"location":"compute-unit/configuration/#example-env-file","title":"Example .env File","text":"<p>A minimal configuration file looks like this:</p> <pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=./wallet.json\nNODE_CONFIG_ENV=\"development\"\n</code></pre>"},{"location":"compute-unit/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"compute-unit/configuration/#development-configuration","title":"Development Configuration","text":"<pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=./wallet.json\nNODE_CONFIG_ENV=\"development\"\n</code></pre>"},{"location":"compute-unit/configuration/#production-configuration","title":"Production Configuration","text":"<pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=/secure/path/to/wallet.json\nNODE_CONFIG_ENV=\"production\"\n</code></pre>"},{"location":"compute-unit/configuration/#applying-configuration-changes","title":"Applying Configuration Changes","text":"<p>For configuration changes to take effect, you need to restart the Compute Unit service. When running in development mode with hot reloading, some configuration changes may require a full restart. </p>"},{"location":"compute-unit/setup/","title":"Local CU Setup","text":"<p>This guide explains how to set up the local Compute Unit (CU) for HyperBEAM.</p>"},{"location":"compute-unit/setup/#what-is-local-cu","title":"What is Local CU?","text":"<p>The ao Compute Unit (CU) is a spec-compliant implementation built with NodeJS. It serves as the computational processing component in the ao ecosystem, handling WASM execution and state management.</p>"},{"location":"compute-unit/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js</li> <li>Git</li> </ul>"},{"location":"compute-unit/setup/#installation-steps","title":"Installation Steps","text":""},{"location":"compute-unit/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/permaweb/ao.git\ncd ao/servers/cu\n</code></pre>"},{"location":"compute-unit/setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm i\n</code></pre>"},{"location":"compute-unit/setup/#3-generate-a-wallet-if-needed","title":"3. Generate a Wallet (if needed)","text":"<p>If you don't already have an Arweave wallet, you can generate one:</p> <pre><code>npx --yes @permaweb/wallet &gt; wallet.json\n</code></pre>"},{"location":"compute-unit/setup/#4-configure-environment","title":"4. Configure Environment","text":"<p>Create a .env file with the following minimal configuration:</p> <pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=./wallet.json\nNODE_CONFIG_ENV=\"development\"\n</code></pre>"},{"location":"compute-unit/setup/#5-start-the-compute-unit","title":"5. Start the Compute Unit","text":"<pre><code>npm start\n</code></pre> <p>For development with hot-reloading, you can use:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"compute-unit/setup/#key-configuration-options","title":"Key Configuration Options","text":"<p>The CU supports numerous environment variables for advanced configuration. Here are some important ones:</p> <ul> <li>WALLET_FILE: Path to your Arweave wallet JSON file</li> <li>PORT: The port on which the CU server will listen (default: 6363)</li> <li>UNIT_MODE: Set to \"hbu\" for hyperBEAM mode</li> <li>HB_URL: URL of your hyperBEAM instance</li> <li>PROCESS_WASM_MEMORY_MAX_LIMIT: Maximum memory limit for processes (default: 1GB)</li> <li>DEFAULT_LOG_LEVEL: Logging level (error, warn, info, http, verbose, debug, silly)</li> </ul>"},{"location":"compute-unit/setup/#verification","title":"Verification","text":"<p>To verify that your CU is running correctly, you can check:</p> <pre><code>curl http://localhost:6363\n</code></pre>"},{"location":"contribute/guidelines/","title":"Contribution Guidelines","text":"<p>Thank you for your interest in contributing to HyperBEAM! This page outlines the process for contributing to the project and provides guidelines to ensure your contributions align with the project's goals and standards.</p>"},{"location":"contribute/guidelines/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. We expect all contributors to be respectful, inclusive, and considerate in all interactions.</p>"},{"location":"contribute/guidelines/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are many ways to contribute to HyperBEAM:</p> <ul> <li>Code contributions: Implementing new features or fixing bugs</li> <li>Documentation: Improving or adding to the documentation</li> <li>Testing: Writing tests or manually testing functionality</li> <li>Bug reports: Reporting issues you encounter</li> <li>Feature requests: Suggesting new features or improvements</li> <li>Community support: Helping other users in forums or discussions</li> </ul>"},{"location":"contribute/guidelines/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository: Create your own fork of the HyperBEAM repository.</li> <li>Set up your development environment: Follow the setup instructions in the Development Setup guide.</li> <li>Find an issue to work on: Look for issues labeled \"good first issue\" or \"help wanted\" in the GitHub issue tracker.</li> <li>Create a branch: Create a new branch for your work with a descriptive name.</li> </ol>"},{"location":"contribute/guidelines/#development-workflow","title":"Development Workflow","text":""},{"location":"contribute/guidelines/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes: Implement your feature or fix the bug.</li> <li>Follow coding standards: Ensure your code follows the project's coding standards.</li> <li>Write tests: Add tests for your changes to ensure functionality and prevent regressions.</li> <li>Update documentation: Update or add documentation to reflect your changes.</li> </ol>"},{"location":"contribute/guidelines/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Commit your changes: Use clear and descriptive commit messages.</li> <li>Push to your fork: Push your changes to your GitHub fork.</li> <li>Create a pull request: Submit a pull request from your fork to the main repository.</li> <li>Describe your changes: In the pull request, describe what you've changed and why.</li> <li>Link related issues: Link any related issues in your pull request description.</li> </ol>"},{"location":"contribute/guidelines/#code-review-process","title":"Code Review Process","text":"<ol> <li>Initial review: A maintainer will review your pull request for basic compliance.</li> <li>Feedback: You may receive feedback requesting changes or clarification.</li> <li>Iteration: Make requested changes and push them to your branch.</li> <li>Approval: Once approved, a maintainer will merge your changes.</li> </ol>"},{"location":"contribute/guidelines/#coding-standards","title":"Coding Standards","text":""},{"location":"contribute/guidelines/#erlang-code","title":"Erlang Code","text":"<ul> <li>Follow the Erlang Coding Standards</li> <li>Use meaningful variable and function names</li> <li>Document public functions with EdDoc comments</li> <li>Keep functions small and focused on a single task</li> <li>Use pattern matching effectively</li> <li>Write comprehensive unit tests</li> </ul>"},{"location":"contribute/guidelines/#javascriptnodejs-code","title":"JavaScript/Node.js Code","text":"<ul> <li>Follow the Airbnb JavaScript Style Guide</li> <li>Use async/await for asynchronous operations</li> <li>Document functions with JSDoc comments</li> <li>Use meaningful variable and function names</li> <li>Write unit tests for all functionality</li> </ul>"},{"location":"contribute/guidelines/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Keep commits focused on a single change</li> <li>Write clear commit messages that explain why a change was made</li> <li>Avoid large, monolithic pull requests</li> <li>Add comments for complex logic</li> <li>Prioritize readability and maintainability</li> </ul>"},{"location":"contribute/guidelines/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Use Markdown for all documentation</li> <li>Follow a consistent structure and style</li> <li>Include examples where appropriate</li> <li>Update documentation when changing functionality</li> <li>Ensure links work correctly</li> <li>Check spelling and grammar</li> </ul>"},{"location":"contribute/guidelines/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write unit tests for all new functionality</li> <li>Ensure tests are deterministic (no flaky tests)</li> <li>Mock external dependencies</li> <li>Consider edge cases in your tests</li> <li>Aim for high test coverage</li> <li>Include integration tests where appropriate</li> </ul>"},{"location":"contribute/guidelines/#reporting-bugs","title":"Reporting Bugs","text":"<p>When reporting bugs, please include:</p> <ol> <li>A clear, descriptive title</li> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Environment details (OS, versions, etc.)</li> <li>Screenshots or logs if applicable</li> </ol>"},{"location":"contribute/guidelines/#requesting-features","title":"Requesting Features","text":"<p>When requesting features, please include:</p> <ol> <li>A clear, descriptive title</li> <li>A detailed description of the feature</li> <li>The problem it solves or benefit it provides</li> <li>Any alternative solutions you've considered</li> <li>Mockups or examples if applicable</li> </ol>"},{"location":"contribute/guidelines/#pull-request-template","title":"Pull Request Template","text":"<p>When creating a pull request, please use the following template:</p> <pre><code>## Description\n[Describe the changes you've made]\n\n## Related Issue\n[Link to the related issue]\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code refactoring\n- [ ] Other (please describe)\n\n## Checklist\n- [ ] I have read the contribution guidelines\n- [ ] My code follows the project's coding standards\n- [ ] I have added tests that prove my fix/feature works\n- [ ] I have updated documentation to reflect my changes\n- [ ] All new and existing tests pass\n</code></pre>"},{"location":"contribute/guidelines/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>Discord: For general discussion and questions</li> <li>Pull Requests: For code review and discussion of implementations</li> </ul> <p>Thank you for contributing to HyperBEAM! </p>"},{"location":"contribute/setup/","title":"Development Setup","text":"<p>This guide will help you set up your development environment for contributing to HyperBEAM.</p>"},{"location":"contribute/setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Ubuntu 22.04 (primary development platform)</li> <li>Git</li> <li>Erlang/OTP 27</li> <li>Rebar3</li> <li>Rust (for certain components)</li> <li>A code editor (Cursor, VSCode, Emacs, Vim, etc.)</li> </ul>"},{"location":"contribute/setup/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"contribute/setup/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<p>First, fork the HyperBEAM repository on GitHub, then clone your fork:</p> <pre><code>git clone https://github.com/YOUR-USERNAME/HyperBEAM.git\ncd HyperBEAM\n</code></pre>"},{"location":"contribute/setup/#2-add-the-upstream-remote","title":"2. Add the Upstream Remote","text":"<p>Add the original repository as an upstream remote to keep your fork in sync:</p> <pre><code>git remote add upstream https://github.com/permaweb/HyperBEAM.git\n</code></pre>"},{"location":"contribute/setup/#3-install-dependencies","title":"3. Install Dependencies","text":""},{"location":"contribute/setup/#hyperbeam-core-erlang-dependencies","title":"HyperBEAM Core (Erlang) Dependencies","text":"<pre><code># Install Erlang dependencies\nrebar3 compile\n</code></pre>"},{"location":"contribute/setup/#4-run-tests","title":"4. Run Tests","text":"<p>Verify that your setup is working correctly by running the tests:</p> <pre><code># Run Erlang tests\nrebar3 eunit\n</code></pre>"},{"location":"contribute/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"contribute/setup/#1-keep-your-fork-updated","title":"1. Keep Your Fork Updated","text":"<p>Regularly sync your fork with the upstream repository:</p> <pre><code>git fetch upstream\ngit checkout main\ngit merge upstream/main\n</code></pre>"},{"location":"contribute/setup/#2-create-a-feature-branch","title":"2. Create a Feature Branch","text":"<p>Create a branch for each feature or bugfix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>or</p> <pre><code>git checkout -b fix/bug-you-are-fixing\n</code></pre>"},{"location":"contribute/setup/#3-development-cycle","title":"3. Development Cycle","text":"<p>The typical development cycle is:</p> <ol> <li>Make changes to the code</li> <li>Write tests for your changes</li> <li>Run the tests to verify your changes</li> <li>Commit your changes</li> <li>Push to your fork</li> <li>Create a pull request</li> </ol>"},{"location":"contribute/setup/#4-running-hyperbeam-locally","title":"4. Running HyperBEAM Locally","text":"<p>To run HyperBEAM for development:</p>"},{"location":"contribute/setup/#start-hyperbeam","title":"Start HyperBEAM","text":"<pre><code>rebar3 shell\n</code></pre> <p>In the Erlang shell:</p> <pre><code>application:ensure_all_started(hyperbeam).\n</code></pre>"},{"location":"contribute/setup/#5-debugging","title":"5. Debugging","text":""},{"location":"contribute/setup/#erlang-debugging","title":"Erlang Debugging","text":"<p>You can use the Erlang debugger or add logging:</p> <pre><code>?event({debug, Variable}).\n% or for more context:\n?event(module_name, {debug_label, Variable}).\n% for more detailed output with explicit information:\n?event(module_name, {debug_label, {explicit, Variable}}).\n</code></pre> <p>To filter logs for specific modules or files, you can prefix the rebar3 shell command with the <code>HB_PRINT</code> environment variable, providing a comma-separated list of module or file names:</p> <pre><code>HB_PRINT=module_name1,module_name2,filename1 rebar3 shell\n</code></pre> <p>This will show debug logs only from the specified modules or files, making it easier to focus on relevant information during development and troubleshooting.</p>"},{"location":"contribute/setup/#code-editor-setup","title":"Code Editor Setup","text":""},{"location":"contribute/setup/#vs-code","title":"VS Code","text":"<p>We recommend the following extensions for VS Code:</p> <ul> <li>Erlang LS</li> <li>erlang</li> <li>Erlang/OTP</li> </ul>"},{"location":"contribute/setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"contribute/setup/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues:</p> <pre><code>sudo chown -R $(whoami) .\n</code></pre>"},{"location":"contribute/setup/#getting-help","title":"Getting Help","text":"<p>If you need help with your development setup:</p> <ul> <li>Check existing issues on GitHub</li> <li>Ask for help in the Discord channel</li> <li>Create a new issue with the \"question\" label</li> </ul>"},{"location":"contribute/setup/#next-steps","title":"Next Steps","text":"<p>Once your development environment is set up, check out the Contribution Guidelines for information on how to submit your changes. </p>"},{"location":"getting-started/","title":"Getting Started with HyperBEAM","text":"<p>This section will guide you through the process of preparing your machine with the nessary dependencies in order to install and run HyperBEAM and the Compute Unit.</p>"},{"location":"getting-started/#installation-process-overview","title":"Installation Process Overview","text":"<p>Setting up HyperBEAM involves several steps:</p> <ol> <li>Check System Requirements - Ensure your hardware and operating system meet the minimum requirements</li> <li>Install Dependencies - Set up the necessary system packages and programming languages</li> <li>Install HyperBEAM - Clone and compile the HyperBEAM source code</li> <li>Set Up the Compute Unit - Install and configure the Compute Unit for WASM execution</li> <li>Configuration - Configure both components to work together</li> </ol>"},{"location":"getting-started/#before-you-begin","title":"Before You Begin","text":"<p>Before starting the installation process, make sure to:</p> <ul> <li>Have access to a terminal/command line with administrative privileges</li> <li>Have a stable internet connection for downloading packages</li> <li>Allocate sufficient time (approximately 30-60 minutes for a complete setup)</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you're ready to get started:</p> <ol> <li>First, check the System Requirements to ensure your system is compatible</li> <li>Then, follow the Installation Guide to set up all required components </li> </ol>"},{"location":"getting-started/requirements/","title":"System Requirements","text":"<p>Before installing HyperBEAM, ensure your system meets these minimum requirements:</p>"},{"location":"getting-started/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>CPU: 4+ cores recommended</li> <li>RAM: 8GB minimum, 16GB recommended</li> <li>Disk: 10GB free space minimum</li> </ul>"},{"location":"getting-started/requirements/#operating-system","title":"Operating System","text":"<p>HyperBEAM currently supports:</p> <ul> <li>Ubuntu 22.04 LTS (recommended)</li> </ul> <p>MacOS Support</p> <p>Support for other operating systems including macOS will be added in future releases.</p>"},{"location":"getting-started/requirements/#network","title":"Network","text":"<ul> <li>Stable internet connection</li> <li>Ability to open and forward ports (if you plan to run a public node) </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Overview","text":"<p>HyperBEAM requires several dependencies to be installed on your system. This guide will walk you through the installation process for each component.</p>"},{"location":"getting-started/installation/#installation-order","title":"Installation Order","text":"<p>For the best experience, we recommend installing prerequisites in this order:</p> <ol> <li>System dependencies (build tools, libraries)</li> <li>Erlang/OTP (programming language for HyperBEAM)</li> <li>Rebar3 (Erlang build tool)</li> <li>Node.js (required for the Compute Unit)</li> <li>Rust (for certain components)</li> </ol>"},{"location":"getting-started/installation/#component-guides","title":"Component Guides","text":"<p>Follow these guides in sequence to set up your environment:</p> <ol> <li>System Dependencies - Basic system packages</li> <li>Erlang Installation - Programming language for HyperBEAM</li> <li>Rebar3 Installation - Build tool for Erlang</li> <li>Node.js Installation - Required for the Compute Unit</li> <li>Rust Installation - Required for certain components</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installing all the dependencies, you can proceed to:</p> <ul> <li>HyperBEAM Setup</li> <li>Compute Unit Setup </li> </ul>"},{"location":"getting-started/installation/dependencies/","title":"Software Dependencies","text":"<p>HyperBEAM requires several software packages to be installed on your system. This document provides instructions for installing all required dependencies.</p>"},{"location":"getting-started/installation/dependencies/#base-packages","title":"Base Packages","text":"<p>Install all dependencies with the following command:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y --no-install-recommends \\\n    build-essential cmake git pkg-config ncurses-dev \\\n    libssl-dev sudo curl ca-certificates\n</code></pre> <p>The following software packages are required:</p> <ul> <li>build-essential: Contains basic build tools including gcc/g++ compilers</li> <li>cmake: Cross-platform build system</li> <li>git: Version control system</li> <li>pkg-config: Helper tool for compiling applications and libraries</li> <li>ncurses-dev: Development libraries for terminal-based interfaces</li> <li>libssl-dev: Development libraries for SSL (Secure Sockets Layer)</li> <li>sudo: Allows running programs with security privileges of another user</li> <li>curl: Command line tool for transferring data with URL syntax</li> <li>ca-certificates: Common CA certificates for SSL applications</li> </ul>"},{"location":"getting-started/installation/erlang/","title":"Installing Erlang/OTP","text":"<p>HyperBEAM is built on Erlang/OTP, so you'll need to have Erlang installed on your system.</p>"},{"location":"getting-started/installation/erlang/#building-erlang-from-source","title":"Building Erlang from Source","text":"<p>For the best compatibility, we recommend building Erlang from source:</p> <pre><code>git clone https://github.com/erlang/otp.git &amp;&amp; \\\n    cd otp &amp;&amp; git checkout maint-27 &amp;&amp; \\\n    ./configure --without-wx --without-debugger --without-observer --without-et &amp;&amp; \\\n    make -j$(nproc) &amp;&amp; \\\n    sudo make install &amp;&amp; \\\n    cd .. &amp;&amp; rm -rf otp\n</code></pre> <p>This will:</p> <ol> <li>Clone the Erlang/OTP repository</li> <li>Checkout the maintenance branch for version 27</li> <li>Configure the build to exclude GUI components (reducing dependencies)</li> <li>Build Erlang using all available CPU cores</li> <li>Install Erlang system-wide</li> <li>Clean up the source directory</li> </ol>"},{"location":"getting-started/installation/erlang/#verify-installation","title":"Verify Installation","text":"<p>You can verify your Erlang installation with:</p> <pre><code>erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'\n</code></pre> <p>This should output <code>27</code> (or higher), indicating the OTP release version. </p>"},{"location":"getting-started/installation/nodejs/","title":"Installing Node.js","text":"<p>Node.js is required for running the local Compute Unit (CU). This guide covers installing Node.js on Ubuntu 22.04.</p>"},{"location":"getting-started/installation/nodejs/#installing-nodejs-22x","title":"Installing Node.js 22.x","text":"<p>We recommend using Node.js version 22.x for optimal compatibility with the CU:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - &amp;&amp; \\\nsudo apt-get install -y nodejs\n</code></pre>"},{"location":"getting-started/installation/nodejs/#verify-installation","title":"Verify Installation","text":"<p>Verify that Node.js and npm are installed correctly:</p> <pre><code>node -v\nnpm -v\n</code></pre> <p>These commands should display the installed versions of Node.js and npm respectively.</p>"},{"location":"getting-started/installation/rebar3/","title":"Installing Rebar3","text":"<p>Rebar3 is the Erlang build tool used by HyperBEAM for compilation and dependency management.</p>"},{"location":"getting-started/installation/rebar3/#building-rebar3-from-source","title":"Building Rebar3 from Source","text":"<p>To install Rebar3:</p> <pre><code>git clone https://github.com/erlang/rebar3.git &amp;&amp; cd rebar3 \\\n    ./bootstrap &amp;&amp; \\\n    sudo mv rebar3 /usr/local/bin/ &amp;&amp; \\\n    cd .. &amp;&amp; rm -rf rebar3\n</code></pre> <p>This will:</p> <ol> <li>Clone the Rebar3 repository</li> <li>Bootstrap Rebar3 (build it)</li> <li>Move the executable to your system path</li> <li>Clean up the source directory</li> </ol>"},{"location":"getting-started/installation/rebar3/#verify-installation","title":"Verify Installation","text":"<p>You can verify your Rebar3 installation with:</p> <pre><code>rebar3 --version\n</code></pre> <p>This should display the version information for Rebar3.</p> <p>Example output: <code>rebar 3.24.0+build.5437.ref5495da14 on Erlang/OTP 27 Erts 15.2</code>. </p>"},{"location":"getting-started/installation/rust/","title":"Installing Rust and Cargo","text":"<p>Rust is required for certain components in the HyperBEAM ecosystem.</p>"},{"location":"getting-started/installation/rust/#installing-rust","title":"Installing Rust","text":"<p>Install Rust using rustup:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable\n</code></pre>"},{"location":"getting-started/installation/rust/#load-rust-environment","title":"Load Rust Environment","text":"<p>After installation, you'll need to load the Rust environment in your current shell:</p> <pre><code>source \"$HOME/.cargo/env\"\n</code></pre> <p>To make this permanent, add this line to your shell profile (~/.bashrc, ~/.zshrc, etc.).</p>"},{"location":"getting-started/installation/rust/#verify-installation","title":"Verify Installation","text":"<p>Verify that Rust and Cargo are installed correctly:</p> <pre><code>rustc --version\ncargo --version\n</code></pre> <p>These commands should display the installed versions of the Rust compiler and Cargo package manager. </p>"},{"location":"guides/","title":"Guides Overview","text":"<p>This section provides practical guides and tutorials for working with HyperBEAM and the Compute Unit. Whether you're just getting started or looking to build more advanced applications, these guides will help you get the most out of the platform.</p>"},{"location":"guides/#available-guides","title":"Available Guides","text":"<ul> <li>Integration Guide: Learn how to connect HyperBEAM and the Compute Unit and verify they're working together properly</li> <li>First Project Guide: Create your first AO process and deploy it to HyperBEAM</li> </ul>"},{"location":"guides/#quick-start","title":"Quick Start","text":"<p>If you're new to HyperBEAM, we recommend following these guides in order:</p> <ol> <li>Complete the installation process from the Getting Started section</li> <li>Follow the Integration Guide to ensure your components are working together</li> <li>Build your first project with the First Project Guide</li> </ol>"},{"location":"guides/#coming-soon","title":"Coming Soon","text":"<p>We're continuously adding new guides to help you leverage HyperBEAM's capabilities. Upcoming guides include:</p> <ul> <li>Building custom devices</li> <li>Optimizing process performance</li> <li>Debugging techniques</li> <li>Advanced deployment patterns</li> <li>Security best practices </li> </ul>"},{"location":"hyperbeam/","title":"HyperBEAM Overview","text":"<p>HyperBEAM is a client implementation of the AO-Core protocol, written in Erlang. It serves as the 'node' software for the decentralized operating system that AO enables, abstracting hardware provisioning and details from the execution of individual programs.</p>"},{"location":"hyperbeam/#key-features","title":"Key Features","text":"<ul> <li>Decentralized Execution: Run AO processes in a decentralized manner</li> <li>Message Passing: Communicate between processes via asynchronous message passing</li> <li>Scalable Architecture: Built on Erlang's powerful concurrency model</li> <li>Extensible Design: Easy to add new devices and capabilities</li> </ul>"},{"location":"hyperbeam/#components","title":"Components","text":"<p>HyperBEAM consists of several core components:</p> <ol> <li>Core Runtime: The base system that manages process execution</li> <li>Device Registry: System for registering and managing devices</li> <li>Message Router: Handles message passing between processes and devices</li> <li>API Layer: HTTP interfaces for interacting with the system</li> </ol>"},{"location":"hyperbeam/#system-architecture","title":"System Architecture","text":"<p>HyperBEAM works in conjunction with the Compute Unit (CU), which handles the actual WASM execution. Together, they form a complete execution environment for AO processes.</p>"},{"location":"hyperbeam/#next-steps","title":"Next Steps","text":"<ul> <li>Setup HyperBEAM: Instructions for installing and running HyperBEAM</li> <li>Configuration: How to configure your HyperBEAM installation</li> <li>Testing: Run tests to verify your installation </li> </ul>"},{"location":"hyperbeam/configuration/","title":"HyperBEAM Configuration","text":"<p>HyperBEAM can be configured using a variety of methods and options. This document covers the configuration options available and how to use them.</p>"},{"location":"hyperbeam/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>HyperBEAM can be configured in several ways:</p> <ol> <li>Command Line Arguments: Pass configuration when starting HyperBEAM</li> <li>config file todo</li> <li>Environment Variables: Set options via environment variables</li> </ol>"},{"location":"hyperbeam/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The most common way to configure HyperBEAM is via command line arguments when starting the node:</p> <pre><code>rebar3 shell --eval \"hb:start_mainnet(#{ port =&gt; 9001, key_location =&gt; 'path/to/my/wallet.key' }).\"\n</code></pre>"},{"location":"hyperbeam/configuration/#configuration-options","title":"Configuration Options","text":"<p>Here are the main configuration options available:</p> Option Type Default Description <code>port</code> Integer 10000 HTTP API port <code>key_location</code> String - Path to operator wallet key file <code>devices</code> List [] Additional devices to load"},{"location":"hyperbeam/configuration/#using-a-configuration-file","title":"Using a Configuration File","text":"<p>Node operators can also configure using a flat@1.0 encoded settings file. Example format:</p> <pre><code>port: 10000\n</code></pre> <p>Save this to a file (e.g., <code>config.flat</code>) and load it when starting HyperBEAM:</p> <pre><code>rebar3 shell --eval \"hb:start_mainnet(#{hb_config_location =&gt; \\\"config.flat\\\"}).\"\n</code></pre>"},{"location":"hyperbeam/configuration/#advanced-configuration","title":"Advanced Configuration","text":"<p>For advanced use cases, HyperBEAM supports additional configuration options: Todo</p>"},{"location":"hyperbeam/configuration/#environment-variables","title":"Environment Variables","text":"<p>HyperBEAM also respects certain environment variables:</p> <pre><code>export HB_PORT=9001\nexport HB_KEY=/path/to/wallet.key\nexport HB_CONFIG=config.flat\nexport HB_STORE=/path/to/store\nexport HB_MODE=debug                    #Options debug | prod\nexport HB_PRINT=dev_meta                #Comma seperatted values\n</code></pre>"},{"location":"hyperbeam/configuration/#recommended-configurations","title":"Recommended Configurations","text":"<p>For most users, the following configuration is recommended:</p> <pre><code>port: 10000\n</code></pre>"},{"location":"hyperbeam/setup/","title":"HyperBEAM Repository Setup","text":"<p>This guide provides step-by-step instructions for setting up and testing HyperBEAM.</p>"},{"location":"hyperbeam/setup/#1-clone-the-hyperbeam-repository","title":"1. Clone the HyperBEAM Repository","text":"<p>First, clone the <code>permaweb/HyperBEAM</code> repository from GitHub:</p> <pre><code>git clone https://github.com/permaweb/HyperBEAM\n</code></pre> <p>Navigate to the project directory:</p> <pre><code>cd HyperBEAM\n</code></pre>"},{"location":"hyperbeam/setup/#2-compile-the-code-with-rebar3","title":"2. Compile the Code with Rebar3","text":"<p>To compile the HyperBEAM code, you'll need to use Rebar3. Run the following command to compile the project:</p> <pre><code>rebar3 compile\n</code></pre> <p>This will compile the necessary code to get HyperBEAM up and running.</p>"},{"location":"hyperbeam/setup/#3-run-hyperbeam-with-shell","title":"3. Run HyperBEAM with Shell","text":"<p>Once the code is compiled, you can start the HyperBEAM shell with Rebar3:</p> <pre><code>rebar3 shell\n</code></pre> <p>This will start HyperBEAM using the default configuration inside the hb_opts.erl. Which preloads all devices and sets up defaults stores. All of which can be configured using the config.flat file with any overides you specify.</p>"},{"location":"hyperbeam/setup/#4-run-hyperbeam-on-mainnet","title":"4. Run HyperBEAM on Mainnet","text":"<p>To start HyperBEAM connected to the mainnet, you can use the <code>--eval</code> option with rebar3:</p> <pre><code>rebar3 shell --eval 'start_mainnet:start(#{}).'\n</code></pre> <p>This will start HyperBEAM with stripped opts which you can then define within the <code>#{}</code>.</p>"},{"location":"hyperbeam/testing/","title":"Testing HyperBEAM","text":"<p>This guide covers how to test your HyperBEAM installation to ensure it's working correctly.</p>"},{"location":"hyperbeam/testing/#unit-tests","title":"Unit Tests","text":"<p>HyperBEAM comes with a suite of unit tests that can be run to verify the installation and functionality.</p>"},{"location":"hyperbeam/testing/#running-all-tests","title":"Running All Tests","text":"<p>To run all unit tests for HyperBEAM, use the following Rebar3 command:</p> <pre><code>rebar3 eunit\n</code></pre> <p>This will execute the EUnit tests and provide the results in your terminal.</p>"},{"location":"hyperbeam/testing/#running-tests-for-a-specific-module","title":"Running Tests for a Specific Module","text":"<p>To run tests for a specific module, use the following command:</p> <pre><code>rebar3 eunit --module dev_meta\n</code></pre> <p>This will run the tests for the <code>dev_meta</code> module.</p>"},{"location":"hyperbeam/testing/#running-a-specific-test-in-a-module","title":"Running a Specific Test in a Module","text":"<p>To run a specific test within a module, use the <code>--test</code> flag with the module name and test function.  For example, to run the <code>config_test</code> in the <code>dev_meta</code> module:</p> <pre><code>rebar3 eunit --test dev_meta:config_test\n</code></pre>"},{"location":"hyperbeam/testing/#integration-tests","title":"Integration Tests","text":"<p>To ensure that HyperBEAM works correctly with the Compute Unit (CU), you can run integration tests.</p>"},{"location":"hyperbeam/testing/#prerequisites-for-integration-tests","title":"Prerequisites for Integration Tests","text":"<p>Before running integration tests, make sure:</p> <ol> <li>Both HyperBEAM and the Compute Unit are running</li> <li>They are configured to point to each other</li> </ol>"},{"location":"hyperbeam/testing/#manual-testing","title":"Manual Testing","text":"<p>You can also manually test HyperBEAM to verify its functionality.</p>"},{"location":"hyperbeam/testing/#testing-the-http-api","title":"Testing the HTTP API","text":"<p>You can use curl to test the HTTP API:</p> <pre><code>curl http://localhost:10000/~meta@1.0/info\n</code></pre> <p>This should return information about your HyperBEAM node.</p>"},{"location":"hyperbeam/testing/#testing-with-aos-cli","title":"Testing with AOS CLI","text":"<p>The AOS CLI provides a convenient way to test your HyperBEAM setup:</p> <pre><code># Install the AOS CLI if not already installed\nnpm i -g https://arweave.net/XCeKQlNLulA6IZCHZQsZcr3wWomXLJrvowJH05fV_m4\n\n# Test the HyperBEAM connection\naos hb_test --mainnet http://localhost:10000\n</code></pre>"},{"location":"hyperbeam/testing/#troubleshooting-failed-tests","title":"Troubleshooting Failed Tests","text":"<p>If tests fail, check the following:</p> <ol> <li>Ensure all dependencies are installed correctly</li> <li>Verify that HyperBEAM is properly configured</li> <li>Check that the Compute Unit is running and accessible</li> <li>Look for error messages in the test output</li> <li>Examine the HyperBEAM logs for more details</li> </ol> <p>For specific error messages, refer to the Troubleshooting Guide. </p>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>This page answers common questions about HyperBEAM, its components, and how to use them effectively.</p>"},{"location":"reference/faq/#general-questions","title":"General Questions","text":""},{"location":"reference/faq/#what-is-hyperbeam","title":"What is HyperBEAM?","text":"<p>HyperBEAM is a client implementation of the AO-Core protocol written in Erlang. It serves as the node software for a decentralized operating system that allows operators to offer computational resources to users in the AO network.</p>"},{"location":"reference/faq/#how-does-hyperbeam-differ-from-other-distributed-systems","title":"How does HyperBEAM differ from other distributed systems?","text":"<p>HyperBEAM focuses on true decentralization with asynchronous message passing between isolated processes. Unlike many distributed systems that rely on central coordination, HyperBEAM nodes can operate independently while still forming a cohesive network. Additionally, its Erlang foundation provides robust fault tolerance and concurrency capabilities.</p>"},{"location":"reference/faq/#what-can-i-build-with-hyperbeam","title":"What can I build with HyperBEAM?","text":"<p>You can build a wide range of applications, including:</p> <ul> <li>Decentralized applications (dApps)</li> <li>Distributed computation systems</li> <li>Peer-to-peer services</li> <li>Resilient microservices</li> <li>IoT device networks</li> <li>Decentralized storage solutions</li> </ul>"},{"location":"reference/faq/#is-hyperbeam-open-source","title":"Is HyperBEAM open source?","text":"<p>Yes, HyperBEAM is open-source software licensed under the MIT License.</p>"},{"location":"reference/faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"reference/faq/#what-are-the-system-requirements-for-running-hyperbeam","title":"What are the system requirements for running HyperBEAM?","text":"<p>Currently, HyperBEAM is primarily tested and documented for Ubuntu 22.04. Support for macOS and other platforms will be added in future updates. For detailed requirements, see the System Requirements page.</p>"},{"location":"reference/faq/#can-i-run-hyperbeam-in-a-container","title":"Can I run HyperBEAM in a container?","text":"<p>While technically possible, running HyperBEAM in Docker containers or other containerization technologies is currently not recommended. The containerization approach may introduce additional complexity and potential performance issues. We recommend running HyperBEAM directly on the host system until container support is more thoroughly tested and optimized.</p>"},{"location":"reference/faq/#how-do-i-update-hyperbeam-to-the-latest-version","title":"How do I update HyperBEAM to the latest version?","text":"<p>To update HyperBEAM:</p> <ol> <li>Pull the latest code from the repository</li> <li>Rebuild the application</li> <li>Restart the HyperBEAM service</li> </ol> <p>Specific update instructions will vary depending on your installation method.</p>"},{"location":"reference/faq/#can-i-run-multiple-hyperbeam-nodes-on-a-single-machine","title":"Can I run multiple HyperBEAM nodes on a single machine?","text":"<p>Yes, you can run multiple HyperBEAM nodes on a single machine, but you'll need to configure them to use different ports and data directories to avoid conflicts. However, this is not recommended for production environments as each node should ideally have a unique IP address to properly participate in the network. Running multiple nodes on a single machine is primarily useful for development and testing purposes.</p>"},{"location":"reference/faq/#architecture-and-components","title":"Architecture and Components","text":""},{"location":"reference/faq/#what-is-the-difference-between-hyperbeam-and-compute-unit","title":"What is the difference between HyperBEAM and Compute Unit?","text":"<ul> <li>HyperBEAM: The Erlang-based node software that handles message routing, process management, and device coordination.</li> <li>Compute Unit (CU): A NodeJS implementation that executes WebAssembly modules and handles computational tasks.</li> </ul> <p>Together, these components form a complete execution environment for AO processes.</p>"},{"location":"reference/faq/#development-and-usage","title":"Development and Usage","text":""},{"location":"reference/faq/#what-programming-languages-can-i-use-with-hyperbeam","title":"What programming languages can I use with HyperBEAM?","text":"<p>You can use any programming language that compiles to WebAssembly (WASM) for creating modules that run on the Compute Unit. This includes languages like:</p> <ul> <li>Lua</li> <li>Rust</li> <li>C/C++</li> <li>And many others with WebAssembly support</li> </ul>"},{"location":"reference/faq/#how-do-i-debug-processes-running-in-hyperbeam","title":"How do I debug processes running in HyperBEAM?","text":"<p>Debugging processes in HyperBEAM can be done through:</p> <ol> <li>Logging messages to the system log</li> <li>Monitoring process state and message flow</li> <li>Inspecting memory usage and performance metrics</li> </ol>"},{"location":"reference/faq/#is-there-a-limit-to-how-many-processes-can-run-on-a-node","title":"Is there a limit to how many processes can run on a node?","text":"<p>The practical limit depends on your hardware resources. Erlang is designed to handle millions of lightweight processes efficiently, but the actual number will be determined by:</p> <ul> <li>Available memory</li> <li>CPU capacity</li> <li>Network bandwidth</li> <li>Storage speed</li> <li>The complexity of your processes</li> </ul>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#what-should-i-do-if-a-node-becomes-unresponsive","title":"What should I do if a node becomes unresponsive?","text":"<p>If a node becomes unresponsive:</p> <ol> <li>Check the node's logs for error messages</li> <li>Verify network connectivity</li> <li>Ensure sufficient system resources</li> <li>Restart the node if necessary</li> <li>Check for configuration issues</li> </ol> <p>For persistent problems, consult the Troubleshooting page.</p>"},{"location":"reference/faq/#where-can-i-get-help-if-i-encounter-issues","title":"Where can I get help if I encounter issues?","text":"<p>If you encounter issues:</p> <ul> <li>Check the Troubleshooting guide</li> <li>Search or ask questions on GitHub Issues</li> <li>Join the community on Discord</li> </ul>"},{"location":"reference/glossary/","title":"Glossary","text":"<p>This glossary provides definitions for terms and concepts used throughout the HyperBEAM documentation.</p>"},{"location":"reference/glossary/#ao-core-protocol","title":"AO-Core Protocol","text":"<p>The underlying protocol that HyperBEAM implements, enabling decentralized computing and communication between nodes.</p>"},{"location":"reference/glossary/#asynchronous-message-passing","title":"Asynchronous Message Passing","text":"<p>A communication paradigm where senders don't wait for receivers to be ready, allowing for non-blocking operations and better scalability.</p>"},{"location":"reference/glossary/#compute-unit-cu","title":"Compute Unit (CU)","text":"<p>The NodeJS component of HyperBEAM that executes WebAssembly modules and handles computational tasks.</p>"},{"location":"reference/glossary/#decentralized-execution","title":"Decentralized Execution","text":"<p>The ability to run processes across a distributed network without centralized control or coordination.</p>"},{"location":"reference/glossary/#device","title":"Device","text":"<p>A functional unit in HyperBEAM that provides specific capabilities to the system, such as storage, networking, or computational resources.</p>"},{"location":"reference/glossary/#erlang","title":"Erlang","text":"<p>The programming language used to implement the HyperBEAM core, known for its robustness and support for building distributed, fault-tolerant applications.</p>"},{"location":"reference/glossary/#hyperbeam","title":"HyperBEAM","text":"<p>The Erlang-based node software that handles message routing, process management, and device coordination in the HyperBEAM ecosystem.</p>"},{"location":"reference/glossary/#message","title":"Message","text":"<p>A data structure used for communication between processes in the HyperBEAM system. Messages are asynchronously passed between processes.</p>"},{"location":"reference/glossary/#module","title":"Module","text":"<p>A unit of code that can be loaded and executed by the Compute Unit, typically in WebAssembly format.</p>"},{"location":"reference/glossary/#node","title":"Node","text":"<p>An instance of HyperBEAM running on a physical or virtual machine that participates in the distributed network.</p>"},{"location":"reference/glossary/#process","title":"Process","text":"<p>An independent unit of computation in HyperBEAM with its own state and execution context.</p>"},{"location":"reference/glossary/#process-id","title":"Process ID","text":"<p>A unique identifier assigned to a process within the HyperBEAM system.</p>"},{"location":"reference/glossary/#webassembly-wasm","title":"WebAssembly (WASM)","text":"<p>A binary instruction format that serves as a portable compilation target for programming languages, enabling deployment on the web and other environments. </p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide addresses common issues you might encounter when working with HyperBEAM and the Compute Unit.</p>"},{"location":"reference/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"reference/troubleshooting/#erlang-installation-fails","title":"Erlang Installation Fails","text":"<p>Symptoms: Errors during Erlang compilation or installation</p> <p>Solutions:</p> <ul> <li>Ensure all required dependencies are installed: <code>sudo apt-get install -y libssl-dev ncurses-dev make cmake gcc g++</code></li> <li>Try configuring with fewer options: <code>./configure --without-wx --without-debugger --without-observer --without-et</code></li> <li>Check disk space, as compilation requires several GB of free space</li> </ul>"},{"location":"reference/troubleshooting/#rebar3-bootstrap-fails","title":"Rebar3 Bootstrap Fails","text":"<p>Symptoms: Errors when running <code>./bootstrap</code> for Rebar3</p> <p>Solutions:</p> <ul> <li>Verify Erlang is correctly installed: <code>erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'</code></li> <li>Ensure you have the latest version of the repository: <code>git fetch &amp;&amp; git reset --hard origin/master</code></li> <li>Try manually downloading a precompiled Rebar3 binary</li> </ul>"},{"location":"reference/troubleshooting/#hyperbeam-issues","title":"HyperBEAM Issues","text":""},{"location":"reference/troubleshooting/#hyperbeam-wont-start","title":"HyperBEAM Won't Start","text":"<p>Symptoms: Errors when running <code>rebar3 shell</code> or the HyperBEAM startup command</p> <p>Solutions:</p> <ul> <li>Check for port conflicts: Another service might be using the configured port</li> <li>Verify the wallet key file exists and is accessible</li> <li>Examine Erlang crash dumps for detailed error information</li> <li>Ensure all required dependencies are installed</li> </ul>"},{"location":"reference/troubleshooting/#hyperbeam-crashes-during-operation","title":"HyperBEAM Crashes During Operation","text":"<p>Symptoms: Unexpected termination of the HyperBEAM process</p> <p>Solutions:</p> <ul> <li>Check system resources (memory, disk space)</li> <li>Examine Erlang crash dumps for details</li> <li>Reduce memory limits if the system is resource-constrained</li> <li>Check for network connectivity issues if connecting to external services</li> </ul>"},{"location":"reference/troubleshooting/#compute-unit-issues","title":"Compute Unit Issues","text":""},{"location":"reference/troubleshooting/#compute-unit-wont-start","title":"Compute Unit Won't Start","text":"<p>Symptoms: Errors when running <code>npm start</code> in the CU directory</p> <p>Solutions:</p> <ul> <li>Verify Node.js is installed correctly: <code>node -v</code></li> <li>Ensure all dependencies are installed: <code>npm i</code></li> <li>Check that the wallet file exists and is correctly formatted</li> <li>Verify the <code>.env</code> file has all required settings</li> </ul>"},{"location":"reference/troubleshooting/#memory-errors-in-compute-unit","title":"Memory Errors in Compute Unit","text":"<p>Symptoms: Out of memory errors or excessive memory usage</p> <p>Solutions:</p> <ul> <li>Adjust the <code>PROCESS_WASM_MEMORY_MAX_LIMIT</code> environment variable</li> <li>Enable garbage collection by setting an appropriate <code>GC_INTERVAL_MS</code></li> <li>Monitor memory usage and adjust limits as needed</li> <li>If on a low-memory system, reduce concurrent process execution</li> </ul>"},{"location":"reference/troubleshooting/#integration-issues","title":"Integration Issues","text":""},{"location":"reference/troubleshooting/#hyperbeam-cant-connect-to-compute-unit","title":"HyperBEAM Can't Connect to Compute Unit","text":"<p>Symptoms: Connection errors in HyperBEAM logs when trying to reach the CU</p> <p>Solutions:</p> <ul> <li>Verify the CU is running: <code>curl http://localhost:6363</code></li> <li>Ensure there are no firewall rules blocking the connection</li> <li>Verify network configuration if components are on different machines</li> </ul>"},{"location":"reference/troubleshooting/#process-execution-fails","title":"Process Execution Fails","text":"<p>Symptoms: Errors when deploying or executing processes</p> <p>Solutions:</p> <ul> <li>Check both HyperBEAM and CU logs for specific error messages</li> <li>Verify that the WASM module is correctly compiled and valid</li> <li>Test with a simple example process to isolate the issue</li> <li>Adjust memory limits if the process requires more resources</li> </ul>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues after trying these troubleshooting steps:</p> <ol> <li>Check the GitHub repository for known issues</li> <li>Join the Discord community for support</li> <li>Open an issue on GitHub with detailed information about your problem </li> </ol>"}]}