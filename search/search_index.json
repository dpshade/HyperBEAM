{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"hyperBEAM. <p>DOCUMENTATION</p> <p>Platform Support</p> <p>This documentation is currently written specifically for Ubuntu 22.04. Support for macOS and other platforms will be added in future updates.</p> <p>Welcome to the official documentation for HyperBEAM, a client implementation of the AO-Core protocol written in Erlang. HyperBEAM serves as the node software for the decentralized operating system that AO enables.</p>"},{"location":"#what-is-hyperbeam","title":"What is HyperBEAM?","text":"<p>HyperBEAM is a client implementation of the AO-Core protocol, written in Erlang. It serves as the 'node' software for the decentralized operating system that AO enables, abstracting hardware provisioning details from the execution of individual programs.</p> <p>HyperBEAM node operators can offer computational resources to users in the AO network by electing to execute any number of different devices, potentially charging users for their computation as necessary. It enables a decentralized computing platform where:</p> <ul> <li>Programs run as independent processes</li> <li>Processes communicate via asynchronous message passing</li> <li>Computation occurs across a distributed network of nodes</li> <li>State is persisted and accessible across the network</li> </ul>"},{"location":"#what-is-ao-core","title":"What is AO-Core?","text":"<p>AO-Core is a protocol built to enable decentralized computations, offering a series of universal primitives. Instead of enforcing a single, monolithic architecture, AO-Core provides a framework into which any number of different computational models, encapsulated as primitive devices, can be attached.</p> <p>AO-Core's protocol is built upon these fundamental primitives:</p> <ul> <li>Hashpaths: A mechanism for referencing locations in a program's state-space prior to execution</li> <li>Unified data structure: For representing program states as HTTP documents</li> <li>Attestation protocol: For expressing attestations of states found at particular hashpaths</li> <li>Meta-VM: Allowing various virtual machines and computational models (devices) to be executed inside the AO-Core protocol</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<p>The HyperBEAM ecosystem consists of two main components:</p> <ol> <li> <p>HyperBEAM: The Erlang-based node software that handles message routing, process management, and device coordination.</p> </li> <li> <p>Compute Unit (CU): A NodeJS implementation that executes WebAssembly modules and handles computational tasks.</p> </li> </ol> <p>Together, these components form a complete execution environment for AO processes.</p>"},{"location":"#messages","title":"Messages","text":"<p>HyperBEAM describes every piece of data as a message, which can be interpreted as a binary term or as a collection of named functions (a Map of functions). Every message may specify a device which is interpreted by the AO-Core compatible system to operate upon the message's contents.</p> <p>Executing a named function within a message, providing a map of arguments, results in another message. In this way, messages in AO-Core always beget further messages, giving rise to a vast computational space leveraging function application and composition at its core.</p>"},{"location":"#devices","title":"Devices","text":"<p>HyperBEAM supports numerous devices, each enabling different services to be offered by the node. Each HyperBEAM node comes with preloaded devices, including:</p> <ul> <li>~meta@1.0: Used to configure the node's hardware, supported devices, and other settings</li> <li>~relay@1.0: Used to relay messages between nodes and the wider HTTP network</li> <li>~wasm64@1.0: Used to execute WebAssembly code</li> <li>~process@1.0: Enables creation of persistent, shared executions accessible by multiple users</li> <li>~snp@1.0: Used for trusted execution environment (TEE) operations</li> </ul> <p>Node operators can add or remove devices as necessary based on their requirements.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Decentralized Execution: Run processes in a distributed environment</li> <li>Device System: Register and use a variety of devices for extended functionality</li> <li>Message Passing: Built on an asynchronous message passing architecture</li> <li>Scalable Architecture: Built on Erlang's powerful concurrency model</li> <li>Extensible Design: Easily add new devices and capabilities</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with HyperBEAM:</p> <ol> <li>Check system requirements</li> <li>Install dependencies</li> <li>Set up HyperBEAM</li> <li>Configure the Compute Unit</li> <li>Verify your installation</li> </ol>"},{"location":"#basic-installation-requirements","title":"Basic Installation Requirements","text":"<p>You will need:</p> <ul> <li>The Erlang runtime (OTP 27)</li> <li>Rebar3</li> <li>Rust / Cargo</li> <li>Git</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into the following sections:</p> <ul> <li>Getting Started: System requirements and installation instructions</li> <li>HyperBEAM: Core setup, configuration, and testing</li> <li>Compute Unit: Setup and configuration of the CU component</li> <li>Guides: Step-by-step tutorials and walkthroughs</li> <li>Reference: API documentation and troubleshooting</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub HyperBEAM: permaweb/HyperBEAM</li> <li>Github Local CU: permaweb/local-cu</li> <li>Discord: Join the community</li> <li>Issues: File a bug report</li> </ul>"},{"location":"#license","title":"License","text":"<p>HyperBEAM is open-source software licensed under the MIT License.</p>"},{"location":"compute-unit/","title":"Compute Unit Overview","text":"<p>The ao Compute Unit (CU) is a spec-compliant implementation built with NodeJS that serves as the computational processing component in the ao ecosystem, handling WASM execution and state management.</p>"},{"location":"compute-unit/#what-is-the-compute-unit","title":"What is the Compute Unit?","text":"<p>The Compute Unit is responsible for executing WebAssembly modules and handling computational tasks within the ao ecosystem. It works in conjunction with HyperBEAM but runs as a separate process, providing the actual execution environment for ao processes.</p> <p>Key responsibilities include: - Executing WebAssembly modules - Managing process memory and state - Handling process checkpointing - Processing evaluation requests from HyperBEAM</p>"},{"location":"compute-unit/#architecture","title":"Architecture","text":"<p>The Compute Unit follows a Ports and Adapters Architecture (also known as Hexagonal Architecture):</p> <ul> <li>Business Logic: Located in <code>src/domain</code>, this contains all core functionality</li> <li>Driven Adapters: Located in <code>effects</code>, these implement contracts for various platforms</li> <li>Driving Adapter: Also in <code>effects</code>, this exposes the public API</li> </ul> <p>This architecture separates business logic from external interfaces, making the system more maintainable and testable.</p>"},{"location":"compute-unit/#project-structure","title":"Project Structure","text":"<ul> <li>domain: Contains all business logic and public APIs</li> <li>api: Implements public interfaces</li> <li>lib: Contains business logic components</li> <li> <p>dal.js: Defines contracts for driven adapters</p> </li> <li> <p>effects: Contains implementations of external interfaces</p> </li> <li>ao-http: Exposes the HTTP API consumed by other ao units</li> </ul>"},{"location":"compute-unit/#technical-requirements","title":"Technical Requirements","text":"<p>The Compute Unit requires:</p> <ul> <li>Node.ja</li> <li>Access to local file system for state persistence</li> <li>Network access to communicate with HyperBEAM</li> <li>An Arweave wallet for identity</li> </ul>"},{"location":"compute-unit/#system-requirements","title":"System Requirements","text":"<p>The ao Compute Unit is a stateless application that can be deployed to any containerized environment using its Dockerfile or directly with Node.js. It requires:</p> <ul> <li>A containerization environment or Node.js runtime</li> <li>A filesystem to store files and an embedded database</li> <li>Ingress capability from the Internet</li> <li>Egress capability to other ao units and the Internet</li> </ul>"},{"location":"compute-unit/#key-features","title":"Key Features","text":"<ul> <li>WASM Execution: Executes WebAssembly modules for ao processes</li> <li>State Management: Maintains process memory and state</li> <li>Checkpointing: Creates and manages checkpoints of process state</li> <li>Configurable Limits: Memory and compute limits can be adjusted</li> <li>Event-Driven Architecture: Processes messages asynchronously</li> <li>Robust Logging: Comprehensive logging with configurable levels</li> </ul>"},{"location":"compute-unit/#next-steps","title":"Next Steps","text":"<ul> <li>Setup: Learn how to install and run the Compute Unit</li> <li>Configuration: Understand available configuration options</li> <li>API Reference: Explore the Compute Unit's API </li> </ul>"},{"location":"compute-unit/configuration/","title":"Compute Unit Configuration","text":"<p>The Compute Unit (CU) supports numerous environment variables and configuration options. This document details the available options and recommended settings.</p>"},{"location":"compute-unit/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>The Compute Unit can be configured using:</p> <ol> <li>Environment Variables: Set directly in the shell or via a <code>.env</code> file</li> <li>Command Line Arguments: Pass when starting the CU</li> <li>Configuration Files: Use JSON configuration files</li> </ol>"},{"location":"compute-unit/configuration/#essential-configuration-options","title":"Essential Configuration Options","text":""},{"location":"compute-unit/configuration/#core-settings","title":"Core Settings","text":"Variable Description Default <code>UNIT_MODE</code> Operating mode (set to \"hbu\" for HyperBEAM) - <code>HB_URL</code> URL of your HyperBEAM instance http://localhost:10000 <code>PORT</code> The port on which the CU server will listen 6363 <code>WALLET_FILE</code> Path to your Arweave wallet JSON file - <code>NODE_CONFIG_ENV</code> Configuration environment \"development\""},{"location":"compute-unit/configuration/#network-settings","title":"Network Settings","text":"Variable Description Default <code>GATEWAY_URL</code> The url of the Arweave gateway https://arweave.net <code>ARWEAVE_URL</code> URL for the Arweave HTTP API GATEWAY_URL <code>GRAPHQL_URL</code> URL for the Arweave GraphQL server ${GATEWAY_URL}/graphql <code>CHECKPOINT_GRAPHQL_URL</code> URL for querying Checkpoints GRAPHQL_URL <code>UPLOADER_URL</code> URL for uploading Process Checkpoints up.arweave.net"},{"location":"compute-unit/configuration/#wasm-execution-settings","title":"WASM Execution Settings","text":"Variable Description Default <code>PROCESS_WASM_MEMORY_MAX_LIMIT</code> Maximum memory limit for processes in bytes 1GB <code>PROCESS_WASM_COMPUTE_MAX_LIMIT</code> Maximum compute limit for processes 9 billion <code>PROCESS_WASM_SUPPORTED_FORMATS</code> Supported wasm module formats (comma-delimited) wasm32-unknown-emscripten,wasm32-unknown-emscripten2 <code>PROCESS_WASM_SUPPORTED_EXTENSIONS</code> Supported wasm extensions (comma-delimited) - <code>WASM_EVALUATION_MAX_WORKERS</code> Number of workers for message evaluation CPU count - 1"},{"location":"compute-unit/configuration/#caching-settings","title":"Caching Settings","text":"Variable Description Default <code>WASM_BINARY_FILE_DIRECTORY</code> Directory to cache wasm binaries OS temp directory <code>WASM_MODULE_CACHE_MAX_SIZE</code> Maximum size of the wasm module cache 5 modules <code>WASM_INSTANCE_CACHE_MAX_SIZE</code> Maximum size of the wasm instance cache 5 instances <code>PROCESS_MEMORY_CACHE_MAX_SIZE</code> Maximum size of the process memory cache in bytes - <code>PROCESS_MEMORY_CACHE_TTL</code> Time-to-live for memory cache entries - <code>PROCESS_MEMORY_CACHE_FILE_DIR</code> Directory for drained process memory OS temp directory"},{"location":"compute-unit/configuration/#checkpoint-settings","title":"Checkpoint Settings","text":"Variable Description Default <code>PROCESS_MEMORY_FILE_CHECKPOINTS_DIR</code> Directory for file checkpoints OS temp/file_checkpoints <code>PROCESS_MEMORY_CACHE_CHECKPOINT_INTERVAL</code> Checkpoint interval (0 to disable) 0 <code>PROCESS_CHECKPOINT_CREATION_THROTTLE</code> Time between checkpoints for a process 30 minutes <code>DISABLE_PROCESS_CHECKPOINT_CREATION</code> Disable Arweave checkpoint uploads Enabled (must set to 'false' to enable) <code>DISABLE_PROCESS_FILE_CHECKPOINT_CREATION</code> Disable file checkpoint creation Enabled (must set to 'false' to enable) <code>EAGER_CHECKPOINT_ACCUMULATED_GAS_THRESHOLD</code> Gas threshold for immediate checkpoint -"},{"location":"compute-unit/configuration/#performance-and-monitoring","title":"Performance and Monitoring","text":"Variable Description Default <code>MEM_MONITOR_INTERVAL</code> Interval for logging memory usage - <code>BUSY_THRESHOLD</code> Timeout for \"busy\" response to clients 0 (disabled) <code>ENABLE_METRICS_ENDPOINT</code> Enable OpenTelemetry metrics endpoint Disabled <code>DEFAULT_LOG_LEVEL</code> Logging level debug <code>LOG_CONFIG_PATH</code> Path to log level configuration file .loglevel"},{"location":"compute-unit/configuration/#access-control","title":"Access Control","text":"Variable Description Default <code>RESTRICT_PROCESSES</code> Process IDs to restrict (blacklist) - <code>ALLOW_PROCESSES</code> Process IDs to allow (whitelist) - <code>ALLOW_OWNERS</code> Process owners to allow (whitelist) - <code>PROCESS_CHECKPOINT_TRUSTED_OWNERS</code> Wallets whose checkpoints are trusted -"},{"location":"compute-unit/configuration/#example-env-file","title":"Example .env File","text":"<p>A minimal configuration file looks like this:</p> <pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=./wallet.json\nNODE_CONFIG_ENV=\"development\"\n</code></pre>"},{"location":"compute-unit/configuration/#logging-configuration","title":"Logging Configuration","text":"<p>The CU uses logging levels that conform to RFC5424 severity semantics:</p> <pre><code>{\n  error: 0,   // Errors that must be addressed immediately\n  warn: 1,    // Warnings that should be monitored\n  info: 2,    // Important operational information\n  http: 3,    // HTTP request/response details\n  verbose: 4, // More detailed operational information\n  debug: 5,   // Debugging information\n  silly: 6    // Very detailed debugging information\n}\n</code></pre> <p>You can set the logging level with the <code>DEFAULT_LOG_LEVEL</code> environment variable or dynamically change it by creating or modifying a <code>.loglevel</code> file in the working directory.</p>"},{"location":"compute-unit/configuration/#applying-configuration-changes","title":"Applying Configuration Changes","text":"<p>For most configuration changes to take effect, you need to restart the Compute Unit service. When running in development mode with hot reloading, some configuration changes may require a full restart. </p>"},{"location":"compute-unit/setup/","title":"Local CU Setup","text":"<p>This guide explains how to set up the local Compute Unit (CU) for HyperBEAM.</p>"},{"location":"compute-unit/setup/#what-is-local-cu","title":"What is Local CU?","text":"<p>The ao Compute Unit (CU) is a spec-compliant implementation built with NodeJS. It serves as the computational processing component in the ao ecosystem, handling WASM execution and state management.</p>"},{"location":"compute-unit/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js</li> <li>Git</li> </ul>"},{"location":"compute-unit/setup/#installation-steps","title":"Installation Steps","text":""},{"location":"compute-unit/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/permaweb/local-cu\ncd local-cu\n</code></pre>"},{"location":"compute-unit/setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm i\n</code></pre>"},{"location":"compute-unit/setup/#3-generate-a-wallet-if-needed","title":"3. Generate a Wallet (if needed)","text":"<p>If you don't already have an Arweave wallet, you can generate one:</p> <pre><code>npx --yes @permaweb/wallet &gt; wallet.json\n</code></pre>"},{"location":"compute-unit/setup/#4-configure-environment","title":"4. Configure Environment","text":"<p>Create a <code>.env</code> file with the following minimal configuration:</p> <pre><code>UNIT_MODE=hbu\nHB_URL=http://localhost:10000\nPORT=6363\nWALLET_FILE=./wallet.json\nNODE_CONFIG_ENV=\"development\"\n</code></pre>"},{"location":"compute-unit/setup/#5-start-the-compute-unit","title":"5. Start the Compute Unit","text":"<pre><code>npm start\n</code></pre> <p>For development with hot-reloading, you can use:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"compute-unit/setup/#environment-variables","title":"Environment Variables","text":"<p>The CU supports numerous environment variables for configuration. Here are the key ones:</p>"},{"location":"compute-unit/setup/#essential-configuration","title":"Essential Configuration","text":"<ul> <li>WALLET/WALLET_FILE: The JWK Interface stringified JSON or a file to load it from</li> <li>PORT: Which port the web server should listen on (defaults to 6363)</li> <li>UNIT_MODE: Set to \"hbu\" for HyperBEAM mode</li> <li>HB_URL: URL of your HyperBEAM instance</li> </ul>"},{"location":"compute-unit/setup/#gateway-configuration","title":"Gateway Configuration","text":"<ul> <li>GATEWAY_URL: The URL of the Arweave gateway (defaults to https://arweave.net)</li> <li>ARWEAVE_URL: The URL for the Arweave HTTP API (defaults to GATEWAY_URL)</li> <li>GRAPHQL_URL: The URL for the Arweave GraphQL server (defaults to ${GATEWAY_URL}/graphql)</li> <li>UPLOADER_URL: The URL of the uploader for Process Checkpoints (defaults to up.arweave.net)</li> </ul>"},{"location":"compute-unit/setup/#process-limits","title":"Process Limits","text":"<ul> <li>PROCESS_WASM_MEMORY_MAX_LIMIT: Maximum memory limit for processes (defaults to 1GB)</li> <li>PROCESS_WASM_COMPUTE_MAX_LIMIT: Maximum compute limit for processes (defaults to 9 billion)</li> <li>PROCESS_WASM_SUPPORTED_FORMATS: Supported wasm module formats (comma-delimited)</li> <li>PROCESS_WASM_SUPPORTED_EXTENSIONS: Supported wasm extensions (comma-delimited)</li> </ul>"},{"location":"compute-unit/setup/#caching-and-performance","title":"Caching and Performance","text":"<ul> <li>WASM_EVALUATION_MAX_WORKERS: Number of workers for evaluating messages (defaults to CPU count - 1)</li> <li>WASM_BINARY_FILE_DIRECTORY: Directory to cache wasm binaries downloaded from Arweave</li> <li>WASM_MODULE_CACHE_MAX_SIZE: Maximum size of the in-memory wasm module cache</li> <li>WASM_INSTANCE_CACHE_MAX_SIZE: Maximum size of the in-memory wasm instance cache</li> <li>PROCESS_MEMORY_CACHE_MAX_SIZE: Maximum size of the process memory cache</li> <li>PROCESS_MEMORY_CACHE_TTL: Time-to-live for process memory cache entries</li> </ul>"},{"location":"compute-unit/setup/#checkpoint-configuration","title":"Checkpoint Configuration","text":"<ul> <li>PROCESS_MEMORY_CACHE_CHECKPOINT_INTERVAL: Interval for checkpointing processes (0 to disable)</li> <li>PROCESS_CHECKPOINT_CREATION_THROTTLE: Time to wait before creating another checkpoint for a process</li> <li>DISABLE_PROCESS_CHECKPOINT_CREATION: Whether to disable process checkpoint uploads to Arweave</li> <li>DISABLE_PROCESS_FILE_CHECKPOINT_CREATION: Whether to disable process checkpoint creation to the filesystem</li> <li>EAGER_CHECKPOINT_ACCUMULATED_GAS_THRESHOLD: Gas threshold for immediate checkpoint creation</li> </ul>"},{"location":"compute-unit/setup/#database-configuration","title":"Database Configuration","text":"<ul> <li>DB_MODE: Whether the database is embedded or remote (defaults to embedded)</li> <li>DB_URL: The name of the embedded database (defaults to ao-cache)</li> </ul>"},{"location":"compute-unit/setup/#other-settings","title":"Other Settings","text":"<ul> <li>ENABLE_METRICS_ENDPOINT: Whether to enable the OpenTelemetry /metrics endpoint</li> <li>DEFAULT_LOG_LEVEL: The logging level to use (defaults to debug)</li> <li>LOG_CONFIG_PATH: Path to the file used to dynamically set logging level</li> <li>BUSY_THRESHOLD: Wait time before sending a \"busy\" response to clients</li> <li>RESTRICT_PROCESSES: List of process IDs to restrict (blacklist)</li> <li>ALLOW_PROCESSES: List of process IDs to allow (whitelist)</li> <li>ALLOW_OWNERS: List of process owners to allow (owner whitelist)</li> </ul>"},{"location":"compute-unit/setup/#verification","title":"Verification","text":"<p>To verify that your CU is running correctly, you can check:</p> <pre><code>curl http://localhost:6363\n</code></pre> <p>You should receive a response confirming the CU is operational.</p>"},{"location":"compute-unit/setup/#dynamically-change-log-level","title":"Dynamically Change Log Level","text":"<p>If you need to change the log level while the CU is running, you can create or modify a <code>.loglevel</code> file in the working directory with the desired level (error, warn, info, http, verbose, debug, silly).</p>"},{"location":"compute-unit/setup/#manually-trigger-checkpointing","title":"Manually Trigger Checkpointing","text":"<p>To manually trigger checkpointing for all processes in memory:</p> <ol> <li>Obtain the process ID of the CU: <code>pgrep node</code> or <code>lsof -i :6363</code></li> <li>Send a SIGUSR2 signal: <code>kill -USR2 &lt;process_id&gt;</code></li> </ol> <p>This will cause the CU to checkpoint all processes in its in-memory cache.</p>"},{"location":"compute-unit/setup/#next-steps","title":"Next Steps","text":"<p>After setting up the Compute Unit, see the Configuration page for more detailed configuration options and the API Reference for information on interacting with the CU.</p>"},{"location":"contribute/guidelines/","title":"Contribution Guidelines","text":"<p>Thank you for your interest in contributing to HyperBEAM! This page outlines the process for contributing to the project and provides guidelines to ensure your contributions align with the project's goals and standards.</p>"},{"location":"contribute/guidelines/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. We expect all contributors to be respectful, inclusive, and considerate in all interactions.</p>"},{"location":"contribute/guidelines/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are many ways to contribute to HyperBEAM:</p> <ul> <li>Code contributions: Implementing new features or fixing bugs</li> <li>Documentation: Improving or adding to the documentation</li> <li>Testing: Writing tests or manually testing functionality</li> <li>Bug reports: Reporting issues you encounter</li> <li>Feature requests: Suggesting new features or improvements</li> <li>Community support: Helping other users in forums or discussions</li> </ul>"},{"location":"contribute/guidelines/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository: Create your own fork of the HyperBEAM repository.</li> <li>Set up your development environment: Follow the setup instructions in the Development Setup guide.</li> <li>Find an issue to work on: Look for issues labeled \"good first issue\" or \"help wanted\" in the GitHub issue tracker.</li> <li>Create a branch: Create a new branch for your work with a descriptive name.</li> </ol>"},{"location":"contribute/guidelines/#development-workflow","title":"Development Workflow","text":""},{"location":"contribute/guidelines/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes: Implement your feature or fix the bug.</li> <li>Follow coding standards: Ensure your code follows the project's coding standards.</li> <li>Write tests: Add tests for your changes to ensure functionality and prevent regressions.</li> <li>Update documentation: Update or add documentation to reflect your changes.</li> </ol>"},{"location":"contribute/guidelines/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Commit your changes: Use clear and descriptive commit messages.</li> <li>Push to your fork: Push your changes to your GitHub fork.</li> <li>Create a pull request: Submit a pull request from your fork to the main repository.</li> <li>Describe your changes: In the pull request, describe what you've changed and why.</li> <li>Link related issues: Link any related issues in your pull request description.</li> </ol>"},{"location":"contribute/guidelines/#code-review-process","title":"Code Review Process","text":"<ol> <li>Initial review: A maintainer will review your pull request for basic compliance.</li> <li>Feedback: You may receive feedback requesting changes or clarification.</li> <li>Iteration: Make requested changes and push them to your branch.</li> <li>Approval: Once approved, a maintainer will merge your changes.</li> </ol>"},{"location":"contribute/guidelines/#coding-standards","title":"Coding Standards","text":""},{"location":"contribute/guidelines/#erlang-code","title":"Erlang Code","text":"<ul> <li>Follow the Erlang Coding Standards</li> <li>Use meaningful variable and function names</li> <li>Document public functions with EdDoc comments</li> <li>Keep functions small and focused on a single task</li> <li>Use pattern matching effectively</li> <li>Write comprehensive unit tests</li> </ul>"},{"location":"contribute/guidelines/#javascriptnodejs-code","title":"JavaScript/Node.js Code","text":"<ul> <li>Follow the Airbnb JavaScript Style Guide</li> <li>Use async/await for asynchronous operations</li> <li>Document functions with JSDoc comments</li> <li>Use meaningful variable and function names</li> <li>Write unit tests for all functionality</li> </ul>"},{"location":"contribute/guidelines/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Keep commits focused on a single change</li> <li>Write clear commit messages that explain why a change was made</li> <li>Avoid large, monolithic pull requests</li> <li>Add comments for complex logic</li> <li>Prioritize readability and maintainability</li> </ul>"},{"location":"contribute/guidelines/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Use Markdown for all documentation</li> <li>Follow a consistent structure and style</li> <li>Include examples where appropriate</li> <li>Update documentation when changing functionality</li> <li>Ensure links work correctly</li> <li>Check spelling and grammar</li> </ul>"},{"location":"contribute/guidelines/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write unit tests for all new functionality</li> <li>Ensure tests are deterministic (no flaky tests)</li> <li>Mock external dependencies</li> <li>Consider edge cases in your tests</li> <li>Aim for high test coverage</li> <li>Include integration tests where appropriate</li> </ul>"},{"location":"contribute/guidelines/#reporting-bugs","title":"Reporting Bugs","text":"<p>When reporting bugs, please include:</p> <ol> <li>A clear, descriptive title</li> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Environment details (OS, versions, etc.)</li> <li>Screenshots or logs if applicable</li> </ol>"},{"location":"contribute/guidelines/#requesting-features","title":"Requesting Features","text":"<p>When requesting features, please include:</p> <ol> <li>A clear, descriptive title</li> <li>A detailed description of the feature</li> <li>The problem it solves or benefit it provides</li> <li>Any alternative solutions you've considered</li> <li>Mockups or examples if applicable</li> </ol>"},{"location":"contribute/guidelines/#pull-request-template","title":"Pull Request Template","text":"<p>When creating a pull request, please use the following template:</p> <pre><code>## Description\n[Describe the changes you've made]\n\n## Related Issue\n[Link to the related issue]\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code refactoring\n- [ ] Other (please describe)\n\n## Checklist\n- [ ] I have read the contribution guidelines\n- [ ] My code follows the project's coding standards\n- [ ] I have added tests that prove my fix/feature works\n- [ ] I have updated documentation to reflect my changes\n- [ ] All new and existing tests pass\n</code></pre>"},{"location":"contribute/guidelines/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>Discord: For general discussion and questions</li> <li>Pull Requests: For code review and discussion of implementations</li> </ul> <p>Thank you for contributing to HyperBEAM! </p>"},{"location":"contribute/setup/","title":"Development Setup","text":"<p>This guide will help you set up your development environment for contributing to HyperBEAM.</p>"},{"location":"contribute/setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Ubuntu 22.04 (primary development platform)</li> <li>Git</li> <li>Erlang/OTP 27</li> <li>Rebar3</li> <li>Rust (for certain components)</li> <li>A code editor (Cursor, VSCode, Emacs, Vim, etc.)</li> </ul>"},{"location":"contribute/setup/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"contribute/setup/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<p>First, fork the HyperBEAM repository on GitHub, then clone your fork:</p> <pre><code>git clone https://github.com/YOUR-USERNAME/HyperBEAM.git\ncd HyperBEAM\n</code></pre>"},{"location":"contribute/setup/#2-add-the-upstream-remote","title":"2. Add the Upstream Remote","text":"<p>Add the original repository as an upstream remote to keep your fork in sync:</p> <pre><code>git remote add upstream https://github.com/permaweb/HyperBEAM.git\n</code></pre>"},{"location":"contribute/setup/#3-install-dependencies","title":"3. Install Dependencies","text":""},{"location":"contribute/setup/#hyperbeam-core-erlang-dependencies","title":"HyperBEAM Core (Erlang) Dependencies","text":"<pre><code># Install Erlang dependencies\nrebar3 compile\n</code></pre>"},{"location":"contribute/setup/#4-run-tests","title":"4. Run Tests","text":"<p>Verify that your setup is working correctly by running the tests:</p> <pre><code># Run Erlang tests\nrebar3 eunit\n</code></pre>"},{"location":"contribute/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"contribute/setup/#1-keep-your-fork-updated","title":"1. Keep Your Fork Updated","text":"<p>Regularly sync your fork with the upstream repository:</p> <pre><code>git fetch upstream\ngit checkout main\ngit merge upstream/main\n</code></pre>"},{"location":"contribute/setup/#2-create-a-feature-branch","title":"2. Create a Feature Branch","text":"<p>Create a branch for each feature or bugfix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <p>or</p> <pre><code>git checkout -b fix/bug-you-are-fixing\n</code></pre>"},{"location":"contribute/setup/#3-development-cycle","title":"3. Development Cycle","text":"<p>The typical development cycle is:</p> <ol> <li>Make changes to the code</li> <li>Write tests for your changes</li> <li>Run the tests to verify your changes</li> <li>Commit your changes</li> <li>Push to your fork</li> <li>Create a pull request</li> </ol>"},{"location":"contribute/setup/#4-running-hyperbeam-locally","title":"4. Running HyperBEAM Locally","text":"<p>To run HyperBEAM for development:</p>"},{"location":"contribute/setup/#start-hyperbeam","title":"Start HyperBEAM","text":"<pre><code>rebar3 shell\n</code></pre> <p>In the Erlang shell:</p> <pre><code>application:ensure_all_started(hyperbeam).\n</code></pre>"},{"location":"contribute/setup/#5-debugging","title":"5. Debugging","text":""},{"location":"contribute/setup/#erlang-debugging","title":"Erlang Debugging","text":"<p>You can use the Erlang debugger or add logging:</p> <pre><code>?event({debug, Variable}).\n% or for more context:\n?event(module_name, {debug_label, Variable}).\n% for more detailed output with explicit information:\n?event(module_name, {debug_label, {explicit, Variable}}).\n</code></pre> <p>To filter logs for specific modules or files, you can prefix the rebar3 shell command with the <code>HB_PRINT</code> environment variable, providing a comma-separated list of module or file names:</p> <pre><code>HB_PRINT=module_name1,module_name2,filename1 rebar3 shell\n</code></pre> <p>This will show debug logs only from the specified modules or files, making it easier to focus on relevant information during development and troubleshooting.</p>"},{"location":"contribute/setup/#code-editor-setup","title":"Code Editor Setup","text":""},{"location":"contribute/setup/#vs-code","title":"VS Code","text":"<p>We recommend the following extensions for VS Code:</p> <ul> <li>Erlang LS</li> <li>erlang</li> <li>Erlang/OTP</li> </ul>"},{"location":"contribute/setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"contribute/setup/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues:</p> <pre><code>sudo chown -R $(whoami) .\n</code></pre>"},{"location":"contribute/setup/#getting-help","title":"Getting Help","text":"<p>If you need help with your development setup:</p> <ul> <li>Check existing issues on GitHub</li> <li>Ask for help in the Discord channel</li> <li>Create a new issue with the \"question\" label</li> </ul>"},{"location":"contribute/setup/#next-steps","title":"Next Steps","text":"<p>Once your development environment is set up, check out the Contribution Guidelines for information on how to submit your changes. </p>"},{"location":"getting-started/","title":"Getting Started with HyperBEAM","text":"<p>This section will guide you through the process of preparing your machine with the nessary dependencies in order to install and run HyperBEAM and the Compute Unit.</p>"},{"location":"getting-started/#installation-process-overview","title":"Installation Process Overview","text":"<p>Setting up HyperBEAM involves several steps:</p> <ol> <li>Check System Requirements - Ensure your hardware and operating system meet the minimum requirements</li> <li>Install Dependencies - Set up the necessary system packages and dependencies</li> <li>Setup HyperBEAM - Clone, Compile, Configure, and Run the HyperBEAM</li> <li>SetUp the Compute Unit - Clone, Compile, Configure, and Run the Local Compute Unit</li> </ol>"},{"location":"getting-started/#before-you-begin","title":"Before You Begin","text":"<p>Before starting the installation process, make sure to:</p> <ul> <li>Have access to a terminal/command line with administrative privileges</li> <li>Have a stable internet connection for downloading packages</li> <li>Allocate sufficient time (approximately 30-60 minutes for a complete setup)</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you're ready to get started:</p> <ol> <li>First, check the System Requirements to ensure your system is compatible</li> <li>Then, follow the Installation Guide to set up all required components </li> </ol>"},{"location":"getting-started/requirements/","title":"System Requirements","text":"<p>Before installing HyperBEAM, ensure your system meets these minimum requirements:</p>"},{"location":"getting-started/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>CPU: 4+ cores recommended</li> <li>RAM: 8GB minimum, 16GB recommended</li> <li>Disk: 10GB free space minimum</li> </ul>"},{"location":"getting-started/requirements/#operating-system","title":"Operating System","text":"<p>HyperBEAM currently supports:</p> <ul> <li>Ubuntu 22.04 LTS (recommended)</li> </ul> <p>MacOS Support</p> <p>Support for other operating systems including macOS will be added in future releases.</p>"},{"location":"getting-started/requirements/#network","title":"Network","text":"<ul> <li>Stable internet connection</li> <li>Ability to open and forward ports (if you plan to run a public node) </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Overview","text":"<p>HyperBEAM requires several dependencies to be installed on your system. This guide will walk you through the installation process for each component.</p>"},{"location":"getting-started/installation/#installation-order","title":"Installation Order","text":"<p>For the best experience, we recommend installing prerequisites in this order:</p> <ol> <li>System dependencies (build tools, libraries)</li> <li>Erlang/OTP (programming language for HyperBEAM)</li> <li>Rebar3 (Erlang build tool)</li> <li>Node.js (required for the Compute Unit)</li> <li>Rust (required for the dev_snp_nif)</li> </ol>"},{"location":"getting-started/installation/#component-guides","title":"Component Guides","text":"<p>Follow these guides in sequence to set up your environment:</p> <ol> <li>System Dependencies - Basic system packages</li> <li>Erlang Installation - Programming language for HyperBEAM</li> <li>Rebar3 Installation - Build tool for Erlang</li> <li>Node.js Installation - Required for the Compute Unit</li> <li>Rust Installation - Required for the dev_snp_nif</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installing all the dependencies, you can proceed to:</p> <ul> <li>HyperBEAM Setup</li> <li>Compute Unit Setup </li> </ul>"},{"location":"getting-started/installation/dependencies/","title":"Software Dependencies","text":"<p>HyperBEAM requires several software packages to be installed on your system. This document provides instructions for installing all required dependencies.</p>"},{"location":"getting-started/installation/dependencies/#base-packages","title":"Base Packages","text":"<p>Install all dependencies with the following command:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y --no-install-recommends \\\n    build-essential cmake git pkg-config ncurses-dev \\\n    libssl-dev sudo curl ca-certificates\n</code></pre> <p>The following software packages are required:</p> <ul> <li>build-essential: Contains basic build tools including gcc/g++ compilers</li> <li>cmake: Cross-platform build system</li> <li>git: Version control system</li> <li>pkg-config: Helper tool for compiling applications and libraries</li> <li>ncurses-dev: Development libraries for terminal-based interfaces</li> <li>libssl-dev: Development libraries for SSL (Secure Sockets Layer)</li> <li>sudo: Allows running programs with security privileges of another user</li> <li>curl: Command line tool for transferring data with URL syntax</li> <li>ca-certificates: Common CA certificates for SSL applications</li> </ul>"},{"location":"getting-started/installation/erlang/","title":"Installing Erlang/OTP","text":"<p>HyperBEAM is built on Erlang/OTP, so you'll need to have Erlang installed on your system.</p>"},{"location":"getting-started/installation/erlang/#building-erlang-from-source","title":"Building Erlang from Source","text":"<p>For the best compatibility, we recommend building Erlang from source:</p> <pre><code>git clone https://github.com/erlang/otp.git &amp;&amp; \\\n    cd otp &amp;&amp; git checkout maint-27 &amp;&amp; \\\n    ./configure --without-wx --without-debugger --without-observer --without-et &amp;&amp; \\\n    make -j$(nproc) &amp;&amp; \\\n    sudo make install &amp;&amp; \\\n    cd .. &amp;&amp; rm -rf otp\n</code></pre> <p>This will:</p> <ol> <li>Clone the Erlang/OTP repository</li> <li>Checkout the maintenance branch for version 27</li> <li>Configure the build to exclude GUI components (reducing dependencies)</li> <li>Build Erlang using all available CPU cores</li> <li>Install Erlang system-wide</li> <li>Clean up the source directory</li> </ol>"},{"location":"getting-started/installation/erlang/#verify-installation","title":"Verify Installation","text":"<p>You can verify your Erlang installation with:</p> <pre><code>erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'\n</code></pre> <p>This should output <code>27</code> (or higher), indicating the OTP release version. </p>"},{"location":"getting-started/installation/nodejs/","title":"Installing Node.js","text":"<p>Node.js is required for running the local Compute Unit (CU). This guide covers installing Node.js on Ubuntu 22.04.</p>"},{"location":"getting-started/installation/nodejs/#installing-nodejs-22x","title":"Installing Node.js 22.x","text":"<p>We recommend using Node.js version 22.x for optimal compatibility with the CU:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - &amp;&amp; \\\nsudo apt-get install -y nodejs\n</code></pre>"},{"location":"getting-started/installation/nodejs/#verify-installation","title":"Verify Installation","text":"<p>Verify that Node.js and npm are installed correctly:</p> <pre><code>node -v\nnpm -v\n</code></pre> <p>These commands should display the installed versions of Node.js and npm respectively.</p>"},{"location":"getting-started/installation/rebar3/","title":"Installing Rebar3","text":"<p>Rebar3 is the Erlang build tool used by HyperBEAM for compilation and dependency management.</p>"},{"location":"getting-started/installation/rebar3/#building-rebar3-from-source","title":"Building Rebar3 from Source","text":"<p>To install Rebar3:</p> <pre><code>git clone https://github.com/erlang/rebar3.git &amp;&amp; cd rebar3 \\\n    ./bootstrap &amp;&amp; \\\n    sudo mv rebar3 /usr/local/bin/ &amp;&amp; \\\n    cd .. &amp;&amp; rm -rf rebar3\n</code></pre> <p>This will:</p> <ol> <li>Clone the Rebar3 repository</li> <li>Bootstrap Rebar3 (build it)</li> <li>Move the executable to your system path</li> <li>Clean up the source directory</li> </ol>"},{"location":"getting-started/installation/rebar3/#verify-installation","title":"Verify Installation","text":"<p>You can verify your Rebar3 installation with:</p> <pre><code>rebar3 --version\n</code></pre> <p>This should display the version information for Rebar3.</p> <p>Example output: <code>rebar 3.24.0+build.5437.ref5495da14 on Erlang/OTP 27 Erts 15.2</code>. </p>"},{"location":"getting-started/installation/rust/","title":"Installing Rust and Cargo","text":"<p>Rust is required for certain components in the HyperBEAM ecosystem.</p>"},{"location":"getting-started/installation/rust/#installing-rust","title":"Installing Rust","text":"<p>Install Rust using rustup:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable\n</code></pre>"},{"location":"getting-started/installation/rust/#load-rust-environment","title":"Load Rust Environment","text":"<p>After installation, you'll need to load the Rust environment in your current shell:</p> <pre><code>source \"$HOME/.cargo/env\"\n</code></pre> <p>To make this permanent, add this line to your shell profile (~/.bashrc, ~/.zshrc, etc.).</p>"},{"location":"getting-started/installation/rust/#verify-installation","title":"Verify Installation","text":"<p>Verify that Rust and Cargo are installed correctly:</p> <pre><code>rustc --version\ncargo --version\n</code></pre> <p>These commands should display the installed versions of the Rust compiler and Cargo package manager. </p>"},{"location":"guides/","title":"Guides Overview","text":"<p>This section provides practical guides and tutorials for working with HyperBEAM and the Compute Unit. Whether you're just getting started or looking to build more advanced applications, these guides will help you get the most out of the platform.</p> <p>Warning</p> <p>These guides are currently a work in progress. More detailed tutorials and examples will be added soon.</p>"},{"location":"hyperbeam/","title":"HyperBEAM Overview","text":"<p>HyperBEAM is a client implementation of the AO-Core protocol, written in Erlang. It serves as the 'node' software for the decentralized operating system that AO enables, abstracting hardware provisioning and details from the execution of individual programs.</p> <p>HyperBEAM node operators can offer the services of their machine to others inside the network by electing to execute any number of different devices, charging users for their computation as necessary.</p>"},{"location":"hyperbeam/#key-features","title":"Key Features","text":"<ul> <li>Decentralized Execution: Run AO processes in a decentralized manner</li> <li>Message Passing: Communicate between processes via asynchronous message passing</li> <li>Scalable Architecture: Built on Erlang's powerful concurrency model</li> <li>Extensible Design: Easy to add new devices and capabilities</li> </ul>"},{"location":"hyperbeam/#messages-in-hyperbeam","title":"Messages in HyperBEAM","text":"<p>HyperBEAM describes every piece of data as a message, which can be interpreted as a binary term or as a collection of named functions (a Map of functions).</p> <p>Key properties of messages: - Every message may specify a device which is interpreted by the AO-Core compatible system - Executing a named function within a message results in another message - Messages in AO-Core always beget further messages, giving rise to a vast computational space - Keys may be lazily evaluated, allowing for efficient computation - If a message does not explicitly specify a device, its implied device is a <code>message@1.0</code></p>"},{"location":"hyperbeam/#devices","title":"Devices","text":"<p>HyperBEAM supports numerous devices, each enabling different services. There are approximately 25 different devices included in the preloaded_devices of a HyperBEAM node.</p>"},{"location":"hyperbeam/#key-preloaded-devices","title":"Key Preloaded Devices","text":"<ul> <li>~meta@1.0: Used to configure the node's hardware, supported devices, metering and payments information</li> <li>~relay@1.0: Used to relay messages between nodes and the wider HTTP network</li> <li>~wasm64@1.0: Used to execute WebAssembly code via WAMR</li> <li>~json-iface@1.0: Provides translation between JSON-encoded and HTTP message formats</li> <li>~compute-lite@1.0: A lightweight WASM executor wrapper for legacy AO processes</li> <li>~snp@1.0: Used for Trusted Execution Environment (TEE) operations</li> <li>p4@1.0: Framework for node operators to sell usage of their hardware</li> <li>~simple-pay@1.0: Simple pricing device for flat-fee execution</li> <li>~process@1.0: Enables persistent, shared executions accessible by multiple users</li> <li>scheduler@1.0: Assigns linear hashpaths to executions for deterministic ordering</li> <li>stack@1.0: Executes an ordered set of devices over the same inputs</li> </ul>"},{"location":"hyperbeam/#components","title":"Components","text":"<p>HyperBEAM consists of several core components:</p> <ol> <li>Core Runtime: The base system that manages process execution</li> <li>Device Registry: System for registering and managing devices</li> <li>Message Router: Handles message passing between processes and devices</li> <li>API Layer: HTTP interfaces for interacting with the system</li> </ol>"},{"location":"hyperbeam/#system-architecture","title":"System Architecture","text":"<p>HyperBEAM works in conjunction with the Compute Unit (CU), which handles the actual WASM execution. Together, they form a complete execution environment for AO processes.</p> <p>Each HyperBEAM node is configured using the <code>~meta@1.0</code> device, which provides an interface for specifying the node's supported devices, metering and payments information, amongst other configuration options.</p>"},{"location":"hyperbeam/#next-steps","title":"Next Steps","text":"<ul> <li>Setup HyperBEAM: Instructions for installing and running HyperBEAM</li> <li>Configuration: How to configure your HyperBEAM installation</li> <li>Testing: Run tests to verify your installation </li> </ul>"},{"location":"hyperbeam/configuration/","title":"HyperBEAM Configuration","text":"<p>HyperBEAM can be configured using a variety of methods and options. This document provides an overview of the configuration system and links to specialized configuration topics.</p>"},{"location":"hyperbeam/configuration/#configuration-system-overview","title":"Configuration System Overview","text":"<p>HyperBEAM is a highly configurable node runtime for decentralized applications. Its configuration system allows operators to:</p> <ul> <li>Define connection parameters</li> <li>Set up storage backends</li> <li>Configure routing rules</li> <li>Control execution behavior</li> <li>Optimize performance characteristics</li> <li>Enable debugging features</li> </ul>"},{"location":"hyperbeam/configuration/#configuration-documentation-sections","title":"Configuration Documentation Sections","text":"<p>For detailed information about specific aspects of HyperBEAM configuration, please refer to the following documentation:</p> <ul> <li>Configuration Methods - Different ways to configure HyperBEAM</li> <li>Configuration Options - Complete reference of all configuration options</li> <li>Storage Configuration - Setting up file systems, RocksDB, and other storage backends</li> <li>Routing Configuration - Configuring request routing and connectivity</li> <li>Configuration Examples - Common deployment scenarios and sample configurations</li> <li>Configuration Troubleshooting - Solving common configuration issues</li> </ul>"},{"location":"hyperbeam/configuration/#getting-started","title":"Getting Started","text":"<p>If you're new to HyperBEAM, we recommend starting with a basic configuration file:</p> <ol> <li>Create a file named <code>config.flat</code> in your project directory</li> <li>Add basic configuration:    <pre><code>port: 10000\npriv-key-location: /path/to/wallet.key\nmode: debug\n</code></pre></li> <li>Start HyperBEAM with <code>rebar3 shell</code></li> </ol> <p>HyperBEAM will automatically load your configuration and display the active settings in the startup log.</p>"},{"location":"hyperbeam/configuration/#core-configuration-priorities","title":"Core Configuration Priorities","text":"<p>When multiple configuration methods are used simultaneously, HyperBEAM follows this precedence order:</p> <ol> <li>Environment variables (highest precedence)</li> <li>Runtime configuration via HTTP</li> <li>Command line arguments </li> <li>Configuration file</li> <li>Default values (lowest precedence)</li> </ol> <p>See Configuration Methods for more details on these approaches.</p>"},{"location":"hyperbeam/configuration/#configuration-resources","title":"Configuration Resources","text":"<ul> <li>HyperBEAM GitHub Repository</li> <li>Quick Start Guide</li> <li>API Reference</li> </ul>"},{"location":"hyperbeam/setup/","title":"HyperBEAM Repository Setup","text":"<p>This guide provides step-by-step instructions for setting up and testing HyperBEAM.</p> <p>TEE-based Computation</p> <p>If you intend to offer TEE-based computation of AO-Core devices, please see the HyperBEAM OS repository for details on configuration and deployment. Additional documentation on TEE setup and configuration will be added here in future updates.</p>"},{"location":"hyperbeam/setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>The Erlang runtime (OTP 27)</li> <li>Rebar3</li> <li>Git</li> </ul>"},{"location":"hyperbeam/setup/#1-clone-the-hyperbeam-repository","title":"1. Clone the HyperBEAM Repository","text":"<p>First, clone the <code>permaweb/HyperBEAM</code> repository from GitHub:</p> <pre><code>git clone https://github.com/permaweb/HyperBEAM\n</code></pre> <p>Navigate to the project directory:</p> <pre><code>cd HyperBEAM\n</code></pre>"},{"location":"hyperbeam/setup/#2-compile-the-code-with-rebar3","title":"2. Compile the Code with Rebar3","text":"<p>To compile the HyperBEAM code, you'll need to use Rebar3. Run the following command to compile the project:</p> <pre><code>rebar3 compile\n</code></pre> <p>This will compile the necessary code to get HyperBEAM up and running.</p>"},{"location":"hyperbeam/setup/#3-run-hyperbeam-with-shell","title":"3. Run HyperBEAM with Shell","text":"<p>Once the code is compiled, you can start the HyperBEAM shell with Rebar3:</p> <pre><code>rebar3 shell\n</code></pre> <p>This will start HyperBEAM using the default configuration inside the hb_opts.erl, which preloads all devices and sets up default stores. All of these can be configured using the config.flat file with any overrides you specify.</p> <p>To verify that your HyperBEAM node is running correctly, you can check:</p> <p><pre><code>curl http://localhost:10000/~meta@1.0/info\n</code></pre> If you receive a response with node information, your HyperBEAM installation is working properly.</p>"},{"location":"hyperbeam/setup/#4-run-hyperbeam-with-mainnet","title":"4. Run HyperBEAM with Mainnet","text":"<p>To start HyperBEAM connected to the mainnet, you can use the <code>--eval</code> option with rebar3:</p> <pre><code>rebar3 shell --eval \"hb:start_mainnet(#{ port =&gt; 10001, priv_key_location =&gt; &lt;&lt;\\\"./wallet.json\\\"&gt;&gt;}).\"\n</code></pre> <p>To verify that your HyperBEAM node is running correctly, you can check:</p> <pre><code>curl http://localhost:10001/~meta@1.0/info\n</code></pre> <p>If you receive a response with node information, your HyperBEAM installation is working properly.</p>"},{"location":"hyperbeam/setup/#next-steps","title":"Next Steps","text":"<p>After setting up HyperBEAM, you should:</p> <ol> <li>Configure your installation to match your requirements</li> <li>Run tests to verify everything is working correctly</li> <li>Connect to the Compute Unit to complete your setup</li> </ol>"},{"location":"hyperbeam/testing/","title":"Testing HyperBEAM","text":"<p>This guide covers how to test your HyperBEAM installation to ensure it's working correctly.</p>"},{"location":"hyperbeam/testing/#unit-tests","title":"Unit Tests","text":"<p>HyperBEAM comes with a suite of unit tests that can be run to verify the installation and functionality.</p>"},{"location":"hyperbeam/testing/#running-all-tests","title":"Running All Tests","text":"<p>To run all unit tests for HyperBEAM, use the following Rebar3 command:</p> <pre><code>rebar3 eunit\n</code></pre> <p>This will execute the EUnit tests and provide the results in your terminal.</p>"},{"location":"hyperbeam/testing/#running-tests-for-a-specific-module","title":"Running Tests for a Specific Module","text":"<p>To run tests for a specific module, use the following command:</p> <pre><code>rebar3 eunit --module dev_meta\n</code></pre> <p>This will run the tests for the <code>dev_meta</code> module.</p>"},{"location":"hyperbeam/testing/#running-a-specific-test-in-a-module","title":"Running a Specific Test in a Module","text":"<p>To run a specific test within a module, use the <code>--test</code> flag with the module name and test function.  For example, to run the <code>config_test</code> in the <code>dev_meta</code> module:</p> <pre><code>rebar3 eunit --test dev_meta:config_test\n</code></pre>"},{"location":"hyperbeam/testing/#troubleshooting-failed-tests","title":"Troubleshooting Failed Tests","text":"<p>If tests fail, check the following:</p> <ol> <li>Ensure all dependencies are installed correctly</li> <li>Verify that HyperBEAM is properly configured</li> <li>Look for error messages in the test output</li> <li>Examine the HyperBEAM logs for more details</li> </ol>"},{"location":"hyperbeam/testing/#common-issues","title":"Common Issues","text":"<ul> <li>Connection refused: Ensure HyperBEAM is running on the expected port</li> <li>Authentication errors: Check your wallet configuration</li> <li>Device not found: Verify the device is included in your HyperBEAM configuration</li> </ul> <p>For specific error messages, refer to the Troubleshooting Guide. </p>"},{"location":"hyperbeam/configuration/","title":"HyperBEAM Configuration","text":"<p>HyperBEAM can be configured using a variety of methods and options. This document provides an overview of the configuration system and links to specialized configuration topics.</p>"},{"location":"hyperbeam/configuration/#configuration-system-overview","title":"Configuration System Overview","text":"<p>HyperBEAM is a highly configurable node runtime for decentralized applications. Its configuration system allows operators to:</p> <ul> <li>Define connection parameters</li> <li>Set up storage backends</li> <li>Configure routing rules</li> <li>Control execution behavior</li> <li>Optimize performance characteristics</li> <li>Enable debugging features</li> </ul>"},{"location":"hyperbeam/configuration/#configuration-documentation-sections","title":"Configuration Documentation Sections","text":"<p>For detailed information about specific aspects of HyperBEAM configuration, please refer to the following documentation:</p> <ul> <li>Configuration Methods - Different ways to configure HyperBEAM</li> <li>Configuration Options - Complete reference of all configuration options</li> <li>Storage Configuration - Setting up file systems, RocksDB, and other storage backends</li> <li>Routing Configuration - Configuring request routing and connectivity</li> <li>Configuration Examples - Common deployment scenarios and sample configurations</li> </ul>"},{"location":"hyperbeam/configuration/#getting-started","title":"Getting Started","text":"<p>If you're new to HyperBEAM, you can start with a simple configuration file for basic settings:</p> <ol> <li>Create a file named <code>config.flat</code> in your project directory</li> <li>Add only simple configuration values:    <pre><code>port: 10000\npriv_key_location: /path/to/wallet.json\n</code></pre></li> <li>Start HyperBEAM with <code>rebar3 shell</code></li> </ol> <p>HyperBEAM will automatically load your configuration and display the active settings in the startup log.</p>"},{"location":"hyperbeam/configuration/#configuration-file-limitations-important","title":"Configuration File Limitations - IMPORTANT","text":"<p>The flat@1.0 format used by <code>config.flat</code> has critical limitations:</p> <ul> <li>ONLY use simple atom values and binary values </li> <li>DO NOT include maps, lists, or any complex data structures in config.flat</li> <li>Complex configurations in config.flat will either fail to parse or silently fail to apply correctly</li> </ul>"},{"location":"hyperbeam/configuration/#recommended-configuration-approach","title":"Recommended Configuration Approach","text":"<p>For any non-trivial configuration, especially those with complex data types, use the Erlang API directly:</p> <pre><code>rebar3 shell --eval \"hb:start_mainnet(#{ \n  port =&gt; 10001,\n  priv_key_location =&gt; &lt;&lt;\\\"./wallet.json\\\"&gt;&gt;, \n  mode =&gt; debug,\n\n  http_extra_opts =&gt; #{\n    force_message =&gt; true,\n    store =&gt; {hb_store_fs, #{ prefix =&gt; \\\"local-storage\\\" }}\n    cache_control =&gt; [&lt;&lt;\\\"always\\\"&gt;&gt;]\n  }\n}).\"\n</code></pre> <p>This method allows you to use any Erlang data type and structure without limitations and is the recommended approach for production deployments.</p>"},{"location":"hyperbeam/configuration/#core-configuration-priorities","title":"Core Configuration Priorities","text":"<p>When multiple configuration methods are used simultaneously, HyperBEAM follows this precedence order:</p> <ol> <li>Command line arguments (highest priority)</li> <li>Configuration file </li> <li>Environment variables</li> <li>Default values (lowest priority)</li> </ol> <p>See Configuration Methods for more details on these approaches.</p>"},{"location":"hyperbeam/configuration/#configuration-resources","title":"Configuration Resources","text":"<ul> <li>HyperBEAM GitHub Repository</li> <li>Quick Start Guide</li> <li>API Reference </li> </ul>"},{"location":"hyperbeam/configuration/configuration-examples/","title":"HyperBEAM Configuration Examples","text":"<p>This document provides complete, practical configuration examples for common HyperBEAM deployment scenarios. Each example includes explanations and can be used as a starting point for your own configuration.</p>"},{"location":"hyperbeam/configuration/configuration-examples/#basic-development-configuration","title":"Basic Development Configuration","text":"<p>This is a simple configuration for local development with debugging enabled:</p>"},{"location":"hyperbeam/configuration/configuration-examples/#simple-options-in-configflat","title":"Simple Options in config.flat","text":"<p>For basic options, you can use a config.flat file:</p> <pre><code>port: 10000\nmode: debug\npriv_key_location: ./wallet.json\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-examples/#complete-configuration-using-start_mainnet","title":"Complete Configuration Using start_mainnet","text":"<p>For a complete configuration including storage:</p> <pre><code>rebar3 shell --eval \"\n  hb:start_mainnet(#{\n    port =&gt; 10001,\n    mode =&gt; debug,\n    priv_key_location =&gt; &lt;&lt;\\\"./wallet.json\\\"&gt;&gt;,\n\n    http_extra_opts =&gt;\n        #{\n            force_message =&gt; true,\n            store =&gt; [{hb_store_fs, #{ prefix =&gt; \\\"local-cache\\\" }}, {hb_store_gateway, #{}}],\n            cache_control =&gt; [&lt;&lt;\\\"always\\\"&gt;&gt;]\n        }\n  }).\n\"\n</code></pre> <p>Key features:</p> <ul> <li>Development mode enabled</li> <li>Simple file system storage</li> <li>Extensive debugging options</li> <li>Local port 10001</li> </ul> <p>Note</p> <p>More examples to come</p>"},{"location":"hyperbeam/configuration/configuration-methods/","title":"HyperBEAM Configuration Methods","text":"<p>HyperBEAM offers multiple ways to set configuration options, each with different use cases. This document details these methods and explains when to use each one.</p>"},{"location":"hyperbeam/configuration/configuration-methods/#available-configuration-methods","title":"Available Configuration Methods","text":"<p>HyperBEAM can be configured using these methods:</p> <ol> <li>Configuration File - Use a flat@1.0 encoded settings file </li> <li>Command Line Arguments - Pass configuration when starting HyperBEAM (Recommended)</li> <li>Environment Variables - Set options via environment variables</li> </ol> <p>Warning</p> <p>The current flat@1.0 format has limitations in HyperBEAM. For now, it is recommended to use the <code>start_mainnet</code> approach for configuration. We plan to update config.flat in the future to allow for more complex configuration options.</p>"},{"location":"hyperbeam/configuration/configuration-methods/#using-a-configuration-file","title":"Using a Configuration File","text":"<p>The recommended way to configure HyperBEAM is through a flat@1.0 encoded settings file. By default, HyperBEAM looks for a file named <code>config.flat</code> in the current directory.</p>"},{"location":"hyperbeam/configuration/configuration-methods/#basic-syntax","title":"Basic Syntax","text":"<p>The configuration file uses a simple <code>key: value</code> format:</p> <pre><code>port: 10000\ncache_lookup_hueristics: true\npriv_key_location: /path/to/wallet.json\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-methods/#limitations-of-flat10-format","title":"Limitations of flat@1.0 Format","text":"<p>Important: The flat@1.0 format has significant limitations in HyperBEAM:</p> <ul> <li>Values can only be simple atoms (like <code>true</code>, <code>false</code>, <code>./wallet.json</code>)</li> <li>DO NOT include complex data structures (maps, lists, tuples) in the config.flat file.</li> <li>Attempting to use complex data in config.flat may result in parsing errors or silently failing configurations.</li> </ul> <p>For any configurations with complex data types, you must use <code>hb:start_mainnet/1</code> directly instead (see Command Line Arguments section).</p>"},{"location":"hyperbeam/configuration/configuration-methods/#appropriate-values-for-configflat","title":"Appropriate Values for config.flat","text":"<p>In your config.flat file, stick to these types of values:</p> <pre><code>mode: debug\npriv_key_location: /path/to/wallet.key\nport: 10000\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-methods/#complex-data-types-not-for-configflat","title":"Complex Data Types - NOT for config.flat","text":"<p>For complex structures like maps and lists, do not use config.flat. Instead, use the <code>hb:start_mainnet/1</code> approach:</p> <pre><code>rebar3 shell --eval \"\n  hb:start_mainnet(#{\n    port =&gt; 10001,\n    http_extra_opts =&gt; #{\n        force_message =&gt; true,\n        store =&gt; [{hb_store_fs, #{ prefix =&gt; \\\"local-cache\\\" }}, {hb_store_gateway, #{}}],\n        cache_control =&gt; [&lt;&lt;\\\"always\\\"&gt;&gt;]\n    }\n  }).\n\"\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-methods/#loading-configuration-files","title":"Loading Configuration Files","text":"<p>HyperBEAM automatically loads <code>config.flat</code> when starting:</p> <pre><code>rebar3 shell\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-methods/#command-line-arguments","title":"Command Line Arguments","text":"<p>You can pass configuration options directly when starting HyperBEAM:</p> <pre><code>rebar3 shell --eval \"hb:start_mainnet(#{ port =&gt; 10001, priv_key_location =&gt; &lt;&lt;\\\"path/to/wallet.json\\\"&gt;&gt; }).\"\n</code></pre>"},{"location":"hyperbeam/configuration/configuration-methods/#recommended-approach-for-complex-configurations","title":"Recommended Approach for Complex Configurations","text":"<p>Using <code>hb:start_mainnet/1</code> with a map of options is the recommended approach for any non-trivial configuration:</p> <ul> <li>Full Type Support: You can use any Erlang data type directly, not just atoms and binaries.</li> <li>Complex Data Structures: Maps, lists, tuples, and other complex structures work without limitations.</li> <li>Direct Validation: Configuration errors are caught immediately at startup.</li> <li>Runtime Flexibility: Options can be computed or combined with other configurations at runtime.</li> </ul> <p>This approach is recommended for:</p> <ul> <li>Any configurations with maps, lists, or other complex data structures</li> <li>Routing and storage configurations</li> <li>Testing different configurations without editing files</li> <li>Production deployments where reliability is critical</li> </ul>"},{"location":"hyperbeam/configuration/configuration-methods/#environment-variables","title":"Environment Variables","text":"<p>HyperBEAM recognizes these environment variables:</p> Variable Corresponding Option Example <code>HB_PORT</code> <code>port</code> <code>export HB_PORT=9001</code> <code>HB_KEY</code> <code>priv_key_location</code> <code>export HB_KEY=/path/to/wallet.key</code> <code>HB_CONFIG</code> <code>hb_config_location</code> <code>export HB_CONFIG=config.flat</code> <code>HB_STORE</code> <code>store</code> <code>export HB_STORE=/path/to/store</code> <code>HB_MODE</code> <code>mode</code> <code>export HB_MODE=debug</code> <code>HB_PRINT</code> <code>debug_print</code> <code>export HB_PRINT=dev_meta</code>"},{"location":"hyperbeam/configuration/configuration-methods/#configuration-precedence","title":"Configuration Precedence","text":"<p>When multiple configuration methods are used, HyperBEAM follows this precedence order:</p> <ol> <li>Command line arguments (highest priority)</li> <li>Configuration file </li> <li>Environment variables</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"hyperbeam/configuration/configuration-options/","title":"HyperBEAM Configuration Options Reference","text":"<p>This document provides a comprehensive reference of all configuration options available in HyperBEAM, organized by functional category.</p>"},{"location":"hyperbeam/configuration/configuration-options/#core-configuration","title":"Core Configuration","text":"<p>These options control fundamental HyperBEAM behavior.</p> Option Type Default Description <code>port</code> Integer 8734 HTTP API port <code>hb_config_location</code> String \"config.flat\" Path to configuration file <code>priv_key_location</code> String \"hyperbeam-key.json\" Path to operator wallet key file <code>mode</code> Atom debug Execution mode (debug, prod)"},{"location":"hyperbeam/configuration/configuration-options/#server-network-configuration","title":"Server &amp; Network Configuration","text":"<p>These options control networking behavior and HTTP settings.</p> Option Type Default Description <code>host</code> String \"localhost\" Choice of remote node for non-local tasks <code>gateway</code> String \"https://arweave.net\" Default gateway <code>bundler_ans104</code> String \"https://up.arweave.net:443\" Location of ANS-104 bundler <code>protocol</code> Atom http2 Protocol for HTTP requests (http1, http2, http3) <code>http_client</code> Atom gun HTTP client to use (gun, httpc) <code>http_connect_timeout</code> Integer 5000 HTTP connection timeout in milliseconds <code>http_keepalive</code> Integer 120000 HTTP keepalive time in milliseconds <code>http_request_send_timeout</code> Integer 60000 HTTP request send timeout in milliseconds <code>relay_http_client</code> Atom httpc HTTP client for the relay device <code>http_extra_opts</code> Map See below Additional HTTP options"},{"location":"hyperbeam/configuration/configuration-options/#http_extra_opts-subcomponents","title":"http_extra_opts Subcomponents","text":"Subcomponent Type Default Description <code>force_message</code> Boolean true Whether to force a message format <code>store</code> List See Storage Configuration Storage backends and their configurations <code>cache_control</code> List [&lt;&lt;\"always\"&gt;&gt;] Cache control directives for HTTP requests"},{"location":"hyperbeam/configuration/configuration-options/#security-identity","title":"Security &amp; Identity","text":"<p>These options control identity and security settings.</p> Option Type Default Description <code>trusted_device_signers</code> List [] List of device signers the node should trust <code>trusted</code> Map {} Trusted entities <code>scheduler_location_ttl</code> Integer 604800000 TTL for scheduler registration (7 days in ms)"},{"location":"hyperbeam/configuration/configuration-options/#caching-storage","title":"Caching &amp; Storage","text":"<p>These options control caching behavior. For detailed storage configuration, see Storage Configuration.</p> Option Type Default Description <code>cache_lookup_hueristics</code> Boolean false Whether to use caching heuristics or always consult the local data store <code>access_remote_cache_for_client</code> Boolean false Whether to access data from remote caches for client requests <code>store_all_signed</code> Boolean true Whether the node should store all signed messages <code>await_inprogress</code> Atom/Boolean named Whether to await in-progress executions (false, named, true) <code>cache_control</code> List [\"no-cache\", \"no-store\"] Default cache control headers"},{"location":"hyperbeam/configuration/configuration-options/#execution-processing","title":"Execution &amp; Processing","text":"<p>These options control how HyperBEAM executes messages and processes.</p> Option Type Default Description <code>scheduling_mode</code> Atom local_confirmation When to inform recipients about scheduled assignments (aggressive, local_confirmation, remote_confirmation) <code>compute_mode</code> Atom lazy Whether to execute more messages after returning a result (aggressive, lazy) <code>process_workers</code> Boolean true Whether the node should use persistent processes <code>client_error_strategy</code> Atom throw What to do if a client error occurs <code>wasm_allow_aot</code> Boolean false Allow ahead-of-time compilation for WASM"},{"location":"hyperbeam/configuration/configuration-options/#device-management","title":"Device Management","text":"<p>These options control how HyperBEAM manages devices.</p> Option Type Default Description <code>preloaded_devices</code> Map (see code) Devices for the node to use, overriding resolution via ID <code>load_remote_devices</code> Boolean false Whether to load devices from remote signers <code>devices</code> List [] Additional devices to load"},{"location":"hyperbeam/configuration/configuration-options/#routing-connectivity","title":"Routing &amp; Connectivity","text":"<p>See Routing Configuration for detailed information on routing options.</p> Option Type Default Description <code>routes</code> List See Routing docs Routing configuration for different request patterns"},{"location":"hyperbeam/configuration/configuration-options/#debug-development","title":"Debug &amp; Development","text":"<p>These options control debugging and development features.</p> Option Type Default Description <code>debug_print</code> Boolean/List false Debug printing control <code>debug_stack_depth</code> Integer 40 Maximum stack depth for debug printing <code>debug_print_map_line_threshold</code> Integer 30 Maximum lines for map printing <code>debug_print_binary_max</code> Integer 60 Maximum binary size for debug printing <code>debug_print_indent</code> Integer 2 Indentation for debug printing <code>debug_print_trace</code> Atom short Trace mode (short, false) <code>short_trace_len</code> Integer 5 Length of short traces <code>debug_hide_metadata</code> Boolean true Whether to hide metadata in debug output <code>debug_ids</code> Boolean false Whether to print IDs in debug output <code>debug_hide_priv</code> Boolean true Whether to hide private data in debug output <code>stack_print_prefixes</code> List [\"hb\", \"dev\", \"ar\"] Prefixes for stack printing"},{"location":"hyperbeam/configuration/configuration-options/#complete-option-list","title":"Complete Option List","text":"<p>For the most up-to-date list of configuration options, refer to the <code>default_message/0</code> function in the <code>hb_opts</code> module in the HyperBEAM source code. </p>"},{"location":"hyperbeam/configuration/routing-configuration/","title":"HyperBEAM Routing Configuration","text":"<p>This document explains how to configure routing in HyperBEAM.</p>"},{"location":"hyperbeam/configuration/routing-configuration/#routing-system-overview","title":"Routing System Overview","text":"<p>HyperBEAM's routing system directs incoming requests to appropriate destinations based on path patterns. This allows you to route specific request patterns to different servers.</p>"},{"location":"hyperbeam/configuration/routing-configuration/#routes-configuration-structure","title":"Routes Configuration Structure","text":"<p>The <code>routes</code> configuration option accepts a list of route definitions. Each route is a map with the following components:</p> Component Type Description <code>template</code> Binary Path pattern to match against incoming requests <code>node</code> Map Single destination configuration <code>nodes</code> List List of alternative destinations for load balancing"},{"location":"hyperbeam/configuration/routing-configuration/#configuring-routes","title":"Configuring Routes","text":"<p>Due to the complex nature of routing configuration, you must use the <code>hb:start_mainnet/1</code> approach rather than config.flat.</p>"},{"location":"hyperbeam/configuration/routing-configuration/#default-routes-example","title":"Default Routes Example","text":"<p>You can define multiple routes in order of priority:</p> <pre><code>rebar3 shell --eval \"\n  hb:start_mainnet(#{\n    routes =&gt; [\n        #{\n            &lt;&lt;\\\"template\\\"&gt;&gt; =&gt; &lt;&lt;\\\"/result/.*\\\"&gt;&gt;,\n            &lt;&lt;\\\"node\\\"&gt;&gt; =&gt; #{ &lt;&lt;\\\"prefix\\\"&gt;&gt; =&gt; &lt;&lt;\\\"http://localhost:6363\\\"&gt;&gt; }\n        },\n        #{\n            &lt;&lt;\\\"template\\\"&gt;&gt; =&gt; &lt;&lt;\\\"/graphql\\\"&gt;&gt;,\n            &lt;&lt;\\\"nodes\\\"&gt;&gt; =&gt;\n                [\n                    #{\n                        &lt;&lt;\\\"prefix\\\"&gt;&gt; =&gt; &lt;&lt;\\\"https://arweave-search.goldsky.com\\\"&gt;&gt;,\n                        &lt;&lt;\\\"opts\\\"&gt;&gt; =&gt; #{ http_client =&gt; httpc }\n                    },\n                    #{\n                        &lt;&lt;\\\"prefix\\\"&gt;&gt; =&gt; &lt;&lt;\\\"https://arweave.net\\\"&gt;&gt;,\n                        &lt;&lt;\\\"opts\\\"&gt;&gt; =&gt; #{ http_client =&gt; gun }\n                    }\n                ]\n        },\n        #{\n            &lt;&lt;\\\"template\\\"&gt;&gt; =&gt; &lt;&lt;\\\"/raw\\\"&gt;&gt;,\n            &lt;&lt;\\\"node\\\"&gt;&gt; =&gt;\n                #{\n                    &lt;&lt;\\\"prefix\\\"&gt;&gt; =&gt; &lt;&lt;\\\"https://arweave.net\\\"&gt;&gt;,\n                    &lt;&lt;\\\"opts\\\"&gt;&gt; =&gt; #{ http_client =&gt; gun }\n                }\n        }\n    ]\n  }).\n\"\n</code></pre>"},{"location":"hyperbeam/configuration/routing-configuration/#route-order-importance","title":"Route Order Importance","text":"<p>Routes are evaluated in the order they appear in the configuration. When multiple routes could match a request, the first matching route in the list is used. Place more specific routes before general ones.</p>"},{"location":"hyperbeam/configuration/storage-configuration/","title":"HyperBEAM Storage Configuration","text":"<p>This document provides a basic overview of storage configuration in HyperBEAM.</p>"},{"location":"hyperbeam/configuration/storage-configuration/#storage-backend-overview","title":"Storage Backend Overview","text":"<p>HyperBEAM supports multiple storage backends that can be used individually or in combination. When multiple backends are specified, HyperBEAM tries each in sequence until the requested data is found.</p>"},{"location":"hyperbeam/configuration/storage-configuration/#configuring-storage-backends","title":"Configuring Storage Backends","text":"<p>Storage backends are configured through the <code>http_extra_opts.store</code> setting. Due to the complexity of storage configuration, you must use the <code>hb:start_mainnet/1</code> approach rather than config.flat.</p>"},{"location":"hyperbeam/configuration/storage-configuration/#basic-storage-configuration-examples","title":"Basic Storage Configuration Examples","text":""},{"location":"hyperbeam/configuration/storage-configuration/#simple-file-system-storage","title":"Simple File System Storage","text":"<p>The most basic storage configuration uses the file system:</p> <pre><code>rebar3 shell --eval \"\n  hb:start_mainnet(#{\n    http_extra_opts =&gt; #{\n      force_message =&gt; true,\n      store =&gt; {hb_store_fs, #{ prefix =&gt; \\\"local-storage\\\" }}\n      cache_control =&gt; [&lt;&lt;\\\"always\\\"&gt;&gt;]\n    }\n  }).\n\"\n</code></pre> <p>This configuration stores data in a directory named \"local-storage\".</p>"},{"location":"hyperbeam/configuration/storage-configuration/#gateway-fallback-configuration","title":"Gateway Fallback Configuration","text":"<p>To use local storage with a gateway fallback:</p> <pre><code>rebar3 shell --eval \"\n  hb:start_mainnet(#{\n    http_extra_opts =&gt; #{\n      force_message =&gt; true,\n      store =&gt; [{hb_store_fs, #{ prefix =&gt; \\\"mainnet-cache\\\" }}, {hb_store_gateway, #{}}],\n      cache_control =&gt; [&lt;&lt;\\\"always\\\"&gt;&gt;]\n    }\n  }).\n\"\n</code></pre> <p>This configuration first looks for data in the local file system, then falls back to the Arweave gateway if not found locally.</p>"},{"location":"hyperbeam/configuration/storage-configuration/#available-storage-backends","title":"Available Storage Backends","text":"<p>HyperBEAM includes these storage backends:</p> <ol> <li>File System Store (hb_store_fs) - Uses the local file system</li> <li>RocksDB Store (hb_store_rocksdb) - Uses RocksDB for efficient key-value storage</li> <li>Gateway Store (hb_store_gateway) - Reads data from the Arweave gateway</li> <li>Remote Node Store (hb_store_remote_node) - Reads data from another HyperBEAM node</li> </ol>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>This page answers common questions about HyperBEAM, its components, and how to use them effectively.</p>"},{"location":"reference/faq/#general-questions","title":"General Questions","text":""},{"location":"reference/faq/#what-is-hyperbeam","title":"What is HyperBEAM?","text":"<p>HyperBEAM is a client implementation of the AO-Core protocol written in Erlang. It serves as the node software for a decentralized operating system that allows operators to offer computational resources to users in the AO network.</p>"},{"location":"reference/faq/#how-does-hyperbeam-differ-from-other-distributed-systems","title":"How does HyperBEAM differ from other distributed systems?","text":"<p>HyperBEAM focuses on true decentralization with asynchronous message passing between isolated processes. Unlike many distributed systems that rely on central coordination, HyperBEAM nodes can operate independently while still forming a cohesive network. Additionally, its Erlang foundation provides robust fault tolerance and concurrency capabilities.</p>"},{"location":"reference/faq/#what-can-i-build-with-hyperbeam","title":"What can I build with HyperBEAM?","text":"<p>You can build a wide range of applications, including:</p> <ul> <li>Decentralized applications (dApps)</li> <li>Distributed computation systems</li> <li>Peer-to-peer services</li> <li>Resilient microservices</li> <li>IoT device networks</li> <li>Decentralized storage solutions</li> </ul>"},{"location":"reference/faq/#is-hyperbeam-open-source","title":"Is HyperBEAM open source?","text":"<p>Yes, HyperBEAM is open-source software licensed under the MIT License.</p>"},{"location":"reference/faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"reference/faq/#what-are-the-system-requirements-for-running-hyperbeam","title":"What are the system requirements for running HyperBEAM?","text":"<p>Currently, HyperBEAM is primarily tested and documented for Ubuntu 22.04. Support for macOS and other platforms will be added in future updates. For detailed requirements, see the System Requirements page.</p>"},{"location":"reference/faq/#can-i-run-hyperbeam-in-a-container","title":"Can I run HyperBEAM in a container?","text":"<p>While technically possible, running HyperBEAM in Docker containers or other containerization technologies is currently not recommended. The containerization approach may introduce additional complexity and potential performance issues. We recommend running HyperBEAM directly on the host system until container support is more thoroughly tested and optimized.</p>"},{"location":"reference/faq/#how-do-i-update-hyperbeam-to-the-latest-version","title":"How do I update HyperBEAM to the latest version?","text":"<p>To update HyperBEAM:</p> <ol> <li>Pull the latest code from the repository</li> <li>Rebuild the application</li> <li>Restart the HyperBEAM service</li> </ol> <p>Specific update instructions will vary depending on your installation method.</p>"},{"location":"reference/faq/#can-i-run-multiple-hyperbeam-nodes-on-a-single-machine","title":"Can I run multiple HyperBEAM nodes on a single machine?","text":"<p>Yes, you can run multiple HyperBEAM nodes on a single machine, but you'll need to configure them to use different ports and data directories to avoid conflicts. However, this is not recommended for production environments as each node should ideally have a unique IP address to properly participate in the network. Running multiple nodes on a single machine is primarily useful for development and testing purposes.</p>"},{"location":"reference/faq/#architecture-and-components","title":"Architecture and Components","text":""},{"location":"reference/faq/#what-is-the-difference-between-hyperbeam-and-compute-unit","title":"What is the difference between HyperBEAM and Compute Unit?","text":"<ul> <li>HyperBEAM: The Erlang-based node software that handles message routing, process management, and device coordination.</li> <li>Compute Unit (CU): A NodeJS implementation that executes WebAssembly modules and handles computational tasks.</li> </ul> <p>Together, these components form a complete execution environment for AO processes.</p>"},{"location":"reference/faq/#development-and-usage","title":"Development and Usage","text":""},{"location":"reference/faq/#what-programming-languages-can-i-use-with-hyperbeam","title":"What programming languages can I use with HyperBEAM?","text":"<p>You can use any programming language that compiles to WebAssembly (WASM) for creating modules that run on the Compute Unit. This includes languages like:</p> <ul> <li>Lua</li> <li>Rust</li> <li>C/C++</li> <li>And many others with WebAssembly support</li> </ul>"},{"location":"reference/faq/#how-do-i-debug-processes-running-in-hyperbeam","title":"How do I debug processes running in HyperBEAM?","text":"<p>Debugging processes in HyperBEAM can be done through:</p> <ol> <li>Logging messages to the system log</li> <li>Monitoring process state and message flow</li> <li>Inspecting memory usage and performance metrics</li> </ol>"},{"location":"reference/faq/#is-there-a-limit-to-how-many-processes-can-run-on-a-node","title":"Is there a limit to how many processes can run on a node?","text":"<p>The practical limit depends on your hardware resources. Erlang is designed to handle millions of lightweight processes efficiently, but the actual number will be determined by:</p> <ul> <li>Available memory</li> <li>CPU capacity</li> <li>Network bandwidth</li> <li>Storage speed</li> <li>The complexity of your processes</li> </ul>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#what-should-i-do-if-a-node-becomes-unresponsive","title":"What should I do if a node becomes unresponsive?","text":"<p>If a node becomes unresponsive:</p> <ol> <li>Check the node's logs for error messages</li> <li>Verify network connectivity</li> <li>Ensure sufficient system resources</li> <li>Restart the node if necessary</li> <li>Check for configuration issues</li> </ol> <p>For persistent problems, consult the Troubleshooting page.</p>"},{"location":"reference/faq/#where-can-i-get-help-if-i-encounter-issues","title":"Where can I get help if I encounter issues?","text":"<p>If you encounter issues:</p> <ul> <li>Check the Troubleshooting guide</li> <li>Search or ask questions on GitHub Issues</li> <li>Join the community on Discord</li> </ul>"},{"location":"reference/glossary/","title":"Glossary","text":"<p>This glossary provides definitions for terms and concepts used throughout the HyperBEAM documentation.</p>"},{"location":"reference/glossary/#ao-core-protocol","title":"AO-Core Protocol","text":"<p>The underlying protocol that HyperBEAM implements, enabling decentralized computing and communication between nodes. AO-Core provides a framework into which any number of different computational models, encapsulated as primitive devices, can be attached.</p>"},{"location":"reference/glossary/#asynchronous-message-passing","title":"Asynchronous Message Passing","text":"<p>A communication paradigm where senders don't wait for receivers to be ready, allowing for non-blocking operations and better scalability.</p>"},{"location":"reference/glossary/#checkpoint","title":"Checkpoint","text":"<p>A saved state of a process that can be used to resume execution from a known point, used for persistence and recovery.</p>"},{"location":"reference/glossary/#compute-unit-cu","title":"Compute Unit (CU)","text":"<p>The NodeJS component of HyperBEAM that executes WebAssembly modules and handles computational tasks.</p>"},{"location":"reference/glossary/#decentralized-execution","title":"Decentralized Execution","text":"<p>The ability to run processes across a distributed network without centralized control or coordination.</p>"},{"location":"reference/glossary/#device","title":"Device","text":"<p>A functional unit in HyperBEAM that provides specific capabilities to the system, such as storage, networking, or computational resources.</p>"},{"location":"reference/glossary/#erlang","title":"Erlang","text":"<p>The programming language used to implement the HyperBEAM core, known for its robustness and support for building distributed, fault-tolerant applications.</p>"},{"location":"reference/glossary/#flat10","title":"flat@1.0","text":"<p>A format used for encoding settings files in HyperBEAM configuration, using HTTP header styling.</p>"},{"location":"reference/glossary/#hashpaths","title":"Hashpaths","text":"<p>A mechanism for referencing locations in a program's state-space prior to execution. These state-space links are represented as Merklized lists of programs inputs and initial states.</p>"},{"location":"reference/glossary/#hyperbeam","title":"HyperBEAM","text":"<p>The Erlang-based node software that handles message routing, process management, and device coordination in the HyperBEAM ecosystem.</p>"},{"location":"reference/glossary/#message","title":"Message","text":"<p>A data structure used for communication between processes in the HyperBEAM system. Messages can be interpreted as a binary term or as a collection of named functions (a Map of functions).</p>"},{"location":"reference/glossary/#module","title":"Module","text":"<p>A unit of code that can be loaded and executed by the Compute Unit, typically in WebAssembly format.</p>"},{"location":"reference/glossary/#node","title":"Node","text":"<p>An instance of HyperBEAM running on a physical or virtual machine that participates in the distributed network.</p>"},{"location":"reference/glossary/#p410","title":"p4@1.0","text":"<p>A device that runs as a pre-processor and post-processor in HyperBEAM, enabling a framework for node operators to sell usage of their machine's hardware to execute AO-Core devices.</p>"},{"location":"reference/glossary/#process","title":"Process","text":"<p>An independent unit of computation in HyperBEAM with its own state and execution context.</p>"},{"location":"reference/glossary/#process-id","title":"Process ID","text":"<p>A unique identifier assigned to a process within the HyperBEAM system.</p>"},{"location":"reference/glossary/#scheduler10","title":"scheduler@1.0","text":"<p>A device used to assign a linear hashpath to an execution, such that all users may access it with a deterministic ordering.</p>"},{"location":"reference/glossary/#compute-lite10","title":"~compute-lite@1.0","text":"<p>A lightweight device wrapping a local WASM executor, used for executing legacynet AO processes inside HyperBEAM.</p>"},{"location":"reference/glossary/#json-iface10","title":"~json-iface@1.0","text":"<p>A device that offers a translation layer between the JSON-encoded message format used by legacy versions and HyperBEAM's native HTTP message format.</p>"},{"location":"reference/glossary/#meta10","title":"~meta@1.0","text":"<p>A device used to configure the node's hardware, supported devices, metering and payments information, amongst other configuration options.</p>"},{"location":"reference/glossary/#process10","title":"~process@1.0","text":"<p>A device that enables users to create persistent, shared executions that can be accessed by any number of users, each of whom may add additional inputs to its hashpath.</p>"},{"location":"reference/glossary/#relay10","title":"~relay@1.0","text":"<p>A device used to relay messages between nodes and the wider HTTP network. It offers an interface for sending and receiving messages using a variety of execution strategies.</p>"},{"location":"reference/glossary/#simple-pay10","title":"~simple-pay@1.0","text":"<p>A simple, flexible pricing device that can be used in conjunction with p4@1.0 to offer flat-fees for the execution of AO-Core messages.</p>"},{"location":"reference/glossary/#snp10","title":"~snp@1.0","text":"<p>A device used to generate and validate proofs that a node is executing inside a Trusted Execution Environment (TEE).</p>"},{"location":"reference/glossary/#wasm6410","title":"~wasm64@1.0","text":"<p>A device used to execute WebAssembly code, using the Web Assembly Micro-Runtime (WAMR) under-the-hood.</p>"},{"location":"reference/glossary/#stack10","title":"stack@1.0","text":"<p>A device used to execute an ordered set of devices over the same inputs, allowing users to create complex combinations of other devices.</p>"},{"location":"reference/glossary/#trusted-execution-environment-tee","title":"Trusted Execution Environment (TEE)","text":"<p>A secure area inside a processor that ensures the confidentiality and integrity of code and data loaded within it. Used in HyperBEAM for trust-minimized computation.</p>"},{"location":"reference/glossary/#webassembly-wasm","title":"WebAssembly (WASM)","text":"<p>A binary instruction format that serves as a portable compilation target for programming languages, enabling deployment on the web and other environments. </p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide addresses common issues you might encounter when working with HyperBEAM and the Compute Unit.</p>"},{"location":"reference/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"reference/troubleshooting/#erlang-installation-fails","title":"Erlang Installation Fails","text":"<p>Symptoms: Errors during Erlang compilation or installation</p> <p>Solutions:</p> <ul> <li>Ensure all required dependencies are installed: <code>sudo apt-get install -y libssl-dev ncurses-dev make cmake gcc g++</code></li> <li>Try configuring with fewer options: <code>./configure --without-wx --without-debugger --without-observer --without-et</code></li> <li>Check disk space, as compilation requires several GB of free space</li> </ul>"},{"location":"reference/troubleshooting/#rebar3-bootstrap-fails","title":"Rebar3 Bootstrap Fails","text":"<p>Symptoms: Errors when running <code>./bootstrap</code> for Rebar3</p> <p>Solutions:</p> <ul> <li>Verify Erlang is correctly installed: <code>erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'</code></li> <li>Ensure you have the latest version of the repository: <code>git fetch &amp;&amp; git reset --hard origin/master</code></li> <li>Try manually downloading a precompiled Rebar3 binary</li> </ul>"},{"location":"reference/troubleshooting/#hyperbeam-issues","title":"HyperBEAM Issues","text":""},{"location":"reference/troubleshooting/#hyperbeam-wont-start","title":"HyperBEAM Won't Start","text":"<p>Symptoms: Errors when running <code>rebar3 shell</code> or the HyperBEAM startup command</p> <p>Solutions:</p> <ul> <li>Check for port conflicts: Another service might be using the configured port</li> <li>Verify the wallet key file exists and is accessible</li> <li>Examine Erlang crash dumps for detailed error information</li> <li>Ensure all required dependencies are installed</li> </ul>"},{"location":"reference/troubleshooting/#hyperbeam-crashes-during-operation","title":"HyperBEAM Crashes During Operation","text":"<p>Symptoms: Unexpected termination of the HyperBEAM process</p> <p>Solutions:</p> <ul> <li>Check system resources (memory, disk space)</li> <li>Examine Erlang crash dumps for details</li> <li>Reduce memory limits if the system is resource-constrained</li> <li>Check for network connectivity issues if connecting to external services</li> </ul>"},{"location":"reference/troubleshooting/#compute-unit-issues","title":"Compute Unit Issues","text":""},{"location":"reference/troubleshooting/#compute-unit-wont-start","title":"Compute Unit Won't Start","text":"<p>Symptoms: Errors when running <code>npm start</code> in the CU directory</p> <p>Solutions:</p> <ul> <li>Verify Node.js is installed correctly: <code>node -v</code></li> <li>Ensure all dependencies are installed: <code>npm i</code></li> <li>Check that the wallet file exists and is correctly formatted</li> <li>Verify the <code>.env</code> file has all required settings</li> </ul>"},{"location":"reference/troubleshooting/#memory-errors-in-compute-unit","title":"Memory Errors in Compute Unit","text":"<p>Symptoms: Out of memory errors or excessive memory usage</p> <p>Solutions:</p> <ul> <li>Adjust the <code>PROCESS_WASM_MEMORY_MAX_LIMIT</code> environment variable</li> <li>Enable garbage collection by setting an appropriate <code>GC_INTERVAL_MS</code></li> <li>Monitor memory usage and adjust limits as needed</li> <li>If on a low-memory system, reduce concurrent process execution</li> </ul>"},{"location":"reference/troubleshooting/#integration-issues","title":"Integration Issues","text":""},{"location":"reference/troubleshooting/#hyperbeam-cant-connect-to-compute-unit","title":"HyperBEAM Can't Connect to Compute Unit","text":"<p>Symptoms: Connection errors in HyperBEAM logs when trying to reach the CU</p> <p>Solutions:</p> <ul> <li>Verify the CU is running: <code>curl http://localhost:6363</code></li> <li>Ensure there are no firewall rules blocking the connection</li> <li>Verify network configuration if components are on different machines</li> </ul>"},{"location":"reference/troubleshooting/#process-execution-fails","title":"Process Execution Fails","text":"<p>Symptoms: Errors when deploying or executing processes</p> <p>Solutions:</p> <ul> <li>Check both HyperBEAM and CU logs for specific error messages</li> <li>Verify that the WASM module is correctly compiled and valid</li> <li>Test with a simple example process to isolate the issue</li> <li>Adjust memory limits if the process requires more resources</li> </ul>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues after trying these troubleshooting steps:</p> <ol> <li>Check the GitHub repository for known issues</li> <li>Join the Discord community for support</li> <li>Open an issue on GitHub with detailed information about your problem </li> </ol>"},{"location":"tee/","title":"Trusted Execution Environment (TEE)","text":"<p>Documentation Coming Soon</p> <p>Detailed documentation about Trusted Execution Environment support in HyperBEAM is currently being developed and will be available soon.</p>"},{"location":"tee/#overview","title":"Overview","text":"<p>HyperBEAM supports Trusted Execution Environments (TEEs) through the <code>~snp@1.0</code> device, which enables secure, trust-minimized computation on remote machines. TEEs provide hardware-level isolation and attestation capabilities that allow users to verify that their code is running in a protected environment, exactly as intended, even on untrusted hardware.</p> <p>The <code>~snp@1.0</code> device in HyperBEAM is used to generate and validate proofs that a node is executing inside a Trusted Execution Environment. Nodes executing inside these environments use an ephemeral key pair that provably only exists inside the TEE, and can sign attestations of AO-Core executions in a trust-minimized way.</p>"},{"location":"tee/#key-features","title":"Key Features","text":"<ul> <li>Hardware-level isolation for secure computation</li> <li>Remote attestation capabilities</li> <li>Protected execution state</li> <li>Confidential computing support</li> <li>Compatibility with AMD SEV-SNP technology</li> </ul>"},{"location":"tee/#coming-soon","title":"Coming Soon","text":"<p>Detailed documentation on the following topics will be added:</p> <ul> <li>TEE setup and configuration</li> <li>Using the <code>~snp@1.0</code> device</li> <li>Verifying TEE attestations</li> <li>Developing for TEEs</li> <li>Security considerations</li> <li>Performance characteristics</li> </ul> <p>If you intend to offer TEE-based computation of AO-Core devices, please see the HyperBEAM OS repository for preliminary details on configuration and deployment. </p>"}]}