searchData={"items":[{"type":"module","title":"ar_bundles","doc":"Module for creating, signing, and verifying Arweave data items and bundles.","ref":"ar_bundles.html"},{"type":"function","title":"ar_bundles.ar_bundles_test_/0","doc":"","ref":"ar_bundles.html#ar_bundles_test_/0"},{"type":"function","title":"ar_bundles.data_item_signature_data/1","doc":"Generate the data segment to be signed for a data item.","ref":"ar_bundles.html#data_item_signature_data/1"},{"type":"function","title":"ar_bundles.decode_tags/1","doc":"Decode tags from a binary format using Apache Avro.","ref":"ar_bundles.html#decode_tags/1"},{"type":"function","title":"ar_bundles.deserialize/1","doc":"Convert binary data back to a #tx record.","ref":"ar_bundles.html#deserialize/1"},{"type":"function","title":"ar_bundles.deserialize/2","doc":"","ref":"ar_bundles.html#deserialize/2"},{"type":"function","title":"ar_bundles.encode_tags/1","doc":"Encode tags into a binary format using Apache Avro.","ref":"ar_bundles.html#encode_tags/1"},{"type":"function","title":"ar_bundles.find/2","doc":"Find an item in a bundle-map/list and return it.","ref":"ar_bundles.html#find/2"},{"type":"function","title":"ar_bundles.format/1","doc":"","ref":"ar_bundles.html#format/1"},{"type":"function","title":"ar_bundles.format/2","doc":"","ref":"ar_bundles.html#format/2"},{"type":"function","title":"ar_bundles.hd/1","doc":"Return the first item in a bundle-map/list.","ref":"ar_bundles.html#hd/1"},{"type":"function","title":"ar_bundles.id/1","doc":"Return the ID of an item -- either signed or unsigned as specified.\n If the item is unsigned and the user requests the signed ID, we return\n the atom `not_signed`. In all other cases, we return the ID of the item.","ref":"ar_bundles.html#id/1"},{"type":"function","title":"ar_bundles.id/2","doc":"","ref":"ar_bundles.html#id/2"},{"type":"function","title":"ar_bundles.is_signed/1","doc":"Check if an item is signed.","ref":"ar_bundles.html#is_signed/1"},{"type":"function","title":"ar_bundles.manifest/1","doc":"","ref":"ar_bundles.html#manifest/1"},{"type":"function","title":"ar_bundles.manifest_item/1","doc":"Return the manifest item in a bundle-map/list.","ref":"ar_bundles.html#manifest_item/1"},{"type":"function","title":"ar_bundles.map/1","doc":"Convert an item containing a map or list into an Erlang map.","ref":"ar_bundles.html#map/1"},{"type":"function","title":"ar_bundles.member/2","doc":"Check if an item exists in a bundle-map/list.","ref":"ar_bundles.html#member/2"},{"type":"function","title":"ar_bundles.new_item/4","doc":"Create a new data item. Should only be used for testing.","ref":"ar_bundles.html#new_item/4"},{"type":"function","title":"ar_bundles.normalize/1","doc":"","ref":"ar_bundles.html#normalize/1"},{"type":"function","title":"ar_bundles.parse_manifest/1","doc":"","ref":"ar_bundles.html#parse_manifest/1"},{"type":"function","title":"ar_bundles.print/1","doc":"","ref":"ar_bundles.html#print/1"},{"type":"function","title":"ar_bundles.reset_ids/1","doc":"Re-calculate both of the IDs for an item. This is a wrapper\".\n function around `update_id/1` that ensures both IDs are set from\n scratch.","ref":"ar_bundles.html#reset_ids/1"},{"type":"function","title":"ar_bundles.run_test/0","doc":"","ref":"ar_bundles.html#run_test/0"},{"type":"function","title":"ar_bundles.serialize/1","doc":"Convert a #tx record to its binary representation.","ref":"ar_bundles.html#serialize/1"},{"type":"function","title":"ar_bundles.serialize/2","doc":"","ref":"ar_bundles.html#serialize/2"},{"type":"function","title":"ar_bundles.sign_item/2","doc":"Sign a data item.","ref":"ar_bundles.html#sign_item/2"},{"type":"function","title":"ar_bundles.signer/1","doc":"Return the address of the signer of an item, if it is signed.","ref":"ar_bundles.html#signer/1"},{"type":"function","title":"ar_bundles.type/1","doc":"","ref":"ar_bundles.html#type/1"},{"type":"function","title":"ar_bundles.verify_item/1","doc":"Verify the validity of a data item.","ref":"ar_bundles.html#verify_item/1"},{"type":"module","title":"ar_deep_hash","doc":null,"ref":"ar_deep_hash.html"},{"type":"function","title":"ar_deep_hash.hash/1","doc":null,"ref":"ar_deep_hash.html#hash/1"},{"type":"module","title":"ar_rate_limiter","doc":"","ref":"ar_rate_limiter.html"},{"type":"function","title":"ar_rate_limiter.handle_call/3","doc":"","ref":"ar_rate_limiter.html#handle_call/3"},{"type":"function","title":"ar_rate_limiter.handle_cast/2","doc":"","ref":"ar_rate_limiter.html#handle_cast/2"},{"type":"function","title":"ar_rate_limiter.handle_info/2","doc":"","ref":"ar_rate_limiter.html#handle_info/2"},{"type":"function","title":"ar_rate_limiter.init/1","doc":"","ref":"ar_rate_limiter.html#init/1"},{"type":"function","title":"ar_rate_limiter.off/0","doc":"Turn rate limiting off.","ref":"ar_rate_limiter.html#off/0"},{"type":"function","title":"ar_rate_limiter.on/0","doc":"Turn rate limiting on.","ref":"ar_rate_limiter.html#on/0"},{"type":"function","title":"ar_rate_limiter.start_link/1","doc":"","ref":"ar_rate_limiter.html#start_link/1"},{"type":"function","title":"ar_rate_limiter.terminate/2","doc":"","ref":"ar_rate_limiter.html#terminate/2"},{"type":"function","title":"ar_rate_limiter.throttle/3","doc":"Hang until it is safe to make another request to the given Peer with the\n given Path. The limits are configured in include/ar_blacklist_middleware.hrl.","ref":"ar_rate_limiter.html#throttle/3"},{"type":"module","title":"ar_timestamp","doc":"","ref":"ar_timestamp.html"},{"type":"function","title":"ar_timestamp.get/0","doc":"Get the current timestamp from the server, starting the server if it\nisn't already running.","ref":"ar_timestamp.html#get/0"},{"type":"function","title":"ar_timestamp.start/0","doc":"Check if the server is already running, and if not, start it.","ref":"ar_timestamp.html#start/0"},{"type":"module","title":"ar_tx","doc":"The module with utilities for transaction creation, signing, and verification.","ref":"ar_tx.html"},{"type":"function","title":"ar_tx.json_struct_to_tx/1","doc":"","ref":"ar_tx.html#json_struct_to_tx/1"},{"type":"function","title":"ar_tx.new/4","doc":"Create a new transaction.","ref":"ar_tx.html#new/4"},{"type":"function","title":"ar_tx.new/5","doc":"","ref":"ar_tx.html#new/5"},{"type":"function","title":"ar_tx.sign/2","doc":"Cryptographically sign (claim ownership of) a transaction.","ref":"ar_tx.html#sign/2"},{"type":"function","title":"ar_tx.tx_to_json_struct/1","doc":"","ref":"ar_tx.html#tx_to_json_struct/1"},{"type":"function","title":"ar_tx.verify/1","doc":"Verify whether a transaction is valid.","ref":"ar_tx.html#verify/1"},{"type":"function","title":"ar_tx.verify_tx_id/2","doc":"Verify the given transaction actually has the given identifier.","ref":"ar_tx.html#verify_tx_id/2"},{"type":"module","title":"ar_wallet","doc":"Utilities for manipulating wallets.","ref":"ar_wallet.html"},{"type":"function","title":"ar_wallet.hmac/1","doc":"","ref":"ar_wallet.html#hmac/1"},{"type":"function","title":"ar_wallet.hmac/2","doc":"","ref":"ar_wallet.html#hmac/2"},{"type":"function","title":"ar_wallet.load_key/1","doc":"Read the keyfile for the key with the given address from disk.\nReturn not_found if arweave_keyfile_[addr].json or [addr].json is not found\nin [data_dir]/?WALLET_DIR.","ref":"ar_wallet.html#load_key/1"},{"type":"function","title":"ar_wallet.load_keyfile/1","doc":"Extract the public and private key from a keyfile.","ref":"ar_wallet.html#load_keyfile/1"},{"type":"function","title":"ar_wallet.new/0","doc":"","ref":"ar_wallet.html#new/0"},{"type":"function","title":"ar_wallet.new/1","doc":"","ref":"ar_wallet.html#new/1"},{"type":"function","title":"ar_wallet.new_keyfile/2","doc":"Generate a new wallet public and private key, with a corresponding keyfile.\nThe provided key is used as part of the file name.","ref":"ar_wallet.html#new_keyfile/2"},{"type":"function","title":"ar_wallet.sign/2","doc":"Sign some data with a private key.","ref":"ar_wallet.html#sign/2"},{"type":"function","title":"ar_wallet.sign/3","doc":"sign some data, hashed using the provided DigestType.\nTODO: support signing for other key types","ref":"ar_wallet.html#sign/3"},{"type":"function","title":"ar_wallet.to_address/1","doc":"Generate an address from a public key.","ref":"ar_wallet.html#to_address/1"},{"type":"function","title":"ar_wallet.to_address/2","doc":"","ref":"ar_wallet.html#to_address/2"},{"type":"function","title":"ar_wallet.verify/3","doc":"Verify that a signature is correct.","ref":"ar_wallet.html#verify/3"},{"type":"function","title":"ar_wallet.verify/4","doc":"","ref":"ar_wallet.html#verify/4"},{"type":"module","title":"dev_cache","doc":"A device that looks up an ID from a local store and returns it,\nhonoring the `accept` key to return the correct format. The cache also\nsupports writing messages to the store, if the node message has the\nwriter's address in its `cache_writers` key.","ref":"dev_cache.html"},{"type":"function","title":"dev_cache.cache_write_binary_test/0","doc":"Ensure that we can write direct binaries to the cache.","ref":"dev_cache.html#cache_write_binary_test/0"},{"type":"function","title":"dev_cache.cache_write_message_test/0","doc":"Test that the cache can be written to and read from using the hb_cache\nAPI.","ref":"dev_cache.html#cache_write_message_test/0"},{"type":"function","title":"dev_cache.link/3","doc":"Link a source to a destination in the cache.","ref":"dev_cache.html#link/3"},{"type":"function","title":"dev_cache.read/3","doc":"Read data from the cache.\n\nRetrieves data corresponding to a key from a local store.\nThe key is extracted from the incoming message under <<\"target>>\".\nThe options map may include store configuration.\nIf the \"accept\" header is set to <<\"application/aos-2>>\", the result is\nconverted to a JSON structure and encoded.\n\n@param M1 Ignored parameter.\n@param M2 The request message containing the key (<<\"target>>\") and an\n           optional \\\"accept\\\" header.\n@param Opts A map of configuration options.\n@returns {ok, Data} on success;\n         not_found if the key does not exist;\n         {error, Reason} on failure.","ref":"dev_cache.html#read/3"},{"type":"function","title":"dev_cache.write/3","doc":"Write data to the cache.\nProcesses a write request by first verifying that the request comes from a\ntrusted writer (as defined by the `cache_writers` configuration in the\noptions). The write type is determined from the message (\"single\" or \"batch\")\nand the data is stored accordingly.\n\n\n@param M1 Ignored parameter.\n@param M2 The request message containing the data to write, the write type,\n           and any additional parameters.\n@param Opts A map of configuration options.\n@returns {ok, Path} on success, where Path indicates where the data was\n         stored, {error, Reason} on failure.","ref":"dev_cache.html#write/3"},{"type":"module","title":"dev_cacheviz","doc":"A device that generates renders (or renderable dot output) of a node's\ncache.","ref":"dev_cacheviz.html"},{"type":"function","title":"dev_cacheviz.dot/3","doc":"Output the dot representation of the cache, or a specific path within\nthe cache set by the `target` key in the request.","ref":"dev_cacheviz.html#dot/3"},{"type":"function","title":"dev_cacheviz.svg/3","doc":"Output the SVG representation of the cache, or a specific path within\nthe cache set by the `target` key in the request.","ref":"dev_cacheviz.html#svg/3"},{"type":"module","title":"dev_codec_ans104","doc":"Codec for managing transformations from `ar_bundles`-style Arweave TX\nrecords to and from TABMs.","ref":"dev_codec_ans104.html"},{"type":"function","title":"dev_codec_ans104.commit/3","doc":"Sign a message using the `priv_wallet` key in the options.","ref":"dev_codec_ans104.html#commit/3"},{"type":"function","title":"dev_codec_ans104.committed/3","doc":"Return a list of committed keys from an ANS-104 message.","ref":"dev_codec_ans104.html#committed/3"},{"type":"function","title":"dev_codec_ans104.content_type/1","doc":"Return the content type for the codec.","ref":"dev_codec_ans104.html#content_type/1"},{"type":"function","title":"dev_codec_ans104.deserialize/1","doc":"Deserialize a binary ans104 message to a TABM.","ref":"dev_codec_ans104.html#deserialize/1"},{"type":"function","title":"dev_codec_ans104.duplicated_tag_name_test/0","doc":"","ref":"dev_codec_ans104.html#duplicated_tag_name_test/0"},{"type":"function","title":"dev_codec_ans104.from/1","doc":"Convert a #tx record into a message map recursively.","ref":"dev_codec_ans104.html#from/1"},{"type":"function","title":"dev_codec_ans104.from_maintains_tag_name_case_test/0","doc":"","ref":"dev_codec_ans104.html#from_maintains_tag_name_case_test/0"},{"type":"function","title":"dev_codec_ans104.id/1","doc":"Return the ID of a message.","ref":"dev_codec_ans104.html#id/1"},{"type":"function","title":"dev_codec_ans104.normal_tags_test/0","doc":"","ref":"dev_codec_ans104.html#normal_tags_test/0"},{"type":"function","title":"dev_codec_ans104.only_committed_maintains_target_test/0","doc":"","ref":"dev_codec_ans104.html#only_committed_maintains_target_test/0"},{"type":"function","title":"dev_codec_ans104.restore_tag_name_case_from_cache_test/0","doc":"","ref":"dev_codec_ans104.html#restore_tag_name_case_from_cache_test/0"},{"type":"function","title":"dev_codec_ans104.serialize/1","doc":"Serialize a message or TX to a binary.","ref":"dev_codec_ans104.html#serialize/1"},{"type":"function","title":"dev_codec_ans104.signed_duplicated_tag_name_test/0","doc":"","ref":"dev_codec_ans104.html#signed_duplicated_tag_name_test/0"},{"type":"function","title":"dev_codec_ans104.simple_to_conversion_test/0","doc":"","ref":"dev_codec_ans104.html#simple_to_conversion_test/0"},{"type":"function","title":"dev_codec_ans104.to/1","doc":"Internal helper to translate a message to its #tx record representation,\nwhich can then be used by ar_bundles to serialize the message. We call the \nmessage's device in order to get the keys that we will be checkpointing. We \ndo this recursively to handle nested messages. The base case is that we hit\na binary, which we return as is.","ref":"dev_codec_ans104.html#to/1"},{"type":"function","title":"dev_codec_ans104.verify/3","doc":"Verify an ANS-104 commitment.","ref":"dev_codec_ans104.html#verify/3"},{"type":"module","title":"dev_codec_flat","doc":"A codec for turning TABMs into/from flat Erlang maps that have \n(potentially multi-layer) paths as their keys, and a normal TABM binary as \ntheir value.","ref":"dev_codec_flat.html"},{"type":"function","title":"dev_codec_flat.binary_passthrough_test/0","doc":"","ref":"dev_codec_flat.html#binary_passthrough_test/0"},{"type":"function","title":"dev_codec_flat.commit/3","doc":"","ref":"dev_codec_flat.html#commit/3"},{"type":"function","title":"dev_codec_flat.committed/3","doc":"","ref":"dev_codec_flat.html#committed/3"},{"type":"function","title":"dev_codec_flat.deep_nesting_test/0","doc":"","ref":"dev_codec_flat.html#deep_nesting_test/0"},{"type":"function","title":"dev_codec_flat.deserialize/1","doc":"","ref":"dev_codec_flat.html#deserialize/1"},{"type":"function","title":"dev_codec_flat.empty_map_test/0","doc":"","ref":"dev_codec_flat.html#empty_map_test/0"},{"type":"function","title":"dev_codec_flat.from/1","doc":"Convert a flat map to a TABM.","ref":"dev_codec_flat.html#from/1"},{"type":"function","title":"dev_codec_flat.multiple_paths_test/0","doc":"","ref":"dev_codec_flat.html#multiple_paths_test/0"},{"type":"function","title":"dev_codec_flat.nested_conversion_test/0","doc":"","ref":"dev_codec_flat.html#nested_conversion_test/0"},{"type":"function","title":"dev_codec_flat.path_list_test/0","doc":"","ref":"dev_codec_flat.html#path_list_test/0"},{"type":"function","title":"dev_codec_flat.serialize/1","doc":"","ref":"dev_codec_flat.html#serialize/1"},{"type":"function","title":"dev_codec_flat.simple_conversion_test/0","doc":"","ref":"dev_codec_flat.html#simple_conversion_test/0"},{"type":"function","title":"dev_codec_flat.to/1","doc":"Convert a TABM to a flat map.","ref":"dev_codec_flat.html#to/1"},{"type":"function","title":"dev_codec_flat.verify/3","doc":"","ref":"dev_codec_flat.html#verify/3"},{"type":"module","title":"dev_codec_httpsig","doc":"This module implements HTTP Message Signatures as described in RFC-9421\n(https://datatracker.ietf.org/doc/html/rfc9421), as an AO-Core device.\nIt implements the codec standard (from/1, to/1), as well as the optional\ncommitment functions (id/3, sign/3, verify/3). The commitment functions\nare found in this module, while the codec functions are relayed to the \n`dev_codec_httpsig_conv` module.","ref":"dev_codec_httpsig.html"},{"type":"function","title":"dev_codec_httpsig.add_content_digest/1","doc":"If the `body` key is present, replace it with a content-digest.","ref":"dev_codec_httpsig.html#add_content_digest/1"},{"type":"function","title":"dev_codec_httpsig.add_derived_specifiers/1","doc":"Normalize key parameters to ensure their names are correct.","ref":"dev_codec_httpsig.html#add_derived_specifiers/1"},{"type":"function","title":"dev_codec_httpsig.commit/3","doc":"Main entrypoint for signing a HTTP Message, using the standardized format.","ref":"dev_codec_httpsig.html#commit/3"},{"type":"function","title":"dev_codec_httpsig.committed/3","doc":"Return the list of committed keys from a message. The message will have\nhad the `commitments` key removed and the signature inputs added to the\nroot. Subsequently, we can parse that to get the list of committed keys.","ref":"dev_codec_httpsig.html#committed/3"},{"type":"function","title":"dev_codec_httpsig.committed_id_test/0","doc":"","ref":"dev_codec_httpsig.html#committed_id_test/0"},{"type":"function","title":"dev_codec_httpsig.derive_component_error_query_param_no_name_test/0","doc":"","ref":"dev_codec_httpsig.html#derive_component_error_query_param_no_name_test/0"},{"type":"function","title":"dev_codec_httpsig.derive_component_error_req_param_on_request_target_test/0","doc":"","ref":"dev_codec_httpsig.html#derive_component_error_req_param_on_request_target_test/0"},{"type":"function","title":"dev_codec_httpsig.derive_component_error_status_req_target_test/0","doc":"","ref":"dev_codec_httpsig.html#derive_component_error_status_req_target_test/0"},{"type":"function","title":"dev_codec_httpsig.from/1","doc":"","ref":"dev_codec_httpsig.html#from/1"},{"type":"function","title":"dev_codec_httpsig.id/3","doc":"","ref":"dev_codec_httpsig.html#id/3"},{"type":"function","title":"dev_codec_httpsig.join_signature_base_test/0","doc":"","ref":"dev_codec_httpsig.html#join_signature_base_test/0"},{"type":"function","title":"dev_codec_httpsig.multicommitted_id_test/0","doc":"","ref":"dev_codec_httpsig.html#multicommitted_id_test/0"},{"type":"function","title":"dev_codec_httpsig.public_keys/1","doc":"","ref":"dev_codec_httpsig.html#public_keys/1"},{"type":"function","title":"dev_codec_httpsig.remove_derived_specifiers/1","doc":"Remove derived specifiers from a list of component identifiers.","ref":"dev_codec_httpsig.html#remove_derived_specifiers/1"},{"type":"function","title":"dev_codec_httpsig.reset_hmac/1","doc":"Ensure that the commitments and hmac are properly encoded","ref":"dev_codec_httpsig.html#reset_hmac/1"},{"type":"function","title":"dev_codec_httpsig.signature_params_line_test/0","doc":"","ref":"dev_codec_httpsig.html#signature_params_line_test/0"},{"type":"function","title":"dev_codec_httpsig.to/1","doc":"","ref":"dev_codec_httpsig.html#to/1"},{"type":"function","title":"dev_codec_httpsig.trim_ws_test/0","doc":"","ref":"dev_codec_httpsig.html#trim_ws_test/0"},{"type":"function","title":"dev_codec_httpsig.validate_large_message_from_http_test/0","doc":"Ensure that we can validate a signature on an extremely large and complex\nmessage that is sent over HTTP, signed with the codec.","ref":"dev_codec_httpsig.html#validate_large_message_from_http_test/0"},{"type":"function","title":"dev_codec_httpsig.verify/3","doc":"Verify different forms of httpsig committed messages. `dev_message:verify`\nalready places the keys from the commitment message into the root of the\nmessage.","ref":"dev_codec_httpsig.html#verify/3"},{"type":"module","title":"dev_codec_httpsig_conv","doc":"A codec for the that marshals TABM encoded messages to and from the\n\"HTTP\" message structure.\n\nEvery HTTP message is an HTTP multipart message.\nSee https://datatracker.ietf.org/doc/html/rfc7578\n\nFor each TABM Key:\n\nThe Key/Value Pair will be encoded according to the following rules:\n    \"signatures\" -> {SignatureInput, Signature} header Tuples, each encoded\n\t\t\t\t\tas a Structured Field Dictionary\n    \"body\" ->\n        - if a map, then recursively encode as its own HyperBEAM message\n        - otherwise encode as a normal field\n    _ -> encode as a normal field\n\nEach field will be mapped to the HTTP Message according to the following \nrules:\n    \"body\" -> always encoded part of the body as with Content-Disposition\n\t\t\t  type of \"inline\"\n    _ ->\n        - If the byte size of the value is less than the ?MAX_TAG_VALUE,\n\t\t  then encode as a header, also attempting to encode as a\n\t\t  structured field.\n        - Otherwise encode the value as a part in the multipart response","ref":"dev_codec_httpsig_conv.html"},{"type":"function","title":"dev_codec_httpsig_conv.from/1","doc":"Convert a HTTP Message into a TABM.\nHTTP Structured Field is encoded into it's equivalent TABM encoding.","ref":"dev_codec_httpsig_conv.html#from/1"},{"type":"function","title":"dev_codec_httpsig_conv.group_maps_flat_compatible_test/0","doc":"The grouped maps encoding is a subset of the flat encoding,\nwhere on keys with maps values are flattened.\n\nSo despite needing a special encoder to produce it\nWe can simply apply the flat encoder to it to get back\nthe original message.\n\nThe test asserts that is indeed the case.","ref":"dev_codec_httpsig_conv.html#group_maps_flat_compatible_test/0"},{"type":"function","title":"dev_codec_httpsig_conv.group_maps_test/0","doc":"","ref":"dev_codec_httpsig_conv.html#group_maps_test/0"},{"type":"function","title":"dev_codec_httpsig_conv.to/1","doc":"Convert a TABM into an HTTP Message. The HTTP Message is a simple Erlang Map\nthat can translated to a given web server Response API","ref":"dev_codec_httpsig_conv.html#to/1"},{"type":"module","title":"dev_codec_json","doc":"A simple JSON codec for HyperBEAM's message format. Takes a\nmessage as TABM and returns an encoded JSON string representation.\nThis codec utilizes the httpsig@1.0 codec for signing and verifying.","ref":"dev_codec_json.html"},{"type":"function","title":"dev_codec_json.commit/3","doc":"","ref":"dev_codec_json.html#commit/3"},{"type":"function","title":"dev_codec_json.committed/1","doc":"","ref":"dev_codec_json.html#committed/1"},{"type":"function","title":"dev_codec_json.content_type/1","doc":"Return the content type for the codec.","ref":"dev_codec_json.html#content_type/1"},{"type":"function","title":"dev_codec_json.deserialize/3","doc":"Deserialize the JSON string found at the given path.","ref":"dev_codec_json.html#deserialize/3"},{"type":"function","title":"dev_codec_json.from/1","doc":"Decode a JSON string to a message.","ref":"dev_codec_json.html#from/1"},{"type":"function","title":"dev_codec_json.serialize/3","doc":"Serialize a message to a JSON string.","ref":"dev_codec_json.html#serialize/3"},{"type":"function","title":"dev_codec_json.to/1","doc":"Encode a message to a JSON string.","ref":"dev_codec_json.html#to/1"},{"type":"function","title":"dev_codec_json.verify/3","doc":"","ref":"dev_codec_json.html#verify/3"},{"type":"module","title":"dev_codec_structured","doc":"A device implementing the codec interface (to/1, from/1) for \nHyperBEAM's internal, richly typed message format.\n\nThis format mirrors HTTP Structured Fields, aside from its limitations of \ncompound type depths, as well as limited floating point representations.\n\nAs with all AO-Core codecs, its target format (the format it expects to \nreceive in the `to/1` function, and give in `from/1`) is TABM.\n\nFor more details, see the HTTP Structured Fields (RFC-9651) specification.","ref":"dev_codec_structured.html"},{"type":"function","title":"dev_codec_structured.commit/3","doc":"","ref":"dev_codec_structured.html#commit/3"},{"type":"function","title":"dev_codec_structured.committed/3","doc":"","ref":"dev_codec_structured.html#committed/3"},{"type":"function","title":"dev_codec_structured.decode_value/2","doc":"Convert non-binary values to binary for serialization.","ref":"dev_codec_structured.html#decode_value/2"},{"type":"function","title":"dev_codec_structured.encode_value/1","doc":"Convert a term to a binary representation, emitting its type for\nserialization as a separate tag.","ref":"dev_codec_structured.html#encode_value/1"},{"type":"function","title":"dev_codec_structured.from/1","doc":"Convert a rich message into a 'Type-Annotated-Binary-Message' (TABM).","ref":"dev_codec_structured.html#from/1"},{"type":"function","title":"dev_codec_structured.implicit_keys/1","doc":"Find the implicit keys of a TABM.","ref":"dev_codec_structured.html#implicit_keys/1"},{"type":"function","title":"dev_codec_structured.list_encoding_test/0","doc":"","ref":"dev_codec_structured.html#list_encoding_test/0"},{"type":"function","title":"dev_codec_structured.to/1","doc":"Convert a TABM into a native HyperBEAM message.","ref":"dev_codec_structured.html#to/1"},{"type":"function","title":"dev_codec_structured.verify/3","doc":"","ref":"dev_codec_structured.html#verify/3"},{"type":"module","title":"dev_cron","doc":null,"ref":"dev_cron.html"},{"type":"function","title":"dev_cron.execute/2","doc":null,"ref":"dev_cron.html#execute/2"},{"type":"function","title":"dev_cron.init/2","doc":null,"ref":"dev_cron.html#init/2"},{"type":"function","title":"dev_cron.uses/0","doc":null,"ref":"dev_cron.html#uses/0"},{"type":"module","title":"dev_cu","doc":"","ref":"dev_cu.html"},{"type":"function","title":"dev_cu.execute/2","doc":"","ref":"dev_cu.html#execute/2"},{"type":"function","title":"dev_cu.push/2","doc":"","ref":"dev_cu.html#push/2"},{"type":"module","title":"dev_dedup","doc":"A device that deduplicates messages send to a process.\nOnly runs on the first pass of the `compute` key call if executed\nin a stack. Currently the device stores its list of already seen \nitems in memory, but at some point it will likely make sense to \ndrop them in the cache.","ref":"dev_dedup.html"},{"type":"function","title":"dev_dedup.dedup_test/0","doc":"","ref":"dev_dedup.html#dedup_test/0"},{"type":"function","title":"dev_dedup.dedup_with_multipass_test/0","doc":"","ref":"dev_dedup.html#dedup_with_multipass_test/0"},{"type":"function","title":"dev_dedup.info/1","doc":"","ref":"dev_dedup.html#info/1"},{"type":"module","title":"dev_delegated_compute","doc":"Simple wrapper module that enables compute on remote machines,\nimplementing the JSON-Iface. This can be used either as a standalone, to \nbring trusted results into the local node, or as the `Execution-Device` of\nan AO process.","ref":"dev_delegated_compute.html"},{"type":"function","title":"dev_delegated_compute.compute/3","doc":"","ref":"dev_delegated_compute.html#compute/3"},{"type":"function","title":"dev_delegated_compute.init/3","doc":"Initialize or normalize the compute-lite device. For now, we don't\nneed to do anything special here.","ref":"dev_delegated_compute.html#init/3"},{"type":"function","title":"dev_delegated_compute.normalize/3","doc":"","ref":"dev_delegated_compute.html#normalize/3"},{"type":"function","title":"dev_delegated_compute.snapshot/3","doc":"","ref":"dev_delegated_compute.html#snapshot/3"},{"type":"module","title":"dev_faff","doc":"A module that implements a 'friends and family' pricing policy.\nIt will allow users to process requests only if their addresses are\nin the allow-list for the node.\n\nFundamentally against the spirit of permissionlessness, but it is useful if\nyou are running a node for your own purposes and would not like to allow \nothers to make use of it -- even for a fee. It also serves as a useful\nexample of how to implement a custom pricing policy, as it implements stubs\nfor both the pricing and ledger P4 APIs.","ref":"dev_faff.html"},{"type":"function","title":"dev_faff.debit/3","doc":"Debit the user's account if the request is allowed.","ref":"dev_faff.html#debit/3"},{"type":"function","title":"dev_faff.estimate/3","doc":"Decide whether or not to service a request from a given address.","ref":"dev_faff.html#estimate/3"},{"type":"module","title":"dev_genesis_wasm","doc":"A device that mimics an environment suitable for `legacynet` AO \nprocesses, using HyperBEAM infrastructure. This allows existing `legacynet`\nAO process definitions to be used in HyperBEAM.","ref":"dev_genesis_wasm.html"},{"type":"function","title":"dev_genesis_wasm.compute/3","doc":"All the `delegated-compute@1.0` device to execute the request. We then apply\nthe `patch@1.0` device, applying any state patches that the AO process may have\nrequested.","ref":"dev_genesis_wasm.html#compute/3"},{"type":"function","title":"dev_genesis_wasm.init/3","doc":"Initialize the device.","ref":"dev_genesis_wasm.html#init/3"},{"type":"function","title":"dev_genesis_wasm.normalize/3","doc":"Normalize the device.","ref":"dev_genesis_wasm.html#normalize/3"},{"type":"function","title":"dev_genesis_wasm.snapshot/3","doc":"Snapshot the device.","ref":"dev_genesis_wasm.html#snapshot/3"},{"type":"module","title":"dev_green_zone","doc":"The green zone device, which provides secure communication and identity\nmanagement between trusted nodes. It handles node initialization, joining\nexisting green zones, key exchange, and node identity cloning. All operations\nare protected by hardware commitment and encryption.","ref":"dev_green_zone.html"},{"type":"function","title":"dev_green_zone.become/3","doc":"Clone the identity of a target node.\nAllows a node to adopt the identity of a target node by retrieving the target\nnode's encrypted private key and IV, decrypting it using the shared AES key,\nand updating the local node's wallet with the target node's keypair.\n@param M1 The message containing the target node's encrypted private key and IV.\n@param M2 Ignored parameter.\n@param Opts A map of configuration options. Must include `priv_green_zone_aes`.\n@returns {ok, Map} on success, where Map includes:\n          - status: 200\n          - message: confirmation text\n          - node: the target node's address\n         Returns {error, Reason} if the node is not part of the green zone.","ref":"dev_green_zone.html#become/3"},{"type":"function","title":"dev_green_zone.init/3","doc":"Initialize the green zone.\nSets up the node's cryptographic identity by ensuring that a wallet (keypair)\nexists and generating a shared AES key for secure communication. The wallet,\nAES key, and an empty trusted nodes list are stored in the node's configuration.\n@param M1 Ignored parameter.\n@param M2 Optionally contains a `required-config` map. If not provided, the\n          default required config (derived from the nodes base configuration)\n          will be used.\n@param Opts A map containing configuration options. If the wallet is not already\n            provided (under key `priv_wallet`), a new one will be created.\n@returns {ok, Msg} where Msg is a binary confirmation message.","ref":"dev_green_zone.html#init/3"},{"type":"function","title":"dev_green_zone.join/3","doc":"Initiate the join process for a node (Node B).\n\nWhen Node B wishes to join an existing green zone, it sends a GET request to\nits local join endpoint.\nThis request includes a header with the target peer's address (Node A).\n\nBased on the presence of a peer address:\n  - If the target peer is specified, Node B internally routes the request to \n    the join_peer flow, where it generates an commitment report and prepares\n    a POST request to forward to Node A.\n  - If no peer address is present, the join request is processed locally via\n    the validate_join flow.\n\n@param M1 The join request message containing a header with the target peer's\n          address.\n@param M2 Ignored parameter.\n@param Opts A map of configuration options.\n@returns {ok, Map} on success with join response details, or {error, Reason}\non failure.","ref":"dev_green_zone.html#join/3"},{"type":"function","title":"dev_green_zone.key/3","doc":"Retrieve and encrypt the node's private key.\nEncrypts the node's private key using the shared AES key in AES-256-GCM mode. \nIt returns the encrypted key along with the initialization vector (IV) needed\nfor decryption.\n@param M1 Ignored parameter.\n@param M2 Ignored parameter.\n@param Opts A map of configuration options. Must include keys `priv_wallet`\n            and `priv_green_zone_aes`.\n@returns {ok, Map} on success, where Map contains:\n          - status: 200\n          - encrypted_key: the encrypted private key (Base64 encoded)\n          - iv: the initialization vector (Base64 encoded)\n         Returns {error, Reason} if the node is not part of the green zone.","ref":"dev_green_zone.html#key/3"},{"type":"function","title":"dev_green_zone.rsa_wallet_integration_test/0","doc":"Test RSA operations with the existing wallet structure.\nThis test function verifies that encryption and decryption using the RSA keys\nfrom the wallet work correctly. It creates a new wallet, encrypts a test\nmessage with the RSA public key, and then decrypts it with the RSA private\nkey, asserting that the decrypted message matches the original.","ref":"dev_green_zone.html#rsa_wallet_integration_test/0"},{"type":"module","title":"dev_hyperbuddy","doc":"A device that renders a REPL-like interface for AO-Core via HTML.","ref":"dev_hyperbuddy.html"},{"type":"function","title":"dev_hyperbuddy.format/3","doc":"Employ HyperBEAM's internal pretty printer to format a message.","ref":"dev_hyperbuddy.html#format/3"},{"type":"function","title":"dev_hyperbuddy.info/0","doc":"Export an explicit list of files via http.","ref":"dev_hyperbuddy.html#info/0"},{"type":"function","title":"dev_hyperbuddy.metrics/3","doc":"The main HTML page for the REPL device.","ref":"dev_hyperbuddy.html#metrics/3"},{"type":"module","title":"dev_json_iface","doc":"A device that provides a way for WASM execution to interact with\nthe HyperBEAM (and AO) systems, using JSON as a shared data representation.\nThe interface is easy to use. It works as follows:\n1. The device is given a message that contains a process definition, WASM\n   environment, and a message that contains the data to be processed,\n   including the image to be used in part of `execute{pass=1}`.\n2. The device is called with `execute{pass=2}`, which reads the result of\n   the process execution from the WASM environment and adds it to the\n   message.\nThe device has the following requirements and interface:\n    ```\n    M1/Computed when /Pass == 1 ->\n        Assumes:\n            M1/priv/wasm/instance\n            M1/Process\n            M2/Message\n            M2/Assignment/Block-Height\n        Generates:\n            /wasm/handler\n            /wasm/params\n        Side-effects:\n            Writes the process and message as JSON representations into the\n            WASM environment.\n    M1/Computed when M2/Pass == 2 ->\n        Assumes:\n            M1/priv/wasm/instance\n            M2/Results\n            M2/Process\n        Generates:\n            /Results/Outbox\n            /Results/Data'''","ref":"dev_json_iface.html"},{"type":"function","title":"dev_json_iface.aos_stack_benchmark_test_/0","doc":"","ref":"dev_json_iface.html#aos_stack_benchmark_test_/0"},{"type":"function","title":"dev_json_iface.basic_aos_call_test_/0","doc":"","ref":"dev_json_iface.html#basic_aos_call_test_/0"},{"type":"function","title":"dev_json_iface.compute/3","doc":"On first pass prepare the call, on second pass get the results.","ref":"dev_json_iface.html#compute/3"},{"type":"function","title":"dev_json_iface.generate_aos_msg/2","doc":"","ref":"dev_json_iface.html#generate_aos_msg/2"},{"type":"function","title":"dev_json_iface.generate_stack/1","doc":"","ref":"dev_json_iface.html#generate_stack/1"},{"type":"function","title":"dev_json_iface.generate_stack/2","doc":"","ref":"dev_json_iface.html#generate_stack/2"},{"type":"function","title":"dev_json_iface.init/3","doc":"Initialize the device.","ref":"dev_json_iface.html#init/3"},{"type":"function","title":"dev_json_iface.json_to_message/2","doc":"Translates a compute result -- either from a WASM execution using the \nJSON-Iface, or from a `Legacy` CU -- and transforms it into a result message.","ref":"dev_json_iface.html#json_to_message/2"},{"type":"function","title":"dev_json_iface.message_to_json_struct/1","doc":"","ref":"dev_json_iface.html#message_to_json_struct/1"},{"type":"module","title":"dev_lookup","doc":"A device that looks up an ID from a local store and returns it, honoring\nthe `accept` key to return the correct format.","ref":"dev_lookup.html"},{"type":"function","title":"dev_lookup.aos2_message_lookup_test/0","doc":"","ref":"dev_lookup.html#aos2_message_lookup_test/0"},{"type":"function","title":"dev_lookup.binary_lookup_test/0","doc":"","ref":"dev_lookup.html#binary_lookup_test/0"},{"type":"function","title":"dev_lookup.http_lookup_test/0","doc":"","ref":"dev_lookup.html#http_lookup_test/0"},{"type":"function","title":"dev_lookup.message_lookup_test/0","doc":"","ref":"dev_lookup.html#message_lookup_test/0"},{"type":"function","title":"dev_lookup.read/3","doc":"","ref":"dev_lookup.html#read/3"},{"type":"module","title":"dev_lua","doc":"A device that calls a Lua script upon a request and returns the result.","ref":"dev_lua.html"},{"type":"function","title":"dev_lua.compute/3","doc":"Call the Lua script with the given arguments. This key is `multipass@1.0`\ncompatible: It will only execute the call on the first pass. On subsequent\npasses, it will return the base message unchanged.","ref":"dev_lua.html#compute/3"},{"type":"function","title":"dev_lua.direct_benchmark_test/0","doc":"Benchmark the performance of Lua executions.","ref":"dev_lua.html#direct_benchmark_test/0"},{"type":"function","title":"dev_lua.info/1","doc":"All keys that are not directly available in the base message are \nresolved by calling the Lua function in the script of the same name.","ref":"dev_lua.html#info/1"},{"type":"function","title":"dev_lua.init/3","doc":"Initialize the device state, loading the script into memory if it is \na reference.","ref":"dev_lua.html#init/3"},{"type":"function","title":"dev_lua.invoke_non_compute_key_test/0","doc":"Call a non-compute key on a Lua device message and ensure that the\nfunction of the same name in the script is called.","ref":"dev_lua.html#invoke_non_compute_key_test/0"},{"type":"function","title":"dev_lua.lua_http_preprocessor_test/0","doc":"Use a Lua script as a preprocessor on the HTTP server via `~meta@1.0`.","ref":"dev_lua.html#lua_http_preprocessor_test/0"},{"type":"function","title":"dev_lua.lua_json_interface_benchmark_test/0","doc":"Benchmark execution of a Lua stack with a JSON interface.","ref":"dev_lua.html#lua_json_interface_benchmark_test/0"},{"type":"function","title":"dev_lua.lua_json_interface_test/0","doc":"Ensure that we can call a Lua process using the JSON interface.","ref":"dev_lua.html#lua_json_interface_test/0"},{"type":"function","title":"dev_lua.normalize/3","doc":"Restore the Lua state from a snapshot, if it exists.","ref":"dev_lua.html#normalize/3"},{"type":"function","title":"dev_lua.pure_lua_process_benchmark_test_/0","doc":"","ref":"dev_lua.html#pure_lua_process_benchmark_test_/0"},{"type":"function","title":"dev_lua.pure_lua_process_test/0","doc":"Call a process whose `execution-device` is set to `lua@5.3a`.","ref":"dev_lua.html#pure_lua_process_test/0"},{"type":"function","title":"dev_lua.simple_invocation_test/0","doc":"","ref":"dev_lua.html#simple_invocation_test/0"},{"type":"function","title":"dev_lua.snapshot/3","doc":"Snapshot the Lua state from a live computation. Normalizes its `priv`\nstate element, then serializes the state to a binary.","ref":"dev_lua.html#snapshot/3"},{"type":"module","title":"dev_message","doc":"The identity device: For non-reserved keys, it simply returns a key \nfrom the message as it is found in the message's underlying Erlang map. \nPrivate keys (`priv[.*]`) are not included.\nReserved keys are: `id`, `commitments`, `committers`, `keys`, `path`, \n`set`, `remove`, `get`, and `verify`. Their function comments describe the \nbehaviour of the device when these keys are set.","ref":"dev_message.html"},{"type":"function","title":"dev_message.cannot_get_private_keys_test/0","doc":"","ref":"dev_message.html#cannot_get_private_keys_test/0"},{"type":"function","title":"dev_message.case_insensitive_get_test/0","doc":"","ref":"dev_message.html#case_insensitive_get_test/0"},{"type":"function","title":"dev_message.commit/3","doc":"Commit to a message, using the `commitment-device` key to specify the\ndevice that should be used to commit to the message. If the key is not set,\nthe default device (`httpsig@1.0`) is used.","ref":"dev_message.html#commit/3"},{"type":"function","title":"dev_message.committed/3","doc":"Return the list of committed keys from a message.","ref":"dev_message.html#committed/3"},{"type":"function","title":"dev_message.committers/1","doc":"Return the committers of a message that are present in the given request.","ref":"dev_message.html#committers/1"},{"type":"function","title":"dev_message.committers/2","doc":"","ref":"dev_message.html#committers/2"},{"type":"function","title":"dev_message.committers/3","doc":"","ref":"dev_message.html#committers/3"},{"type":"function","title":"dev_message.get/2","doc":"Return the value associated with the key as it exists in the message's\nunderlying Erlang map. First check the public keys, then check case-\ninsensitively if the key is a binary.","ref":"dev_message.html#get/2"},{"type":"function","title":"dev_message.get/3","doc":"","ref":"dev_message.html#get/3"},{"type":"function","title":"dev_message.get_keys_mod_test/0","doc":"","ref":"dev_message.html#get_keys_mod_test/0"},{"type":"function","title":"dev_message.id/1","doc":"Return the ID of a message, using the `committers` list if it exists.\nIf the `committers` key is `all`, return the ID including all known \ncommitments -- `none` yields the ID without any commitments. If the \n`committers` key is a list/map, return the ID including only the specified \ncommitments.\nThe `id-device` key in the message can be used to specify the device that\nshould be used to calculate the ID. If it is not set, the default device\n(`httpsig@1.0`) is used.\nNote: This function _does not_ use AO-Core's `get/3` function, as it\nas it would require significant computation. We may want to change this\nif/when non-map message structures are created.","ref":"dev_message.html#id/1"},{"type":"function","title":"dev_message.id/2","doc":"","ref":"dev_message.html#id/2"},{"type":"function","title":"dev_message.id/3","doc":"","ref":"dev_message.html#id/3"},{"type":"function","title":"dev_message.info/0","doc":"Return the info for the identity device.","ref":"dev_message.html#info/0"},{"type":"function","title":"dev_message.is_private_mod_test/0","doc":"","ref":"dev_message.html#is_private_mod_test/0"},{"type":"function","title":"dev_message.key_from_device_test/0","doc":"","ref":"dev_message.html#key_from_device_test/0"},{"type":"function","title":"dev_message.keys/1","doc":"Get the public keys of a message.","ref":"dev_message.html#keys/1"},{"type":"function","title":"dev_message.keys_from_device_test/0","doc":"","ref":"dev_message.html#keys_from_device_test/0"},{"type":"function","title":"dev_message.private_keys_are_filtered_test/0","doc":"","ref":"dev_message.html#private_keys_are_filtered_test/0"},{"type":"function","title":"dev_message.remove/2","doc":"Remove a key or keys from a message.","ref":"dev_message.html#remove/2"},{"type":"function","title":"dev_message.remove_test/0","doc":"","ref":"dev_message.html#remove_test/0"},{"type":"function","title":"dev_message.run_test/0","doc":"","ref":"dev_message.html#run_test/0"},{"type":"function","title":"dev_message.set/3","doc":"Deep merge keys in a message. Takes a map of key-value pairs and sets\nthem in the message, overwriting any existing values.","ref":"dev_message.html#set/3"},{"type":"function","title":"dev_message.set_conflicting_keys_test/0","doc":"","ref":"dev_message.html#set_conflicting_keys_test/0"},{"type":"function","title":"dev_message.set_ignore_undefined_test/0","doc":"","ref":"dev_message.html#set_ignore_undefined_test/0"},{"type":"function","title":"dev_message.set_path/3","doc":"Special case of `set/3` for setting the `path` key. This cannot be set\nusing the normal `set` function, as the `path` is a reserved key, necessary \nfor AO-Core to know the key to evaluate in requests.","ref":"dev_message.html#set_path/3"},{"type":"function","title":"dev_message.unset_with_set_test/0","doc":"","ref":"dev_message.html#unset_with_set_test/0"},{"type":"function","title":"dev_message.verify/3","doc":"Verify a message. By default, all commitments are verified. The\n`committers` key in the request can be used to specify that only the \ncommitments from specific committers should be verified. Similarly, specific\ncommitments can be specified using the `commitments` key.","ref":"dev_message.html#verify/3"},{"type":"function","title":"dev_message.verify_test/0","doc":"","ref":"dev_message.html#verify_test/0"},{"type":"module","title":"dev_meta","doc":"The hyperbeam meta device, which is the default entry point\nfor all messages processed by the machine. This device executes a\nAO-Core singleton request, after first applying the node's \npre-processor, if set. The pre-processor can halt the request by\nreturning an error, or return a modified version if it deems necessary --\nthe result of the pre-processor is used as the request for the AO-Core\nresolver. Additionally, a post-processor can be set, which is executed after\nthe AO-Core resolver has returned a result.","ref":"dev_meta.html"},{"type":"function","title":"dev_meta.adopt_node_message/2","doc":"Attempt to adopt changes to a node message.","ref":"dev_meta.html#adopt_node_message/2"},{"type":"function","title":"dev_meta.authorized_set_node_msg_succeeds_test/0","doc":"Test that we can set the node message if the request is signed by the\nowner of the node.","ref":"dev_meta.html#authorized_set_node_msg_succeeds_test/0"},{"type":"function","title":"dev_meta.claim_node_test/0","doc":"Test that we can claim the node correctly and set the node message after.","ref":"dev_meta.html#claim_node_test/0"},{"type":"function","title":"dev_meta.config_test/0","doc":"Test that we can get the node message.","ref":"dev_meta.html#config_test/0"},{"type":"function","title":"dev_meta.halt_request_test/0","doc":"Test that we can halt a request if the preprocessor returns an error.","ref":"dev_meta.html#halt_request_test/0"},{"type":"function","title":"dev_meta.handle/2","doc":"Normalize and route messages downstream based on their path. Messages\nwith a `Meta` key are routed to the `handle_meta/2` function, while all\nother messages are routed to the `handle_resolve/2` function.","ref":"dev_meta.html#handle/2"},{"type":"function","title":"dev_meta.info/1","doc":"Ensure that the helper function `adopt_node_message/2` is not exported.\nThe naming of this method carefully avoids a clash with the exported `info/3`\nfunction. We would like the node information to be easily accessible via the\n`info` endpoint, but AO-Core also uses `info` as the name of the function\nthat grants device information. The device call takes two or fewer arguments,\nso we are safe to use the name for both purposes in this case, as the user \ninfo call will match the three-argument version of the function. If in the \nfuture the `request` is added as an argument to AO-Core's internal `info`\nfunction, we will need to find a different approach.","ref":"dev_meta.html#info/1"},{"type":"function","title":"dev_meta.info/3","doc":"Get/set the node message. If the request is a `POST`, we check that the\nrequest is signed by the owner of the node. If not, we return the node message\nas-is, aside all keys that are private (according to `hb_private`).","ref":"dev_meta.html#info/3"},{"type":"function","title":"dev_meta.modify_request_test/0","doc":"Test that a preprocessor can modify a request.","ref":"dev_meta.html#modify_request_test/0"},{"type":"function","title":"dev_meta.permanent_node_message_test/0","doc":"Test that a permanent node message cannot be changed.","ref":"dev_meta.html#permanent_node_message_test/0"},{"type":"function","title":"dev_meta.priv_inaccessible_test/0","doc":"Test that we can't get the node message if the requested key is private.","ref":"dev_meta.html#priv_inaccessible_test/0"},{"type":"function","title":"dev_meta.unauthorized_set_node_msg_fails_test/0","doc":"Test that we can't set the node message if the request is not signed by\nthe owner of the node.","ref":"dev_meta.html#unauthorized_set_node_msg_fails_test/0"},{"type":"function","title":"dev_meta.uninitialized_node_test/0","doc":"Test that an uninitialized node will not run computation.","ref":"dev_meta.html#uninitialized_node_test/0"},{"type":"module","title":"dev_monitor","doc":null,"ref":"dev_monitor.html"},{"type":"function","title":"dev_monitor.add_monitor/2","doc":null,"ref":"dev_monitor.html#add_monitor/2"},{"type":"function","title":"dev_monitor.end_of_schedule/1","doc":null,"ref":"dev_monitor.html#end_of_schedule/1"},{"type":"function","title":"dev_monitor.execute/2","doc":null,"ref":"dev_monitor.html#execute/2"},{"type":"function","title":"dev_monitor.init/3","doc":null,"ref":"dev_monitor.html#init/3"},{"type":"function","title":"dev_monitor.uses/0","doc":null,"ref":"dev_monitor.html#uses/0"},{"type":"module","title":"dev_multipass","doc":"A device that triggers repass events until a certain counter has been\nreached. This is useful for certain types of stacks that need various\nexecution passes to be completed in sequence across devices.","ref":"dev_multipass.html"},{"type":"function","title":"dev_multipass.basic_multipass_test/0","doc":"","ref":"dev_multipass.html#basic_multipass_test/0"},{"type":"function","title":"dev_multipass.info/1","doc":"","ref":"dev_multipass.html#info/1"},{"type":"module","title":"dev_p4","doc":"The HyperBEAM core payment ledger. This module allows the operator to\nspecify another device that can act as a pricing mechanism for transactions\non the node, as well as orchestrating a payment ledger to calculate whether\nthe node should fulfil services for users.\n\nThe device requires the following node message settings in order to function:\n\n- `p4_pricing_device`: The device that will estimate the cost of a request.\n- `p4_ledger_device`: The device that will act as a payment ledger.\n\nThe pricing device should implement the following keys:\n```\n            GET /estimate?type=pre|post&body=[...]&request=RequestMessage\n            GET /price?type=pre|post&body=[...]&request=RequestMessage\n'''\n\nThe `body` key is used to pass either the request or response messages to the\ndevice. The `type` key is used to specify whether the inquiry is for a request\n(pre) or a response (post) object. Requests carry lists of messages that will\nbe executed, while responses carry the results of the execution. The `price`\nkey may return `infinity` if the node will not serve a user under any\ncircumstances. Else, the value returned by the `price` key will be passed to\nthe ledger device as the `amount` key.\n\nThe ledger device should implement the following keys:\n```\n            POST /credit?message=PaymentMessage&request=RequestMessage\n            POST /debit?amount=PriceMessage&type=pre|post&request=RequestMessage\n'''\n\nThe `type` key is optional and defaults to `pre`. If `type` is set to `post`,\nthe debit must be applied to the ledger, whereas the `pre` type is used to\ncheck whether the debit would succeed before execution.","ref":"dev_p4.html"},{"type":"function","title":"dev_p4.balance/3","doc":"Get the balance of a user in the ledger.","ref":"dev_p4.html#balance/3"},{"type":"function","title":"dev_p4.faff_test/0","doc":"Simple test of p4's capabilities with the `faff@1.0` device.","ref":"dev_p4.html#faff_test/0"},{"type":"function","title":"dev_p4.non_chargable_route_test/0","doc":"Test that a non-chargable route is not charged for.","ref":"dev_p4.html#non_chargable_route_test/0"},{"type":"function","title":"dev_p4.postprocess/3","doc":"Postprocess the request after it has been fulfilled.","ref":"dev_p4.html#postprocess/3"},{"type":"function","title":"dev_p4.preprocess/3","doc":"Estimate the cost of a transaction and decide whether to proceed with\na request. The default behavior if `pricing_device` or `p4_balances` are\nnot set is to proceed, so it is important that a user initialize them.","ref":"dev_p4.html#preprocess/3"},{"type":"module","title":"dev_patch","doc":"A device that finds `PATCH` requests in the `results/outbox`\nof its message, and applies them to it. This can be useful for processes\nwhose computation would like to manipulate data outside of the `results` key\nof its message.","ref":"dev_patch.html"},{"type":"function","title":"dev_patch.compute/3","doc":"Find `PATCH` requests in the `results/outbox` of the message, and apply\nthem to the state.","ref":"dev_patch.html#compute/3"},{"type":"function","title":"dev_patch.init/3","doc":"Default process device hooks.","ref":"dev_patch.html#init/3"},{"type":"function","title":"dev_patch.normalize/3","doc":"","ref":"dev_patch.html#normalize/3"},{"type":"function","title":"dev_patch.patch_to_submessage_test/0","doc":"","ref":"dev_patch.html#patch_to_submessage_test/0"},{"type":"function","title":"dev_patch.snapshot/3","doc":"","ref":"dev_patch.html#snapshot/3"},{"type":"function","title":"dev_patch.uninitialized_patch_test/0","doc":"","ref":"dev_patch.html#uninitialized_patch_test/0"},{"type":"module","title":"dev_poda","doc":"","ref":"dev_poda.html"},{"type":"function","title":"dev_poda.execute/3","doc":"","ref":"dev_poda.html#execute/3"},{"type":"function","title":"dev_poda.init/2","doc":"","ref":"dev_poda.html#init/2"},{"type":"function","title":"dev_poda.is_user_signed/1","doc":"","ref":"dev_poda.html#is_user_signed/1"},{"type":"function","title":"dev_poda.push/2","doc":"Hook used by the MU pathway (currently) to add commitments to an\noutbound message if the computation requests it.","ref":"dev_poda.html#push/2"},{"type":"module","title":"dev_process","doc":"This module contains the device implementation of AO processes\nin AO-Core. The core functionality of the module is in 'routing' requests\nfor different functionality (scheduling, computing, and pushing messages)\nto the appropriate device. This is achieved by swapping out the device \nof the process message with the necessary component in order to run the \nexecution, then swapping it back before returning. Computation is supported\nas a stack of devices, customizable by the user, while the scheduling\ndevice is (by default) a single device.\n\nThis allows the devices to share state as needed. Additionally, after each\ncomputation step the device caches the result at a path relative to the\nprocess definition itself, such that the process message's ID can act as an\nimmutable reference to the process's growing list of interactions. See \n`dev_process_cache` for details.\n\nThe external API of the device is as follows:\n```\nGET /ID/Schedule:                Returns the messages in the schedule\nPOST /ID/Schedule:               Adds a message to the schedule\n\nGET /ID/Compute/[IDorSlotNum]:   Returns the state of the process after \n                                 applying a message\nGET /ID/Now:                     Returns the `/Results` key of the latest \n                                 computed message\n'''\n\nAn example process definition will look like this:\n```\n    Device: Process/1.0\n    Scheduler-Device: Scheduler/1.0\n    Execution-Device: Stack/1.0\n    Execution-Stack: \"Scheduler/1.0\", \"Cron/1.0\", \"WASM/1.0\", \"PoDA/1.0\"\n    Cron-Frequency: 10-Minutes\n    WASM-Image: WASMImageID\n    PoDA:\n        Device: PoDA/1.0\n        Authority: A\n        Authority: B\n        Authority: C\n        Quorum: 2\n'''\n\nRuntime options:\n    Cache-Frequency: The number of assignments that will be computed \n                     before the full (restorable) state should be cached.\n    Cache-Keys:      A list of the keys that should be cached for all \n                     assignments, in addition to `/Results`.","ref":"dev_process.html"},{"type":"function","title":"dev_process.aos_browsable_state_test_/0","doc":"","ref":"dev_process.html#aos_browsable_state_test_/0"},{"type":"function","title":"dev_process.aos_compute_test_/0","doc":"","ref":"dev_process.html#aos_compute_test_/0"},{"type":"function","title":"dev_process.aos_persistent_worker_benchmark_test_/0","doc":"","ref":"dev_process.html#aos_persistent_worker_benchmark_test_/0"},{"type":"function","title":"dev_process.aos_state_access_via_http_test_/0","doc":"","ref":"dev_process.html#aos_state_access_via_http_test_/0"},{"type":"function","title":"dev_process.aos_state_patch_test_/0","doc":"","ref":"dev_process.html#aos_state_patch_test_/0"},{"type":"function","title":"dev_process.as_process/2","doc":"Change the message to for that has the device set as this module.\nIn situations where the key that is `run_as` returns a message with a \ntransformed device, this is useful.","ref":"dev_process.html#as_process/2"},{"type":"function","title":"dev_process.compute/3","doc":"Compute the result of an assignment applied to the process state, if it \nis the next message.","ref":"dev_process.html#compute/3"},{"type":"function","title":"dev_process.dev_test_process/0","doc":"Generate a device that has a stack of two `dev_test`s for \nexecution. This should generate a message state has doubled \n`Already-Seen` elements for each assigned slot.","ref":"dev_process.html#dev_test_process/0"},{"type":"function","title":"dev_process.do_test_restore/0","doc":"","ref":"dev_process.html#do_test_restore/0"},{"type":"function","title":"dev_process.ensure_process_key/2","doc":"Helper function to store a copy of the `process` key in the message.","ref":"dev_process.html#ensure_process_key/2"},{"type":"function","title":"dev_process.get_scheduler_slot_test/0","doc":"","ref":"dev_process.html#get_scheduler_slot_test/0"},{"type":"function","title":"dev_process.http_wasm_process_by_id_test/0","doc":"","ref":"dev_process.html#http_wasm_process_by_id_test/0"},{"type":"function","title":"dev_process.info/1","doc":"When the info key is called, we should return the process exports.","ref":"dev_process.html#info/1"},{"type":"function","title":"dev_process.init/0","doc":"","ref":"dev_process.html#init/0"},{"type":"function","title":"dev_process.now/3","doc":"Returns the known state of the process at either the current slot, or\nthe latest slot in the cache depending on the `process_now_from_cache` option.","ref":"dev_process.html#now/3"},{"type":"function","title":"dev_process.now_results_test_/0","doc":"","ref":"dev_process.html#now_results_test_/0"},{"type":"function","title":"dev_process.persistent_process_test/0","doc":"","ref":"dev_process.html#persistent_process_test/0"},{"type":"function","title":"dev_process.prior_results_accessible_test_/0","doc":"","ref":"dev_process.html#prior_results_accessible_test_/0"},{"type":"function","title":"dev_process.process_id/3","doc":"Returns the process ID of the current process.","ref":"dev_process.html#process_id/3"},{"type":"function","title":"dev_process.push/3","doc":"Recursively push messages to the scheduler until we find a message\nthat does not lead to any further messages being scheduled.","ref":"dev_process.html#push/3"},{"type":"function","title":"dev_process.recursive_path_resolution_test/0","doc":"","ref":"dev_process.html#recursive_path_resolution_test/0"},{"type":"function","title":"dev_process.restore_test_/0","doc":"Manually test state restoration without using the cache.","ref":"dev_process.html#restore_test_/0"},{"type":"function","title":"dev_process.schedule/3","doc":"Wraps functions in the Scheduler device.","ref":"dev_process.html#schedule/3"},{"type":"function","title":"dev_process.schedule_aos_call/2","doc":"","ref":"dev_process.html#schedule_aos_call/2"},{"type":"function","title":"dev_process.schedule_aos_call/3","doc":"","ref":"dev_process.html#schedule_aos_call/3"},{"type":"function","title":"dev_process.schedule_on_process_test/0","doc":"","ref":"dev_process.html#schedule_on_process_test/0"},{"type":"function","title":"dev_process.simple_wasm_persistent_worker_benchmark_test/0","doc":"","ref":"dev_process.html#simple_wasm_persistent_worker_benchmark_test/0"},{"type":"function","title":"dev_process.slot/3","doc":"","ref":"dev_process.html#slot/3"},{"type":"function","title":"dev_process.snapshot/3","doc":"","ref":"dev_process.html#snapshot/3"},{"type":"function","title":"dev_process.test_aos_process/0","doc":"Generate a process message with a random number, and the \n`dev_wasm` device for execution.","ref":"dev_process.html#test_aos_process/0"},{"type":"function","title":"dev_process.test_aos_process/1","doc":"","ref":"dev_process.html#test_aos_process/1"},{"type":"function","title":"dev_process.test_device_compute_test/0","doc":"","ref":"dev_process.html#test_device_compute_test/0"},{"type":"function","title":"dev_process.test_wasm_process/1","doc":"","ref":"dev_process.html#test_wasm_process/1"},{"type":"function","title":"dev_process.wasm_compute_from_id_test/0","doc":"","ref":"dev_process.html#wasm_compute_from_id_test/0"},{"type":"function","title":"dev_process.wasm_compute_test/0","doc":"","ref":"dev_process.html#wasm_compute_test/0"},{"type":"module","title":"dev_process_cache","doc":"A wrapper around the hb_cache module that provides a more\nconvenient interface for reading the result of a process at a given slot or\nmessage ID.","ref":"dev_process_cache.html"},{"type":"function","title":"dev_process_cache.latest/2","doc":"Retrieve the latest slot for a given process. Optionally state a limit\non the slot number to search for, as well as a required path that the slot\nmust have.","ref":"dev_process_cache.html#latest/2"},{"type":"function","title":"dev_process_cache.latest/3","doc":"","ref":"dev_process_cache.html#latest/3"},{"type":"function","title":"dev_process_cache.latest/4","doc":"","ref":"dev_process_cache.html#latest/4"},{"type":"function","title":"dev_process_cache.process_cache_suite_test_/0","doc":"","ref":"dev_process_cache.html#process_cache_suite_test_/0"},{"type":"function","title":"dev_process_cache.read/2","doc":"Read the result of a process at a given slot.","ref":"dev_process_cache.html#read/2"},{"type":"function","title":"dev_process_cache.read/3","doc":"","ref":"dev_process_cache.html#read/3"},{"type":"function","title":"dev_process_cache.write/4","doc":"Write a process computation result to the cache.","ref":"dev_process_cache.html#write/4"},{"type":"module","title":"dev_process_worker","doc":"A long-lived process worker that keeps state in memory between\ncalls. Implements the interface of `hb_ao` to receive and respond \nto computation requests regarding a process as a singleton.","ref":"dev_process_worker.html"},{"type":"function","title":"dev_process_worker.await/5","doc":"Await a resolution from a worker executing the `process@1.0` device.","ref":"dev_process_worker.html#await/5"},{"type":"function","title":"dev_process_worker.group/3","doc":"Returns a group name for a request. The worker is responsible for all\ncomputation work on the same process on a single node, so we use the\nprocess ID as the group name.","ref":"dev_process_worker.html#group/3"},{"type":"function","title":"dev_process_worker.grouper_test/0","doc":"","ref":"dev_process_worker.html#grouper_test/0"},{"type":"function","title":"dev_process_worker.info_test/0","doc":"","ref":"dev_process_worker.html#info_test/0"},{"type":"function","title":"dev_process_worker.notify_compute/4","doc":"Notify any waiters for a specific slot of the computed results.","ref":"dev_process_worker.html#notify_compute/4"},{"type":"function","title":"dev_process_worker.server/3","doc":"Spawn a new worker process. This is called after the end of the first\nexecution of `hb_ao:resolve/3`, so the state we are given is the\nalready current.","ref":"dev_process_worker.html#server/3"},{"type":"function","title":"dev_process_worker.stop/1","doc":"Stop a worker process.","ref":"dev_process_worker.html#stop/1"},{"type":"module","title":"dev_push","doc":"`push@1.0` takes a message or slot number, evaluates it, and recursively\npushes the resulting messages to other processes. The `push`ing mechanism\ncontinues until the there are no remaining messages to push.","ref":"dev_push.html"},{"type":"function","title":"dev_push.full_push_test_/0","doc":"","ref":"dev_push.html#full_push_test_/0"},{"type":"function","title":"dev_push.push/3","doc":"Push either a message or an assigned slot number.","ref":"dev_push.html#push/3"},{"type":"function","title":"dev_push.push_prompts_encoding_change_test/0","doc":"","ref":"dev_push.html#push_prompts_encoding_change_test/0"},{"type":"module","title":"dev_relay","doc":"This module implements the relay device, which is responsible for\nrelaying messages between nodes and other HTTP(S) endpoints.\n\nIt can be called in either `call` or `cast` mode. In `call` mode, it\nreturns a `{ok, Result}' tuple, where `Result` is the response from the \nremote peer to the message sent. In `cast` mode, the invocation returns\nimmediately, and the message is relayed asynchronously. No response is given\nand the device returns `{ok, <<\"OK\">>}'.\n\nExample usage:\n\n```\n    curl /~relay@.1.0/call?method=GET?0.path=https://www.arweave.net/\n'''","ref":"dev_relay.html"},{"type":"function","title":"dev_relay.call/3","doc":"Execute a `call` request using a node's routes.\n\nSupports the following options:\n- `target`: The target message to relay. Defaults to the original message.\n- `relay-path`: The path to relay the message to. Defaults to the original path.\n- `method`: The method to use for the request. Defaults to the original method.\n- `requires-sign`: Whether the request requires signing before dispatching.\nDefaults to `false`.","ref":"dev_relay.html#call/3"},{"type":"function","title":"dev_relay.call_get_test/0","doc":"","ref":"dev_relay.html#call_get_test/0"},{"type":"function","title":"dev_relay.cast/3","doc":"Execute a request in the same way as `call/3`, but asynchronously. Always\nreturns `<<\"OK\">>`.","ref":"dev_relay.html#cast/3"},{"type":"function","title":"dev_relay.preprocess/3","doc":"Preprocess a request to check if it should be relayed to a different node.","ref":"dev_relay.html#preprocess/3"},{"type":"function","title":"dev_relay.preprocessor_reroute_to_nearest_test/0","doc":"Test that the `preprocess/3` function re-routes a request to remote\npeers, according to the node's routing table.","ref":"dev_relay.html#preprocessor_reroute_to_nearest_test/0"},{"type":"module","title":"dev_router","doc":"A device that routes outbound messages from the node to their\nappropriate network recipients via HTTP. All messages are initially\nrouted to a single process per node, which then load-balances them\nbetween downstream workers that perform the actual requests.\n\nThe routes for the router are defined in the `routes` key of the `Opts`,\nas a precidence-ordered list of maps. The first map that matches the\nmessage will be used to determine the route.\n\nMultiple nodes can be specified as viable for a single route, with the\n`Choose` key determining how many nodes to choose from the list (defaulting\nto 1). The `Strategy` key determines the load distribution strategy,\nwhich can be one of `Random`, `By-Base`, or `Nearest`. The route may also \ndefine additional parallel execution parameters, which are used by the\n`hb_http` module to manage control of requests.\n\nThe structure of the routes should be as follows:\n```\n    Node?: The node to route the message to.\n    Nodes?: A list of nodes to route the message to.\n    Strategy?: The load distribution strategy to use.\n    Choose?: The number of nodes to choose from the list.\n    Template?: A message template to match the message against, either as a\n               map or a path regex.\n'''","ref":"dev_router.html"},{"type":"function","title":"dev_router.add_route_test/0","doc":"","ref":"dev_router.html#add_route_test/0"},{"type":"function","title":"dev_router.by_base_determinism_test/0","doc":"Ensure that `By-Base` always chooses the same node for the same\nhashpath.","ref":"dev_router.html#by_base_determinism_test/0"},{"type":"function","title":"dev_router.device_call_from_singleton_test/0","doc":"","ref":"dev_router.html#device_call_from_singleton_test/0"},{"type":"function","title":"dev_router.explicit_route_test/0","doc":"","ref":"dev_router.html#explicit_route_test/0"},{"type":"function","title":"dev_router.get_routes_test/0","doc":"","ref":"dev_router.html#get_routes_test/0"},{"type":"function","title":"dev_router.match_routes/3","doc":"Find the first matching template in a list of known routes.","ref":"dev_router.html#match_routes/3"},{"type":"function","title":"dev_router.relay_nearest_test/0","doc":"","ref":"dev_router.html#relay_nearest_test/0"},{"type":"function","title":"dev_router.route/2","doc":"Find the appropriate route for the given message. If we are able to \nresolve to a single host+path, we return that directly. Otherwise, we return\nthe matching route (including a list of nodes under `nodes`) from the list of\nroutes.\n\nIf we have a route that has multiple resolving nodes, check\nthe load distribution strategy and choose a node. Supported strategies:\n```\n      All:     Return all nodes (default).\n      Random:  Distribute load evenly across all nodes, non-deterministically.\n      By-Base: According to the base message's hashpath.\n      Nearest: According to the distance of the node's wallet address to the\n               base message's hashpath.\n'''\n`By-Base` will ensure that all traffic for the same hashpath is routed to the\nsame node, minimizing work duplication, while `Random` ensures a more even\ndistribution of the requests.\n\nCan operate as a `~router@1.0` device, which will ignore the base message,\nrouting based on the Opts and request message provided, or as a standalone\nfunction, taking only the request message and the `Opts` map.","ref":"dev_router.html#route/2"},{"type":"function","title":"dev_router.route/3","doc":"","ref":"dev_router.html#route/3"},{"type":"function","title":"dev_router.route_regex_matches_test/0","doc":"","ref":"dev_router.html#route_regex_matches_test/0"},{"type":"function","title":"dev_router.route_template_message_matches_test/0","doc":"","ref":"dev_router.html#route_template_message_matches_test/0"},{"type":"function","title":"dev_router.routes/3","doc":"Device function that returns all known routes.","ref":"dev_router.html#routes/3"},{"type":"function","title":"dev_router.strategy_suite_test_/0","doc":"","ref":"dev_router.html#strategy_suite_test_/0"},{"type":"module","title":"dev_scheduler","doc":"A simple scheduler scheme for AO.\nThis device expects a message of the form:\n    Process: `#{ id, Scheduler: #{ Authority } }'\n```\nIt exposes the following keys for scheduling:\n    `#{ method: GET, path: <<\"/info\">> }' ->\n        Returns information about the scheduler.\n    `#{ method: GET, path: <<\"/slot\">> }' -> `slot(Msg1, Msg2, Opts)'\n        Returns the current slot for a process.\n    `#{ method: GET, path: <<\"/schedule\">> }' -> `get_schedule(Msg1, Msg2, Opts)'\n        Returns the schedule for a process in a cursor-traversable format.\n   ` #{ method: POST, path: <<\"/schedule\">> }' -> `post_schedule(Msg1, Msg2, Opts)'\n        Schedules a new message for a process, or starts a new scheduler\n        for the given message.\n'''","ref":"dev_scheduler.html"},{"type":"function","title":"dev_scheduler.benchmark_suite_test_/0","doc":"","ref":"dev_scheduler.html#benchmark_suite_test_/0"},{"type":"function","title":"dev_scheduler.checkpoint/1","doc":"Returns the current state of the scheduler.","ref":"dev_scheduler.html#checkpoint/1"},{"type":"function","title":"dev_scheduler.get_local_schedule_test/0","doc":"","ref":"dev_scheduler.html#get_local_schedule_test/0"},{"type":"function","title":"dev_scheduler.http_get_json_schedule_test_/0","doc":"","ref":"dev_scheduler.html#http_get_json_schedule_test_/0"},{"type":"function","title":"dev_scheduler.http_get_legacy_schedule_as_aos2_test_/0","doc":"","ref":"dev_scheduler.html#http_get_legacy_schedule_as_aos2_test_/0"},{"type":"function","title":"dev_scheduler.http_get_legacy_schedule_slot_range_test_/0","doc":"","ref":"dev_scheduler.html#http_get_legacy_schedule_slot_range_test_/0"},{"type":"function","title":"dev_scheduler.http_get_legacy_schedule_test_/0","doc":"","ref":"dev_scheduler.html#http_get_legacy_schedule_test_/0"},{"type":"function","title":"dev_scheduler.http_get_legacy_slot_test_/0","doc":"","ref":"dev_scheduler.html#http_get_legacy_slot_test_/0"},{"type":"function","title":"dev_scheduler.http_get_schedule_redirect_test/0","doc":"","ref":"dev_scheduler.html#http_get_schedule_redirect_test/0"},{"type":"function","title":"dev_scheduler.http_get_schedule_test_/0","doc":"","ref":"dev_scheduler.html#http_get_schedule_test_/0"},{"type":"function","title":"dev_scheduler.http_post_legacy_schedule_test_/0","doc":"","ref":"dev_scheduler.html#http_post_legacy_schedule_test_/0"},{"type":"function","title":"dev_scheduler.http_post_schedule_test/0","doc":"","ref":"dev_scheduler.html#http_post_schedule_test/0"},{"type":"function","title":"dev_scheduler.info/0","doc":"This device uses a default_handler to route requests to the correct\nfunction.","ref":"dev_scheduler.html#info/0"},{"type":"function","title":"dev_scheduler.next/3","doc":"Load the schedule for a process into the cache, then return the next\nassignment. Assumes that Msg1 is a `dev_process` or similar message, having\na `Current-Slot` key. It stores a local cache of the schedule in the\n`priv/To-Process` key.","ref":"dev_scheduler.html#next/3"},{"type":"function","title":"dev_scheduler.redirect_from_graphql_test/0","doc":"","ref":"dev_scheduler.html#redirect_from_graphql_test/0"},{"type":"function","title":"dev_scheduler.redirect_to_hint_test/0","doc":"","ref":"dev_scheduler.html#redirect_to_hint_test/0"},{"type":"function","title":"dev_scheduler.register/3","doc":"Generate a new scheduler location record and register it. We both send \nthe new scheduler-location to the given registry, and return it to the caller.","ref":"dev_scheduler.html#register/3"},{"type":"function","title":"dev_scheduler.register_new_process_test/0","doc":"","ref":"dev_scheduler.html#register_new_process_test/0"},{"type":"function","title":"dev_scheduler.register_scheduler_test/0","doc":"","ref":"dev_scheduler.html#register_scheduler_test/0"},{"type":"function","title":"dev_scheduler.router/4","doc":"The default handler for the scheduler device.","ref":"dev_scheduler.html#router/4"},{"type":"function","title":"dev_scheduler.schedule/3","doc":"A router for choosing between getting the existing schedule, or\nscheduling a new message.","ref":"dev_scheduler.html#schedule/3"},{"type":"function","title":"dev_scheduler.schedule_message_and_get_slot_test/0","doc":"","ref":"dev_scheduler.html#schedule_message_and_get_slot_test/0"},{"type":"function","title":"dev_scheduler.slot/3","doc":"Returns information about the current slot for a process.","ref":"dev_scheduler.html#slot/3"},{"type":"function","title":"dev_scheduler.start/0","doc":"Helper to ensure that the environment is started.","ref":"dev_scheduler.html#start/0"},{"type":"function","title":"dev_scheduler.status/3","doc":"Returns information about the entire scheduler.","ref":"dev_scheduler.html#status/3"},{"type":"function","title":"dev_scheduler.status_test/0","doc":"","ref":"dev_scheduler.html#status_test/0"},{"type":"function","title":"dev_scheduler.test_process/0","doc":"Generate a _transformed_ process message, not as they are generated \nby users. See `dev_process` for examples of AO process messages.","ref":"dev_scheduler.html#test_process/0"},{"type":"module","title":"dev_scheduler_cache","doc":"","ref":"dev_scheduler_cache.html"},{"type":"function","title":"dev_scheduler_cache.latest/2","doc":"Get the latest assignment from the cache.","ref":"dev_scheduler_cache.html#latest/2"},{"type":"function","title":"dev_scheduler_cache.list/2","doc":"Get the assignments for a process.","ref":"dev_scheduler_cache.html#list/2"},{"type":"function","title":"dev_scheduler_cache.read/3","doc":"Get an assignment message from the cache.","ref":"dev_scheduler_cache.html#read/3"},{"type":"function","title":"dev_scheduler_cache.read_location/2","doc":"Read the latest known scheduler location for an address.","ref":"dev_scheduler_cache.html#read_location/2"},{"type":"function","title":"dev_scheduler_cache.write/2","doc":"Write an assignment message into the cache.","ref":"dev_scheduler_cache.html#write/2"},{"type":"function","title":"dev_scheduler_cache.write_location/2","doc":"Write the latest known scheduler location for an address.","ref":"dev_scheduler_cache.html#write_location/2"},{"type":"module","title":"dev_scheduler_formats","doc":"This module is used by dev_scheduler in order to produce outputs that\nare compatible with various forms of AO clients. It features two main formats:\n\n- `application/json`\n- `application/http`\n\nThe `application/json` format is a legacy format that is not recommended for\nnew integrations of the AO protocol.","ref":"dev_scheduler_formats.html"},{"type":"function","title":"dev_scheduler_formats.aos2_normalize_types/1","doc":"Normalize an AOS2 formatted message to ensure that all field NAMES and\ntypes are correct. This involves converting field names to integers and\nspecific field names to their canonical form.\nNOTE: This will result in a message that is not verifiable! It is, however,\nnecessary for gaining compatibility with the AOS2-style scheduling API.","ref":"dev_scheduler_formats.html#aos2_normalize_types/1"},{"type":"function","title":"dev_scheduler_formats.aos2_to_assignment/2","doc":"Create and normalize an assignment from an AOS2-style JSON structure.\nNOTE: This method is destructive to the verifiability of the assignment.","ref":"dev_scheduler_formats.html#aos2_to_assignment/2"},{"type":"function","title":"dev_scheduler_formats.aos2_to_assignments/3","doc":"Convert an AOS2-style JSON structure to a normalized HyperBEAM\nassignments response.","ref":"dev_scheduler_formats.html#aos2_to_assignments/3"},{"type":"function","title":"dev_scheduler_formats.assignments_to_aos2/4","doc":"","ref":"dev_scheduler_formats.html#assignments_to_aos2/4"},{"type":"function","title":"dev_scheduler_formats.assignments_to_bundle/4","doc":"Generate a `GET /schedule' response for a process as HTTP-sig bundles.","ref":"dev_scheduler_formats.html#assignments_to_bundle/4"},{"type":"module","title":"dev_scheduler_registry","doc":"","ref":"dev_scheduler_registry.html"},{"type":"function","title":"dev_scheduler_registry.create_and_find_process_test/0","doc":"","ref":"dev_scheduler_registry.html#create_and_find_process_test/0"},{"type":"function","title":"dev_scheduler_registry.create_multiple_processes_test/0","doc":"","ref":"dev_scheduler_registry.html#create_multiple_processes_test/0"},{"type":"function","title":"dev_scheduler_registry.find/1","doc":"","ref":"dev_scheduler_registry.html#find/1"},{"type":"function","title":"dev_scheduler_registry.find/2","doc":"","ref":"dev_scheduler_registry.html#find/2"},{"type":"function","title":"dev_scheduler_registry.find/3","doc":"","ref":"dev_scheduler_registry.html#find/3"},{"type":"function","title":"dev_scheduler_registry.find_non_existent_process_test/0","doc":"","ref":"dev_scheduler_registry.html#find_non_existent_process_test/0"},{"type":"function","title":"dev_scheduler_registry.get_all_processes_test/0","doc":"","ref":"dev_scheduler_registry.html#get_all_processes_test/0"},{"type":"function","title":"dev_scheduler_registry.get_processes/0","doc":"","ref":"dev_scheduler_registry.html#get_processes/0"},{"type":"function","title":"dev_scheduler_registry.get_wallet/0","doc":"","ref":"dev_scheduler_registry.html#get_wallet/0"},{"type":"function","title":"dev_scheduler_registry.start/0","doc":"","ref":"dev_scheduler_registry.html#start/0"},{"type":"module","title":"dev_scheduler_server","doc":"A long-lived server that schedules messages for a process.\nIt acts as a deliberate 'bottleneck' to prevent the server accidentally\nassigning multiple messages to the same slot.","ref":"dev_scheduler_server.html"},{"type":"function","title":"dev_scheduler_server.info/1","doc":"Get the current slot from the scheduling server.","ref":"dev_scheduler_server.html#info/1"},{"type":"function","title":"dev_scheduler_server.new_proc_test_/0","doc":"Test the basic functionality of the server.","ref":"dev_scheduler_server.html#new_proc_test_/0"},{"type":"function","title":"dev_scheduler_server.schedule/2","doc":"Call the appropriate scheduling server to assign a message.","ref":"dev_scheduler_server.html#schedule/2"},{"type":"function","title":"dev_scheduler_server.start/2","doc":"Start a scheduling server for a given computation.","ref":"dev_scheduler_server.html#start/2"},{"type":"function","title":"dev_scheduler_server.stop/1","doc":"","ref":"dev_scheduler_server.html#stop/1"},{"type":"module","title":"dev_simple_pay","doc":"A simple device that allows the operator to specify a price for a\nrequest and then charge the user for it, on a per message basis.\nThe device's ledger is stored in the node message at `simple_pay_ledger`,\nand can be topped-up by either the operator, or an external device. The \nprice is specified in the node message at `simple_pay_price`.\nThis device acts as both a pricing device and a ledger device, by p4's\ndefinition.","ref":"dev_simple_pay.html"},{"type":"function","title":"dev_simple_pay.balance/3","doc":"Get the balance of a user in the ledger.","ref":"dev_simple_pay.html#balance/3"},{"type":"function","title":"dev_simple_pay.debit/3","doc":"Preprocess a request by checking the ledger and charging the user. We \ncan charge the user at this stage because we know statically what the price\nwill be","ref":"dev_simple_pay.html#debit/3"},{"type":"function","title":"dev_simple_pay.estimate/3","doc":"Estimate the cost of a request by counting the number of messages in\nthe request, then multiplying by the per-message price. The operator does\nnot pay for their own requests.","ref":"dev_simple_pay.html#estimate/3"},{"type":"function","title":"dev_simple_pay.get_balance_and_top_up_test/0","doc":"","ref":"dev_simple_pay.html#get_balance_and_top_up_test/0"},{"type":"function","title":"dev_simple_pay.topup/3","doc":"Top up the user's balance in the ledger.","ref":"dev_simple_pay.html#topup/3"},{"type":"module","title":"dev_snp","doc":"This device offers an interface for validating AMD SEV-SNP commitments,\nas well as generating them, if called in an appropriate environment.","ref":"dev_snp.html"},{"type":"function","title":"dev_snp.generate/3","doc":"Generate an commitment report and emit it as a message, including all of \nthe necessary data to generate the nonce (ephemeral node address + node\nmessage ID), as well as the expected measurement (firmware, kernel, and VMSAs\nhashes).","ref":"dev_snp.html#generate/3"},{"type":"function","title":"dev_snp.init/3","doc":"Should take in options to set for the device such as kernel, initrd, firmware,\nand append hashes and make them available to the device. Only runnable once,\nand only if the operator is not set to an address (and thus, the node has not\nhad any priviledged access).","ref":"dev_snp.html#init/3"},{"type":"function","title":"dev_snp.real_node_test/0","doc":"","ref":"dev_snp.html#real_node_test/0"},{"type":"function","title":"dev_snp.trusted/3","doc":"Default implementation of a resolver for trusted software. Searches the\n`trusted` key in the base message for a list of trusted values, and checks\nif the value in the request message is a member of that list.","ref":"dev_snp.html#trusted/3"},{"type":"function","title":"dev_snp.verify/3","doc":"Verify an commitment report message; validating the identity of a \nremote node, its ephemeral private address, and the integrity of the report.\nThe checks that must be performed to validate the report are:\n1. Verify the address and the node message ID are the same as the ones\nused to generate the nonce.\n2. Verify the address that signed the message is the same as the one used\nto generate the nonce.\n3. Verify that the debug flag is disabled.\n4. Verify that the firmware, kernel, and OS (VMSAs) hashes, part of the\nmeasurement, are trusted.\n5. Verify the measurement is valid.\n6. Verify the report's certificate chain to hardware root of trust.","ref":"dev_snp.html#verify/3"},{"type":"module","title":"dev_snp_nif","doc":"","ref":"dev_snp_nif.html"},{"type":"function","title":"dev_snp_nif.check_snp_support/0","doc":"","ref":"dev_snp_nif.html#check_snp_support/0"},{"type":"function","title":"dev_snp_nif.compute_launch_digest/1","doc":"","ref":"dev_snp_nif.html#compute_launch_digest/1"},{"type":"function","title":"dev_snp_nif.compute_launch_digest_test/0","doc":"","ref":"dev_snp_nif.html#compute_launch_digest_test/0"},{"type":"function","title":"dev_snp_nif.generate_attestation_report/2","doc":"","ref":"dev_snp_nif.html#generate_attestation_report/2"},{"type":"function","title":"dev_snp_nif.generate_attestation_report_test/0","doc":"","ref":"dev_snp_nif.html#generate_attestation_report_test/0"},{"type":"function","title":"dev_snp_nif.verify_measurement/2","doc":"","ref":"dev_snp_nif.html#verify_measurement/2"},{"type":"function","title":"dev_snp_nif.verify_measurement_test/0","doc":"","ref":"dev_snp_nif.html#verify_measurement_test/0"},{"type":"function","title":"dev_snp_nif.verify_signature/1","doc":"","ref":"dev_snp_nif.html#verify_signature/1"},{"type":"function","title":"dev_snp_nif.verify_signature_test/0","doc":"","ref":"dev_snp_nif.html#verify_signature_test/0"},{"type":"module","title":"dev_stack","doc":"A device that contains a stack of other devices, and manages their\nexecution. It can run in two modes: fold (the default), and map.\n\nIn fold mode, it runs upon input messages in the order of their keys. A\nstack maintains and passes forward a state (expressed as a message) as it\nprogresses through devices.\n\nFor example, a stack of devices as follows:\n```\nDevice -> Stack\nDevice-Stack/1/Name -> Add-One-Device\nDevice-Stack/2/Name -> Add-Two-Device'''\n\nWhen called with the message:\n```\n#{ Path = \"FuncName\", binary => <<\"0\">> }'''\n\nWill produce the output:\n ```\n#{ Path = \"FuncName\", binary => <<\"3\">> }\n{ok, #{ bin => <<\"3\">> }}'''\n\nIn map mode, the stack will run over all the devices in the stack, and\ncombine their results into a single message. Each of the devices'\noutput values have a key that is the device's name in the `Device-Stack`\n(its number if the stack is a list).\n\nYou can switch between fold and map modes by setting the `Mode` key in the\n`Msg2` to either `Fold` or `Map`, or set it globally for the stack by\nsetting the `Mode` key in the `Msg1` message. The key in `Msg2` takes\nprecedence over the key in `Msg1`.\n\nThe key that is called upon the device stack is the same key that is used\nupon the devices that are contained within it. For example, in the above\nscenario we resolve FuncName on the stack, leading FuncName to be called on\nAdd-One-Device and Add-Two-Device.\n\nA device stack responds to special statuses upon responses as follows:\n\n    `skip`: Skips the rest of the device stack for the current pass.\n\n    `pass`: Causes the stack to increment its pass number and re-execute\n            the stack from the first device, maintaining the state \n            accumulated so far. Only available in fold mode.\n\nIn all cases, the device stack will return the accumulated state to the\ncaller as the result of the call to the stack.\n\nThe dev_stack adds additional metadata to the message in order to track\nthe state of its execution as it progresses through devices. These keys\nare as follows:\n\n    `Stack-Pass`: The number of times the stack has reset and re-executed\n    from the first device for the current message.\n\n    `Input-Prefix`: The prefix that the device should use for its outputs\n    and inputs.\n\n    `Output-Prefix`: The device that was previously executed.\n\nAll counters used by the stack are initialized to 1.\n\nAdditionally, as implemented in HyperBEAM, the device stack will honor a\nnumber of options that are passed to it as keys in the message. Each of\nthese options is also passed through to the devices contained within the\nstack during execution. These options include:\n\n    `Error-Strategy`: Determines how the stack handles errors from devices.\n    See `maybe_error/5` for more information.\n\n    `Allow-Multipass`: Determines whether the stack is allowed to automatically\n    re-execute from the first device when the `pass` tag is returned. See\n    `maybe_pass/3` for more information.\n\nUnder-the-hood, dev_stack uses a `default` handler to resolve all calls to\ndevices, aside `set/2` which it calls itself to mutate the message's `device`\nkey in order to change which device is currently being executed. This method\nallows dev_stack to ensure that the message's HashPath is always correct,\neven as it delegates calls to other devices. An example flow for a `dev_stack`\nexecution is as follows:\n```\n\t/Msg1/AlicesExcitingKey ->\n\t\tdev_stack:execute ->\n\t\t\t/Msg1/Set?device=/Device-Stack/1 ->\n\t\t\t/Msg2/AlicesExcitingKey ->\n\t\t\t/Msg3/Set?device=/Device-Stack/2 ->\n\t\t\t/Msg4/AlicesExcitingKey\n\t\t\t... ->\n\t\t\t/MsgN/Set?device=[This-Device] ->\n\t\treturns {ok, /MsgN+1} ->\n\t/MsgN+1'''\n\nIn this example, the `device` key is mutated a number of times, but the\nresulting HashPath remains correct and verifiable.","ref":"dev_stack.html"},{"type":"function","title":"dev_stack.benchmark_test/0","doc":"","ref":"dev_stack.html#benchmark_test/0"},{"type":"function","title":"dev_stack.example_device_for_stack_test/0","doc":"","ref":"dev_stack.html#example_device_for_stack_test/0"},{"type":"function","title":"dev_stack.generate_append_device/1","doc":"","ref":"dev_stack.html#generate_append_device/1"},{"type":"function","title":"dev_stack.info/1","doc":"","ref":"dev_stack.html#info/1"},{"type":"function","title":"dev_stack.input_and_output_prefixes_test/0","doc":"","ref":"dev_stack.html#input_and_output_prefixes_test/0"},{"type":"function","title":"dev_stack.input_output_prefixes_passthrough_test/0","doc":"","ref":"dev_stack.html#input_output_prefixes_passthrough_test/0"},{"type":"function","title":"dev_stack.input_prefix/3","doc":"Return the input prefix for the stack.","ref":"dev_stack.html#input_prefix/3"},{"type":"function","title":"dev_stack.many_devices_test/0","doc":"","ref":"dev_stack.html#many_devices_test/0"},{"type":"function","title":"dev_stack.no_prefix_test/0","doc":"","ref":"dev_stack.html#no_prefix_test/0"},{"type":"function","title":"dev_stack.not_found_test/0","doc":"","ref":"dev_stack.html#not_found_test/0"},{"type":"function","title":"dev_stack.output_prefix/3","doc":"Return the output prefix for the stack.","ref":"dev_stack.html#output_prefix/3"},{"type":"function","title":"dev_stack.output_prefix_test/0","doc":"","ref":"dev_stack.html#output_prefix_test/0"},{"type":"function","title":"dev_stack.pass_test/0","doc":"","ref":"dev_stack.html#pass_test/0"},{"type":"function","title":"dev_stack.prefix/3","doc":"Return the default prefix for the stack.","ref":"dev_stack.html#prefix/3"},{"type":"function","title":"dev_stack.reinvocation_test/0","doc":"","ref":"dev_stack.html#reinvocation_test/0"},{"type":"function","title":"dev_stack.router/4","doc":"The device stack key router. Sends the request to `resolve_stack`,\nexcept for `set/2` which is handled by the default implementation in\n`dev_message`.","ref":"dev_stack.html#router/4"},{"type":"function","title":"dev_stack.simple_map_test/0","doc":"","ref":"dev_stack.html#simple_map_test/0"},{"type":"function","title":"dev_stack.simple_stack_execute_test/0","doc":"","ref":"dev_stack.html#simple_stack_execute_test/0"},{"type":"function","title":"dev_stack.skip_test/0","doc":"","ref":"dev_stack.html#skip_test/0"},{"type":"function","title":"dev_stack.transform_external_call_device_test/0","doc":"Ensure we can generate a transformer message that can be called to\nreturn a version of msg1 with only that device attached.","ref":"dev_stack.html#transform_external_call_device_test/0"},{"type":"function","title":"dev_stack.transform_internal_call_device_test/0","doc":"Test that the transform function can be called correctly internally\nby other functions in the module.","ref":"dev_stack.html#transform_internal_call_device_test/0"},{"type":"module","title":"dev_test","doc":"","ref":"dev_test.html"},{"type":"function","title":"dev_test.compute/3","doc":"Example implementation of a `compute` handler. Makes a running list of\nthe slots that have been computed in the state message and places the new\nslot number in the results key.","ref":"dev_test.html#compute/3"},{"type":"function","title":"dev_test.compute_test/0","doc":"","ref":"dev_test.html#compute_test/0"},{"type":"function","title":"dev_test.device_with_function_key_module_test/0","doc":"Tests the resolution of a default function.","ref":"dev_test.html#device_with_function_key_module_test/0"},{"type":"function","title":"dev_test.info/1","doc":"Exports a default_handler function that can be used to test the\nhandler resolution mechanism.","ref":"dev_test.html#info/1"},{"type":"function","title":"dev_test.init/3","doc":"Example `init/3` handler. Sets the `Already-Seen` key to an empty list.","ref":"dev_test.html#init/3"},{"type":"function","title":"dev_test.mul/2","doc":"Example implementation of an `imported` function for a WASM\nexecutor.","ref":"dev_test.html#mul/2"},{"type":"function","title":"dev_test.postprocess/3","doc":"Set the `postprocessor-called` key to true in the HTTP server.","ref":"dev_test.html#postprocess/3"},{"type":"function","title":"dev_test.restore/3","doc":"Example `restore/3` handler. Sets the hidden key `Test/Started` to the\nvalue of `Current-Slot` and checks whether the `Already-Seen` key is valid.","ref":"dev_test.html#restore/3"},{"type":"function","title":"dev_test.restore_test/0","doc":"","ref":"dev_test.html#restore_test/0"},{"type":"function","title":"dev_test.snapshot/3","doc":"Do nothing when asked to snapshot.","ref":"dev_test.html#snapshot/3"},{"type":"function","title":"dev_test.test_func/1","doc":"","ref":"dev_test.html#test_func/1"},{"type":"module","title":"dev_wasi","doc":"A virtual filesystem device.\nImplements a file-system-as-map structure, which is traversible externally.\nEach file is a binary and each directory is an AO-Core message.\nAdditionally, this module adds a series of WASI-preview-1 compatible\nfunctions for accessing the filesystem as imported functions by WASM\nmodules.","ref":"dev_wasi.html"},{"type":"function","title":"dev_wasi.basic_aos_exec_test/0","doc":"","ref":"dev_wasi.html#basic_aos_exec_test/0"},{"type":"function","title":"dev_wasi.clock_time_get/3","doc":"","ref":"dev_wasi.html#clock_time_get/3"},{"type":"function","title":"dev_wasi.compute/1","doc":"","ref":"dev_wasi.html#compute/1"},{"type":"function","title":"dev_wasi.fd_read/3","doc":"Read from a file using the WASI-p1 standard interface.","ref":"dev_wasi.html#fd_read/3"},{"type":"function","title":"dev_wasi.fd_write/3","doc":"WASM stdlib implementation of `fd_write`, using the WASI-p1 standard\ninterface.","ref":"dev_wasi.html#fd_write/3"},{"type":"function","title":"dev_wasi.init/3","doc":"On-boot, initialize the virtual file system with:\n- Empty stdio files\n- WASI-preview-1 compatible functions for accessing the filesystem\n- File descriptors for those files.","ref":"dev_wasi.html#init/3"},{"type":"function","title":"dev_wasi.path_open/3","doc":"Adds a file descriptor to the state message.","ref":"dev_wasi.html#path_open/3"},{"type":"function","title":"dev_wasi.stdout/1","doc":"Return the stdout buffer from a state message.","ref":"dev_wasi.html#stdout/1"},{"type":"function","title":"dev_wasi.vfs_is_serializable_test/0","doc":"","ref":"dev_wasi.html#vfs_is_serializable_test/0"},{"type":"function","title":"dev_wasi.wasi_stack_is_serializable_test/0","doc":"","ref":"dev_wasi.html#wasi_stack_is_serializable_test/0"},{"type":"module","title":"dev_wasm","doc":"A device that executes a WASM image on messages using the Memory-64 \npreview standard. In the backend, this device uses `beamr`: An Erlang wrapper \nfor WAMR, the WebAssembly Micro Runtime.\n\nThe device has the following requirements and interface:\n```\n    M1/Init ->\n        Assumes:\n            M1/process\n            M1/[Prefix]/image\n        Generates:\n            /priv/[Prefix]/instance\n            /priv/[Prefix]/import-resolver\n        Side-effects:\n            Creates a WASM executor loaded in memory of the HyperBEAM node.\n\n    M1/Compute ->\n        Assumes:\n            M1/priv/[Prefix]/instance\n            M1/priv/[Prefix]/import-resolver\n            M1/process\n            M2/message\n            M2/message/function OR M1/function\n            M2/message/parameters OR M1/parameters\n        Generates:\n            /results/[Prefix]/type\n            /results/[Prefix]/output\n        Side-effects:\n            Calls the WASM executor with the message and process.\n    M1/[Prefix]/state ->\n        Assumes:\n            M1/priv/[Prefix]/instance\n        Generates:\n            Raw binary WASM state\n'''","ref":"dev_wasm.html"},{"type":"function","title":"dev_wasm.basic_execution_64_test/0","doc":"","ref":"dev_wasm.html#basic_execution_64_test/0"},{"type":"function","title":"dev_wasm.basic_execution_test/0","doc":"","ref":"dev_wasm.html#basic_execution_test/0"},{"type":"function","title":"dev_wasm.benchmark_test/0","doc":"","ref":"dev_wasm.html#benchmark_test/0"},{"type":"function","title":"dev_wasm.cache_wasm_image/1","doc":"","ref":"dev_wasm.html#cache_wasm_image/1"},{"type":"function","title":"dev_wasm.cache_wasm_image/2","doc":"","ref":"dev_wasm.html#cache_wasm_image/2"},{"type":"function","title":"dev_wasm.compute/3","doc":"Call the WASM executor with a message that has been prepared by a prior\npass.","ref":"dev_wasm.html#compute/3"},{"type":"function","title":"dev_wasm.import/3","doc":"Handle standard library calls by:\n1. Adding the right prefix to the path from BEAMR.\n2. Adding the state to the message at the stdlib path.\n3. Resolving the adjusted-path-Msg2 against the added-state-Msg1.\n4. If it succeeds, return the new state from the message.\n5. If it fails with `not_found`, call the stub handler.","ref":"dev_wasm.html#import/3"},{"type":"function","title":"dev_wasm.imported_function_test/0","doc":"","ref":"dev_wasm.html#imported_function_test/0"},{"type":"function","title":"dev_wasm.info/2","doc":"Export all functions aside the `instance/3` function.","ref":"dev_wasm.html#info/2"},{"type":"function","title":"dev_wasm.init/3","doc":"Boot a WASM image on the image stated in the `process/image` field of\nthe message.","ref":"dev_wasm.html#init/3"},{"type":"function","title":"dev_wasm.init_test/0","doc":"","ref":"dev_wasm.html#init_test/0"},{"type":"function","title":"dev_wasm.input_prefix_test/0","doc":"","ref":"dev_wasm.html#input_prefix_test/0"},{"type":"function","title":"dev_wasm.instance/3","doc":"Get the WASM instance from the message. Note that this function is exported\nsuch that other devices can use it, but it is excluded from calls from AO-Core\nresolution directly.","ref":"dev_wasm.html#instance/3"},{"type":"function","title":"dev_wasm.normalize/3","doc":"Normalize the message to have an open WASM instance, but no literal\n`State` key. Ensure that we do not change the hashpath during this process.","ref":"dev_wasm.html#normalize/3"},{"type":"function","title":"dev_wasm.process_prefixes_test/0","doc":"Test that realistic prefixing for a `dev_process` works --\nincluding both inputs (from `Process/`) and outputs (to the \nDevice-Key) work","ref":"dev_wasm.html#process_prefixes_test/0"},{"type":"function","title":"dev_wasm.snapshot/3","doc":"Serialize the WASM state to a binary.","ref":"dev_wasm.html#snapshot/3"},{"type":"function","title":"dev_wasm.state_export_and_restore_test/0","doc":"","ref":"dev_wasm.html#state_export_and_restore_test/0"},{"type":"function","title":"dev_wasm.terminate/3","doc":"Tear down the WASM executor.","ref":"dev_wasm.html#terminate/3"},{"type":"module","title":"hb","doc":"Hyperbeam is a decentralized node implementing the AO-Core protocol\non top of Arweave.\n\nThis protocol offers a computation layer for executing arbitrary logic on \ntop of the network's data.\n\nArweave is built to offer a robust, permanent storage layer for static data\nover time. It can be seen as a globally distributed key-value store that\nallows users to lookup IDs to retrieve data at any point in time:\n\n\t`Arweave(ID) => Message`\n\nHyperbeam adds another layer of functionality on top of Arweave's protocol:\nAllowing users to store and retrieve not only arbitrary bytes, but also to\nperform execution of computation upon that data:\n\n\t`Hyperbeam(Message1, Message2) => Message3`\n\nWhen Hyperbeam executes a message, it will return a new message containing\nthe result of that execution, as well as signed commitments of its\ncorrectness. If the computation that is executed is deterministic, recipients\nof the new message are able to verify that the computation was performed\ncorrectly. The new message may be stored back to Arweave if desired,\nforming a permanent, verifiable, and decentralized log of computation.\n\nThe mechanisms described above form the basis of a decentralized and\nverifiable compute engine without any relevant protocol-enforced\nscalability limits. It is an implementation of a global, shared\nsupercomputer.\n\nHyperbeam can be used for an extremely large variety of applications, from\nserving static Arweave data with signed commitments of correctness, to\nexecuting smart contracts that have _built-in_ HTTP APIs. The Hyperbeam\nnode implementation implements AO, an Actor-Oriented process-based\nenvironment for orchestrating computation over Arweave messages in order to\nfacilitate the execution of more traditional, consensus-based smart\ncontracts.\n\nThe core abstractions of the Hyperbeam node are broadly as follows:\n\n1. The `hb` and `hb_opts` modules manage the node's configuration, \n   environment variables, and debugging tools.\n\n2. The `hb_http` and `hb_http_server` modules manage all HTTP-related\n   functionality. `hb_http_server` handles turning received HTTP requests\n   into messages and applying those messages with the appropriate devices.\n   `hb_http` handles making requests and responding with messages. `cowboy`\n   is used to implement the underlying HTTP server.\n\n3. `hb_ao` implements the computation logic of the node: A mechanism\n   for resolving messages to other messages, via the application of logic\n   implemented in `devices`. `hb_ao` also manages the loading of Erlang\n   modules for each device into the node's environment. There are many\n   different default devices implemented in the hyperbeam node, using the\n   namespace `dev_*`. Some of the critical components are:\n\n    - `dev_message`: The default handler for all messages that do not \n     specify their own device. The message device is also used to resolve\n     keys that are not implemented by the device specified in a message,\n     unless otherwise signalled.\n\n   - `dev_stack`: The device responsible for creating and executing stacks\n     of other devices on messages that request it. There are many uses for\n     this device, one of which is the resolution of AO processes.\n\n   - `dev_p4`: The device responsible for managing payments for the services\n     provided by the node.\n\n4. `hb_store`, `hb_cache` and the store implementations forms a layered\n   system for managing the node's access to persistent storage. `hb_cache`\n   is used as a resolution mechanism for reading and writing messages, while\n   `hb_store` provides an abstraction over the underlying persistent key-value\n   byte storage mechanisms. Example `hb_store` mechanisms can be found in\n   `hb_store_fs` and `hb_store_remote_node`.\n\n5. `ar_*` modules implement functionality related to the base-layer Arweave\n   protocol and are largely unchanged from their counterparts in the Arweave\n   node codebase presently maintained by the Digital History Association\n   (@dha-team/Arweave).\n\nYou can find documentation of a similar form to this note in each of the core\nmodules of the hyperbeam node.","ref":"hb.html"},{"type":"function","title":"hb.address/0","doc":"Get the address of a wallet. Defaults to the address of the wallet\nspecified by the `priv_key_location` configuration key. It can also take a\nwallet tuple as an argument.","ref":"hb.html#address/0"},{"type":"function","title":"hb.benchmark/2","doc":"Run a function as many times as possible in a given amount of time.","ref":"hb.html#benchmark/2"},{"type":"function","title":"hb.benchmark/3","doc":"Run multiple instances of a function in parallel for a given amount of time.","ref":"hb.html#benchmark/3"},{"type":"function","title":"hb.build/0","doc":"Utility function to hot-recompile and load the hyperbeam environment.","ref":"hb.html#build/0"},{"type":"function","title":"hb.debug_wait/4","doc":"Utility function to wait for a given amount of time, printing a debug\nmessage to the console first.","ref":"hb.html#debug_wait/4"},{"type":"function","title":"hb.init/0","doc":"Initialize system-wide settings for the hyperbeam node.","ref":"hb.html#init/0"},{"type":"function","title":"hb.no_prod/3","doc":"Utility function to throw an error if the current mode is prod and\nnon-prod ready code is being executed. You can find these in the codebase\nby looking for ?NO_PROD calls.","ref":"hb.html#no_prod/3"},{"type":"function","title":"hb.now/0","doc":"Utility function to get the current time in milliseconds.","ref":"hb.html#now/0"},{"type":"function","title":"hb.profile/1","doc":"Utility function to start a profiling session and run a function,\nthen analyze the results. Obviously -- do not use in production.","ref":"hb.html#profile/1"},{"type":"function","title":"hb.read/1","doc":"Debugging function to read a message from the cache.\nSpecify either a scope atom (local or remote) or a store tuple\nas the second argument.","ref":"hb.html#read/1"},{"type":"function","title":"hb.read/2","doc":"","ref":"hb.html#read/2"},{"type":"function","title":"hb.start_mainnet/0","doc":"Start a mainnet server without payments.","ref":"hb.html#start_mainnet/0"},{"type":"function","title":"hb.start_mainnet/1","doc":"","ref":"hb.html#start_mainnet/1"},{"type":"function","title":"hb.start_simple_pay/0","doc":"Start a server with a `simple-pay@1.0` pre-processor.","ref":"hb.html#start_simple_pay/0"},{"type":"function","title":"hb.start_simple_pay/1","doc":"","ref":"hb.html#start_simple_pay/1"},{"type":"function","title":"hb.start_simple_pay/2","doc":"","ref":"hb.html#start_simple_pay/2"},{"type":"function","title":"hb.topup/3","doc":"Helper for topping up a user's balance on a simple-pay node.","ref":"hb.html#topup/3"},{"type":"function","title":"hb.topup/4","doc":"","ref":"hb.html#topup/4"},{"type":"function","title":"hb.wallet/0","doc":"","ref":"hb.html#wallet/0"},{"type":"function","title":"hb.wallet/1","doc":"","ref":"hb.html#wallet/1"},{"type":"module","title":"hb_ao","doc":"This module is the root of the device call logic of the \nAO-Core protocol in HyperBEAM.\n\nAt the implementation level, every message is simply a collection of keys,\ndictated by its `Device`, that can be resolved in order to yield their\nvalues. Each key may return another message or a raw value:\n\n\t`ao(Message1, Message2) -> {Status, Message3}'\n\nUnder-the-hood, `AO-Core(Message1, Message2)' leads to the evaluation of\n`DeviceMod:PathPart(Message1, Message2)', which defines the user compute\nto be performed. If `Message1` does not specify a device, `dev_message` is\nassumed. The key to resolve is specified by the `Path` field of the message.\n\nAfter each output, the `HashPath` is updated to include the `Message2`\nthat was executed upon it.\n\nBecause each message implies a device that can resolve its keys, as well\nas generating a merkle tree of the computation that led to the result,\nyou can see AO-Core protocol as a system for cryptographically chaining \nthe execution of `combinators`. See `docs/ao-core-protocol.md` for more \ninformation about AO-Core.\n\nThe `Fun(Message1, Message2)' pattern is repeated throughout the HyperBEAM \ncodebase, sometimes with `MessageX` replaced with `MX` or `MsgX` for brevity.\n\nMessage3 can be either a new message or a raw output value (a binary, integer,\nfloat, atom, or list of such values).\n\nDevices can be expressed as either modules or maps. They can also be \nreferenced by an Arweave ID, which can be used to load a device from \nthe network (depending on the value of the `load_remote_devices` and \n`trusted_device_signers` environment settings).\n\nHyperBEAM device implementations are defined as follows:\n```\n    DevMod:ExportedFunc : Key resolution functions. All are assumed to be\n                          device keys (thus, present in every message that\n                          uses it) unless specified by `DevMod:info()`.\n                          Each function takes a set of parameters\n                          of the form `DevMod:KeyHandler(Msg1, Msg2, Opts)'.\n                          Each of these arguments can be ommitted if not\n                          needed. Non-exported functions are not assumed\n                          to be device keys.\n\n    DevMod:info : Optional. Returns a map of options for the device. All \n                  options are optional and assumed to be the defaults if \n                  not specified. This function can accept a `Message1` as \n                  an argument, allowing it to specify its functionality \n                  based on a specific message if appropriate.\n\n    info/exports : Overrides the export list of the Erlang module, such that\n                  only the functions in this list are assumed to be device\n                  keys. Defaults to all of the functions that DevMod \n                  exports in the Erlang environment.\n\n    info/excludes : A list of keys that should not be resolved by the device,\n                    despite being present in the Erlang module exports list.\n\n    info/handler : A function that should be used to handle _all_ keys for \n                   messages using the device.\n\n    info/default : A function that should be used to handle all keys that\n                   are not explicitly implemented by the device. Defaults to\n                   the `dev_message` device, which contains general keys for \n                   interacting with messages.\n\n    info/default_mod : A different device module that should be used to\n                   handle all keys that are not explicitly implemented\n                   by the device. Defaults to the `dev_message` device.\n\n    info/grouper : A function that returns the concurrency 'group' name for\n                   an execution. Executions with the same group name will\n                   be executed by sending a message to the associated process\n                   and waiting for a response. This allows you to control \n                   concurrency of execution and to allow executions to share\n                   in-memory state as applicable. Default: A derivation of\n                   Msg1+Msg2. This means that concurrent calls for the same\n                   output will lead to only a single execution.\n\n    info/worker : A function that should be run as the 'server' loop of\n                  the executor for interactions using the device.\n\nThe HyperBEAM resolver also takes a number of runtime options that change\nthe way that the environment operates:\n\n`update_hashpath`:  Whether to add the `Msg2` to `HashPath` for the `Msg3`.\n\t\t\t\t\tDefault: true.\n`add_key`:          Whether to add the key to the start of the arguments.\n\t\t\t\t\tDefault: ` '.\n'''","ref":"hb_ao.html"},{"type":"function","title":"hb_ao.deep_set/4","doc":"Recursively search a map, resolving keys, and set the value of the key\nat the given path.","ref":"hb_ao.html#deep_set/4"},{"type":"function","title":"hb_ao.find_exported_function/5","doc":"Find the function with the highest arity that has the given name, if it\nexists.\nIf the device is a module, we look for a function with the given name.\nIf the device is a map, we look for a key in the map. First we try to find\nthe key using its literal value. If that fails, we cast the key to an atom\nand try again.","ref":"hb_ao.html#find_exported_function/5"},{"type":"function","title":"hb_ao.force_message/2","doc":"","ref":"hb_ao.html#force_message/2"},{"type":"function","title":"hb_ao.get/2","doc":"Shortcut for resolving a key in a message without its status if it is\n`ok`. This makes it easier to write complex logic on top of messages while\nmaintaining a functional style.\nAdditionally, this function supports the `{as, Device, Msg}' syntax, which\nallows the key to be resolved using another device to resolve the key,\nwhile maintaining the tracability of the `HashPath` of the output message.\n\nReturns the value of the key if it is found, otherwise returns the default\nprovided by the user, or `not_found` if no default is provided.","ref":"hb_ao.html#get/2"},{"type":"function","title":"hb_ao.get/3","doc":"","ref":"hb_ao.html#get/3"},{"type":"function","title":"hb_ao.get/4","doc":"","ref":"hb_ao.html#get/4"},{"type":"function","title":"hb_ao.get_first/2","doc":"take a sequence of base messages and paths, then return the value of the\nfirst message that can be resolved using a path.","ref":"hb_ao.html#get_first/2"},{"type":"function","title":"hb_ao.get_first/3","doc":"","ref":"hb_ao.html#get_first/3"},{"type":"function","title":"hb_ao.info/2","doc":"Get the info map for a device, optionally giving it a message if the\ndevice's info function is parameterized by one.","ref":"hb_ao.html#info/2"},{"type":"function","title":"hb_ao.is_exported/4","doc":"Check if a device is guarding a key via its `exports` list. Defaults to\ntrue if the device does not specify an `exports` list. The `info` function is\nalways exported, if it exists. Elements of the `exludes` list are not\nexported. Note that we check for info _twice_ -- once when the device is\ngiven but the info result is not, and once when the info result is given.\nThe reason for this is that `info/3` calls other functions that may need to\ncheck if a key is exported, so we must avoid infinite loops. We must, however,\nalso return a consistent result in the case that only the info result is\ngiven, so we check for it in both cases.","ref":"hb_ao.html#is_exported/4"},{"type":"function","title":"hb_ao.keys/1","doc":"Shortcut to get the list of keys from a message.","ref":"hb_ao.html#keys/1"},{"type":"function","title":"hb_ao.keys/2","doc":"","ref":"hb_ao.html#keys/2"},{"type":"function","title":"hb_ao.keys/3","doc":"","ref":"hb_ao.html#keys/3"},{"type":"function","title":"hb_ao.load_device/2","doc":"Load a device module from its name or a message ID.\nReturns {ok, Executable} where Executable is the device module. On error,\na tuple of the form {error, Reason} is returned.","ref":"hb_ao.html#load_device/2"},{"type":"function","title":"hb_ao.message_to_device/2","doc":"Extract the device module from a message.","ref":"hb_ao.html#message_to_device/2"},{"type":"function","title":"hb_ao.message_to_fun/3","doc":"Calculate the Erlang function that should be called to get a value for\na given key from a device.\nThis comes in 7 forms:\n1. The message does not specify a device, so we use the default device.\n2. The device has a `handler` key in its `Dev:info()` map, which is a\nfunction that takes a key and returns a function to handle that key. We pass\nthe key as an additional argument to this function.\n3. The device has a function of the name `Key`, which should be called\ndirectly.\n4. The device does not implement the key, but does have a default handler\nfor us to call. We pass it the key as an additional argument.\n5. The device does not implement the key, and has no default handler. We use\nthe default device to handle the key.\nError: If the device is specified, but not loadable, we raise an error.\nReturns {ok | add_key, Fun} where Fun is the function to call, and add_key\nindicates that the key should be added to the start of the call's arguments.","ref":"hb_ao.html#message_to_fun/3"},{"type":"function","title":"hb_ao.normalize_key/1","doc":"Convert a key to a binary in normalized form.","ref":"hb_ao.html#normalize_key/1"},{"type":"function","title":"hb_ao.normalize_key/2","doc":"","ref":"hb_ao.html#normalize_key/2"},{"type":"function","title":"hb_ao.normalize_keys/1","doc":"Ensure that a message is processable by the AO-Core resolver: No lists.","ref":"hb_ao.html#normalize_keys/1"},{"type":"function","title":"hb_ao.remove/2","doc":"Remove a key from a message, using its underlying device.","ref":"hb_ao.html#remove/2"},{"type":"function","title":"hb_ao.remove/3","doc":"","ref":"hb_ao.html#remove/3"},{"type":"function","title":"hb_ao.resolve/2","doc":"Get the value of a message's key by running its associated device\nfunction. Optionally, takes options that control the runtime environment. \nThis function returns the raw result of the device function call:\n`{ok | error, NewMessage}.'\nThe resolver is composed of a series of discrete phases:\n      1: Normalization.\n      2: Cache lookup.\n      3: Validation check.\n      4: Persistent-resolver lookup.\n      5: Device lookup.\n      6: Execution.\n      7: Cryptographic linking.\n      8: Result caching.\n      9: Notify waiters.\n     10: Fork worker.\n     11: Recurse or terminate.","ref":"hb_ao.html#resolve/2"},{"type":"function","title":"hb_ao.resolve/3","doc":"","ref":"hb_ao.html#resolve/3"},{"type":"function","title":"hb_ao.resolve_many/2","doc":"Resolve a list of messages in sequence. Take the output of the first\nmessage as the input for the next message. Once the last message is resolved,\nreturn the result.\nA `resolve_many` call with only a single ID will attempt to read the message\ndirectly from the store. No execution is performed.","ref":"hb_ao.html#resolve_many/2"},{"type":"function","title":"hb_ao.set/2","doc":"Shortcut for setting a key in the message using its underlying device.\nLike the `get/3` function, this function honors the `error_strategy` option.\n`set` works with maps and recursive paths while maintaining the appropriate\n`HashPath` for each step.","ref":"hb_ao.html#set/2"},{"type":"function","title":"hb_ao.set/3","doc":"","ref":"hb_ao.html#set/3"},{"type":"function","title":"hb_ao.set/4","doc":"","ref":"hb_ao.html#set/4"},{"type":"function","title":"hb_ao.truncate_args/2","doc":"Truncate the arguments of a function to the number of arguments it\nactually takes.","ref":"hb_ao.html#truncate_args/2"},{"type":"module","title":"hb_ao_test_vectors","doc":"Uses a series of different `Opts` values to test the resolution engine's \nexecution under different circumstances.","ref":"hb_ao_test_vectors.html"},{"type":"function","title":"hb_ao_test_vectors.deep_set_new_messages_test/0","doc":"","ref":"hb_ao_test_vectors.html#deep_set_new_messages_test/0"},{"type":"function","title":"hb_ao_test_vectors.load_device_test/0","doc":"","ref":"hb_ao_test_vectors.html#load_device_test/0"},{"type":"function","title":"hb_ao_test_vectors.run_all_test_/0","doc":"Run each test in the file with each set of options. Start and reset\nthe store for each test.","ref":"hb_ao_test_vectors.html#run_all_test_/0"},{"type":"function","title":"hb_ao_test_vectors.run_test/0","doc":"","ref":"hb_ao_test_vectors.html#run_test/0"},{"type":"function","title":"hb_ao_test_vectors.untrusted_load_device_test/0","doc":"","ref":"hb_ao_test_vectors.html#untrusted_load_device_test/0"},{"type":"module","title":"hb_app","doc":"The main HyperBEAM application module.","ref":"hb_app.html"},{"type":"function","title":"hb_app.start/2","doc":"","ref":"hb_app.html#start/2"},{"type":"function","title":"hb_app.stop/1","doc":"","ref":"hb_app.html#stop/1"},{"type":"module","title":"hb_beamr","doc":"BEAMR: A WAMR wrapper for BEAM.\n\nBeamr is a library that allows you to run WASM modules in BEAM, using the\nWebassembly Micro Runtime (WAMR) as its engine. Each WASM module is \nexecuted using a Linked-In Driver (LID) that is loaded into BEAM. It is\ndesigned with a focus on supporting long-running WASM executions that \ninteract with Erlang functions and processes easily.\n\nBecause each WASM module runs as an independent async worker, if you plan\nto run many instances in parallel, you should be sure to configure the \nBEAM to have enough async worker threads enabled (see `erl +A N` in the\nErlang manuals).\n\nThe core API is simple:\n```\n    start(WasmBinary) -> {ok, Port, Imports, Exports}\n        Where:\n            WasmBinary is the WASM binary to load.\n            Port is the port to the LID.\n            Imports is a list of tuples of the form {Module, Function,\n                Args, Signature}.\n            Exports is a list of tuples of the form {Function, Args,\n                Signature}.\n    stop(Port) -> ok\n    call(Port, FunctionName, Args) -> {ok, Result}\n        Where:\n            FunctionName is the name of the function to call.\n            Args is a list of Erlang terms (converted to WASM values by\n                BEAMR) that match the signature of the function.\n            Result is a list of Erlang terms (converted from WASM values).\n    call(Port, FunName, Args[, Import, State, Opts]) -> {ok, Res, NewState}\n        Where:\n            ImportFun is a function that will be called upon each import.\n            ImportFun must have an arity of 2: Taking an arbitrary `state`\n            term, and a map containing the `port`, `module`, `func`, `args`,\n            `signature`, and the `options` map of the import.\n            It must return a tuple of the form {ok, Response, NewState}.\n    serialize(Port) -> {ok, Mem}\n        Where:\n            Port is the port to the LID.\n            Mem is a binary representing the full WASM state.\n    deserialize(Port, Mem) -> ok\n        Where:\n            Port is the port to the LID.\n            Mem is a binary output of a previous `serialize/1` call.\n'''\n\nBEAMR was designed for use in the HyperBEAM project, but is suitable for\ndeployment in other Erlang applications that need to run WASM modules. PRs\nare welcome.","ref":"hb_beamr.html"},{"type":"function","title":"hb_beamr.benchmark_test/0","doc":"","ref":"hb_beamr.html#benchmark_test/0"},{"type":"function","title":"hb_beamr.call/3","doc":"Call a function in the WASM executor (see moduledoc for more details).","ref":"hb_beamr.html#call/3"},{"type":"function","title":"hb_beamr.call/4","doc":"","ref":"hb_beamr.html#call/4"},{"type":"function","title":"hb_beamr.call/5","doc":"","ref":"hb_beamr.html#call/5"},{"type":"function","title":"hb_beamr.call/6","doc":"","ref":"hb_beamr.html#call/6"},{"type":"function","title":"hb_beamr.deserialize/2","doc":"Deserialize a WASM state from a binary.","ref":"hb_beamr.html#deserialize/2"},{"type":"function","title":"hb_beamr.driver_loads_test/0","doc":"","ref":"hb_beamr.html#driver_loads_test/0"},{"type":"function","title":"hb_beamr.imported_function_test/0","doc":"Test that imported functions can be called from the WASM module.","ref":"hb_beamr.html#imported_function_test/0"},{"type":"function","title":"hb_beamr.multiclient_test/0","doc":"Ensure that processes outside of the initial one can interact with\nthe WASM executor.","ref":"hb_beamr.html#multiclient_test/0"},{"type":"function","title":"hb_beamr.serialize/1","doc":"Serialize the WASM state to a binary.","ref":"hb_beamr.html#serialize/1"},{"type":"function","title":"hb_beamr.simple_wasm_test/0","doc":"Test standalone `hb_beamr` correctly after loading a WASM module.","ref":"hb_beamr.html#simple_wasm_test/0"},{"type":"function","title":"hb_beamr.start/1","doc":"Start a WASM executor context. Yields a port to the LID, and the\nimports and exports of the WASM module. Optionally, specify a mode \n(wasm or aot) to indicate the type of WASM module being loaded.","ref":"hb_beamr.html#start/1"},{"type":"function","title":"hb_beamr.start/2","doc":"","ref":"hb_beamr.html#start/2"},{"type":"function","title":"hb_beamr.stop/1","doc":"Stop a WASM executor context.","ref":"hb_beamr.html#stop/1"},{"type":"function","title":"hb_beamr.stub/3","doc":"Stub import function for the WASM executor.","ref":"hb_beamr.html#stub/3"},{"type":"function","title":"hb_beamr.wasm64_test/0","doc":"Test that WASM Memory64 modules load and execute correctly.","ref":"hb_beamr.html#wasm64_test/0"},{"type":"function","title":"hb_beamr.wasm_send/2","doc":"","ref":"hb_beamr.html#wasm_send/2"},{"type":"module","title":"hb_beamr_io","doc":"Simple interface for memory management for Beamr instances.\nIt allows for reading and writing to memory, as well as allocating and \nfreeing memory by calling the WASM module's exported malloc and free\nfunctions.\n\nUnlike the majority of HyperBEAM modules, this module takes a defensive\napproach to type checking, breaking from the conventional Erlang style, \nsuch that failures are caught in the Erlang-side of functions rather than\nin the C/WASM-side.","ref":"hb_beamr_io.html"},{"type":"function","title":"hb_beamr_io.free/2","doc":"Free space allocated in the Beamr instance's native memory via a\ncall to the exported free function from the WASM.","ref":"hb_beamr_io.html#free/2"},{"type":"function","title":"hb_beamr_io.malloc/2","doc":"Allocate space for (via an exported malloc function from the WASM) in \nthe Beamr instance's native memory.","ref":"hb_beamr_io.html#malloc/2"},{"type":"function","title":"hb_beamr_io.malloc_test/0","doc":"Test allocating and freeing memory.","ref":"hb_beamr_io.html#malloc_test/0"},{"type":"function","title":"hb_beamr_io.read/3","doc":"Read a binary from the Beamr instance's native memory at a given offset\nand of a given size.","ref":"hb_beamr_io.html#read/3"},{"type":"function","title":"hb_beamr_io.read_string/2","doc":"Simple helper function to read a string from the Beamr instance's native\nmemory at a given offset. Memory is read by default in chunks of 8 bytes,\nbut this can be overridden by passing a different chunk size. Strings are \nassumed to be null-terminated.","ref":"hb_beamr_io.html#read_string/2"},{"type":"function","title":"hb_beamr_io.read_test/0","doc":"Test reading memory in and out of bounds.","ref":"hb_beamr_io.html#read_test/0"},{"type":"function","title":"hb_beamr_io.size/1","doc":"Get the size (in bytes) of the native memory allocated in the Beamr\ninstance. Note that WASM memory can never be reduced once granted to an\ninstance (although it can, of course, be reallocated _inside_ the \nenvironment).","ref":"hb_beamr_io.html#size/1"},{"type":"function","title":"hb_beamr_io.size_test/0","doc":"","ref":"hb_beamr_io.html#size_test/0"},{"type":"function","title":"hb_beamr_io.string_write_and_read_test/0","doc":"Write and read strings to memory.","ref":"hb_beamr_io.html#string_write_and_read_test/0"},{"type":"function","title":"hb_beamr_io.write/3","doc":"Write a binary to the Beamr instance's native memory at a given offset.","ref":"hb_beamr_io.html#write/3"},{"type":"function","title":"hb_beamr_io.write_string/2","doc":"Simple helper function to allocate space for (via malloc) and write a\nstring to the Beamr instance's native memory. This can be helpful for easily\npushing a string into the instance, such that the resulting pointer can be\npassed to exported functions from the instance.\nAssumes that the input is either an iolist or a binary, adding a null byte\nto the end of the string.","ref":"hb_beamr_io.html#write_string/2"},{"type":"function","title":"hb_beamr_io.write_test/0","doc":"Test writing memory in and out of bounds.","ref":"hb_beamr_io.html#write_test/0"},{"type":"module","title":"hb_cache","doc":"A cache of AO-Core protocol messages and compute results.\n\nHyperBEAM stores all paths in key value stores, abstracted by the `hb_store`\nmodule. Each store has its own storage backend, but each works with simple\nkey-value pairs. Each store can write binary keys at paths, and link between\npaths.\n\nThere are three layers to HyperBEAMs internal data representation on-disk:\n\n1. The raw binary data, written to the store at the hash of the content.\n   Storing binary paths in this way effectively deduplicates the data.\n2. The hashpath-graph of all content, stored as a set of links between\n   hashpaths, their keys, and the data that underlies them. This allows\n   all messages to share the same hashpath space, such that all requests\n   from users additively fill-in the hashpath space, minimizing duplicated\n   compute.\n3. Messages, referrable by their IDs (committed or uncommitted). These are\n   stored as a set of links commitment IDs and the uncommitted message.\n\nBefore writing a message to the store, we convert it to Type-Annotated\nBinary Messages (TABMs), such that each of the keys in the message is\neither a map or a direct binary.","ref":"hb_cache.html"},{"type":"function","title":"hb_cache.cache_suite_test_/0","doc":"","ref":"hb_cache.html#cache_suite_test_/0"},{"type":"function","title":"hb_cache.link/3","doc":"Make a link from one path to another in the store.\nNote: Argument order is `link(Src, Dst, Opts)'.","ref":"hb_cache.html#link/3"},{"type":"function","title":"hb_cache.list/2","doc":"List all items under a given path.","ref":"hb_cache.html#list/2"},{"type":"function","title":"hb_cache.list_numbered/2","doc":"List all items in a directory, assuming they are numbered.","ref":"hb_cache.html#list_numbered/2"},{"type":"function","title":"hb_cache.read/2","doc":"Read the message at a path. Returns in `structured@1.0` format: Either a\nrichly typed map or a direct binary.","ref":"hb_cache.html#read/2"},{"type":"function","title":"hb_cache.read_resolved/3","doc":"Read the output of a prior computation, given Msg1, Msg2, and some\noptions.","ref":"hb_cache.html#read_resolved/3"},{"type":"function","title":"hb_cache.run_test/0","doc":"","ref":"hb_cache.html#run_test/0"},{"type":"function","title":"hb_cache.test_device_map_cannot_be_written_test/0","doc":"Test that message whose device is `#{}` cannot be written. If it were to\nbe written, it would cause an infinite loop.","ref":"hb_cache.html#test_device_map_cannot_be_written_test/0"},{"type":"function","title":"hb_cache.test_signed/1","doc":"","ref":"hb_cache.html#test_signed/1"},{"type":"function","title":"hb_cache.test_unsigned/1","doc":"","ref":"hb_cache.html#test_unsigned/1"},{"type":"function","title":"hb_cache.write/2","doc":"Write a message to the cache. For raw binaries, we write the data at\nthe hashpath of the data (by default the SHA2-256 hash of the data). We link\nthe unattended ID's hashpath for the keys (including `/commitments`) on the\nmessage to the underlying data and recurse. We then link each commitment ID\nto the uncommitted message, such that any of the committed or uncommitted IDs\ncan be read, and once in memory all of the commitments are available. For\ndeep messages, the commitments will also be read, such that the ID of the\nouter message (which does not include its commitments) will be built upon\nthe commitments of the inner messages. We do not, however, store the IDs from\ncommitments on signed _inner_ messages. We may wish to revisit this.","ref":"hb_cache.html#write/2"},{"type":"function","title":"hb_cache.write_binary/3","doc":"Write a raw binary keys into the store and link it at a given hashpath.","ref":"hb_cache.html#write_binary/3"},{"type":"function","title":"hb_cache.write_hashpath/2","doc":"Write a hashpath and its message to the store and link it.","ref":"hb_cache.html#write_hashpath/2"},{"type":"module","title":"hb_cache_control","doc":"Cache control logic for the AO-Core resolver. It derives cache settings\nfrom request, response, execution-local node Opts, as well as the global\nnode Opts. It applies these settings when asked to maybe store/lookup in \nresponse to a request.","ref":"hb_cache_control.html"},{"type":"function","title":"hb_cache_control.cache_binary_result_test/0","doc":"","ref":"hb_cache_control.html#cache_binary_result_test/0"},{"type":"function","title":"hb_cache_control.cache_message_result_test/0","doc":"","ref":"hb_cache_control.html#cache_message_result_test/0"},{"type":"function","title":"hb_cache_control.empty_message_list_test/0","doc":"","ref":"hb_cache_control.html#empty_message_list_test/0"},{"type":"function","title":"hb_cache_control.hashpath_ignore_prevents_storage_test/0","doc":"","ref":"hb_cache_control.html#hashpath_ignore_prevents_storage_test/0"},{"type":"function","title":"hb_cache_control.maybe_lookup/3","doc":"Handles cache lookup, modulated by the caching options requested by\nthe user. Honors the following `Opts` cache keys: \n     `only_if_cached`: If set and we do not find a result in the cache,\n                       return an error with a `Cache-Status` of `miss` and\n                       a 504 `Status`.\n     `no_cache`:       If set, the cached values are never used. Returns\n                       `continue` to the caller.","ref":"hb_cache_control.html#maybe_lookup/3"},{"type":"function","title":"hb_cache_control.maybe_store/4","doc":"Write a resulting M3 message to the cache if requested. The precedence\norder of cache control sources is as follows:\n1. The `Opts` map (letting the node operator have the final say).\n2. The `Msg3` results message (granted by Msg1's device).\n3. The `Msg2` message (the user's request).\nMsg1 is not used, such that it can specify cache control information about \nitself, without affecting its outputs.","ref":"hb_cache_control.html#maybe_store/4"},{"type":"function","title":"hb_cache_control.message_source_cache_control_test/0","doc":"","ref":"hb_cache_control.html#message_source_cache_control_test/0"},{"type":"function","title":"hb_cache_control.message_without_cache_control_test/0","doc":"","ref":"hb_cache_control.html#message_without_cache_control_test/0"},{"type":"function","title":"hb_cache_control.msg_precidence_overrides_test/0","doc":"","ref":"hb_cache_control.html#msg_precidence_overrides_test/0"},{"type":"function","title":"hb_cache_control.multiple_directives_test/0","doc":"","ref":"hb_cache_control.html#multiple_directives_test/0"},{"type":"function","title":"hb_cache_control.no_cache_directive_test/0","doc":"","ref":"hb_cache_control.html#no_cache_directive_test/0"},{"type":"function","title":"hb_cache_control.no_store_directive_test/0","doc":"","ref":"hb_cache_control.html#no_store_directive_test/0"},{"type":"function","title":"hb_cache_control.only_if_cached_directive_test/0","doc":"","ref":"hb_cache_control.html#only_if_cached_directive_test/0"},{"type":"function","title":"hb_cache_control.opts_override_message_settings_test/0","doc":"","ref":"hb_cache_control.html#opts_override_message_settings_test/0"},{"type":"function","title":"hb_cache_control.opts_source_cache_control_test/0","doc":"","ref":"hb_cache_control.html#opts_source_cache_control_test/0"},{"type":"module","title":"hb_cache_render","doc":"A module that helps to render given Key graphs into the .dot files","ref":"hb_cache_render.html"},{"type":"function","title":"hb_cache_render.cache_path_to_dot/2","doc":"Generate a dot file from a cache path and options/store","ref":"hb_cache_render.html#cache_path_to_dot/2"},{"type":"function","title":"hb_cache_render.cache_path_to_dot/3","doc":"","ref":"hb_cache_render.html#cache_path_to_dot/3"},{"type":"function","title":"hb_cache_render.dot_to_svg/1","doc":"Convert a dot graph to SVG format","ref":"hb_cache_render.html#dot_to_svg/1"},{"type":"function","title":"hb_cache_render.prepare_deeply_nested_complex_message/0","doc":"","ref":"hb_cache_render.html#prepare_deeply_nested_complex_message/0"},{"type":"function","title":"hb_cache_render.prepare_signed_data/0","doc":"","ref":"hb_cache_render.html#prepare_signed_data/0"},{"type":"function","title":"hb_cache_render.prepare_unsigned_data/0","doc":"","ref":"hb_cache_render.html#prepare_unsigned_data/0"},{"type":"function","title":"hb_cache_render.render/1","doc":"Render the given Key into svg","ref":"hb_cache_render.html#render/1"},{"type":"function","title":"hb_cache_render.render/2","doc":"","ref":"hb_cache_render.html#render/2"},{"type":"module","title":"hb_client","doc":"","ref":"hb_client.html"},{"type":"function","title":"hb_client.add_route/3","doc":"","ref":"hb_client.html#add_route/3"},{"type":"function","title":"hb_client.arweave_timestamp/0","doc":"Grab the latest block information from the Arweave gateway node.","ref":"hb_client.html#arweave_timestamp/0"},{"type":"function","title":"hb_client.resolve/4","doc":"Resolve a message pair on a remote node.\nThe message pair is first transformed into a singleton request, by\nprefixing the keys in both messages for the path segment that they relate to,\nand then adjusting the \"Path\" field from the second message.","ref":"hb_client.html#resolve/4"},{"type":"function","title":"hb_client.routes/2","doc":"","ref":"hb_client.html#routes/2"},{"type":"function","title":"hb_client.upload/2","doc":"Upload a data item to the bundler node.","ref":"hb_client.html#upload/2"},{"type":"function","title":"hb_client.upload_empty_message_test/0","doc":"","ref":"hb_client.html#upload_empty_message_test/0"},{"type":"function","title":"hb_client.upload_empty_raw_ans104_test/0","doc":"","ref":"hb_client.html#upload_empty_raw_ans104_test/0"},{"type":"function","title":"hb_client.upload_raw_ans104_test/0","doc":"","ref":"hb_client.html#upload_raw_ans104_test/0"},{"type":"function","title":"hb_client.upload_raw_ans104_with_anchor_test/0","doc":"","ref":"hb_client.html#upload_raw_ans104_with_anchor_test/0"},{"type":"function","title":"hb_client.upload_single_layer_message_test/0","doc":"","ref":"hb_client.html#upload_single_layer_message_test/0"},{"type":"module","title":"hb_crypto","doc":"Implements the cryptographic functions and wraps the primitives\nused in HyperBEAM. Abstracted such that this (extremely!) dangerous code \ncan be carefully managed.\n\nHyperBEAM currently implements two hashpath algorithms:\n\n* `sha-256-chain`: A simple chained SHA-256 hash.\n\n* `accumulate-256`: A SHA-256 hash that chains the given IDs and accumulates\ntheir values into a single commitment.\n\nThe accumulate algorithm is experimental and at this point only exists to\nallow us to test multiple HashPath algorithms in HyperBEAM.","ref":"hb_crypto.html"},{"type":"function","title":"hb_crypto.accumulate/2","doc":"Accumulate two IDs into a single commitment.\nExperimental! This is not necessarily a cryptographically-secure operation.","ref":"hb_crypto.html#accumulate/2"},{"type":"function","title":"hb_crypto.sha256/1","doc":"Wrap Erlang's `crypto:hash/2` to provide a standard interface.\nUnder-the-hood, this uses OpenSSL.","ref":"hb_crypto.html#sha256/1"},{"type":"function","title":"hb_crypto.sha256_chain/2","doc":"Add a new ID to the end of a SHA-256 hash chain.","ref":"hb_crypto.html#sha256_chain/2"},{"type":"function","title":"hb_crypto.sha256_chain_test/0","doc":"Check that `sha-256-chain` correctly produces a hash matching\nthe machine's OpenSSL lib's output. Further (in case of a bug in our\nor Erlang's usage of OpenSSL), check that the output has at least has\na high level of entropy.","ref":"hb_crypto.html#sha256_chain_test/0"},{"type":"module","title":"hb_escape","doc":"Escape and unescape mixed case values for use in HTTP headers.\nThis is necessary for encodings of AO-Core messages for transmission in \nHTTP/2 and HTTP/3, because uppercase header keys are explicitly disallowed.\nWhile most map keys in HyperBEAM are normalized to lowercase, IDs are not.\nSubsequently, we encode all header keys to lowercase %-encoded URI-style\nstrings because transmission.","ref":"hb_escape.html"},{"type":"function","title":"hb_escape.decode/1","doc":"Decode a URI-encoded string back to a binary.","ref":"hb_escape.html#decode/1"},{"type":"function","title":"hb_escape.decode_keys/1","doc":"Return a message with all of its keys decoded.","ref":"hb_escape.html#decode_keys/1"},{"type":"function","title":"hb_escape.encode/1","doc":"Encode a binary as a URI-encoded string.","ref":"hb_escape.html#encode/1"},{"type":"function","title":"hb_escape.encode_keys/1","doc":"URI encode keys in the base layer of a message. Does not recurse.","ref":"hb_escape.html#encode_keys/1"},{"type":"function","title":"hb_escape.escape_unescape_identity_test/0","doc":"","ref":"hb_escape.html#escape_unescape_identity_test/0"},{"type":"function","title":"hb_escape.escape_unescape_special_chars_test/0","doc":"","ref":"hb_escape.html#escape_unescape_special_chars_test/0"},{"type":"function","title":"hb_escape.unescape_specific_test/0","doc":"","ref":"hb_escape.html#unescape_specific_test/0"},{"type":"function","title":"hb_escape.uppercase_test/0","doc":"","ref":"hb_escape.html#uppercase_test/0"},{"type":"module","title":"hb_event","doc":"Wrapper for incrementing prometheus counters.","ref":"hb_event.html"},{"type":"function","title":"hb_event.increment/3","doc":"Increment the counter for the given topic and message. Registers the\ncounter if it doesn't exist. If the topic is `global`, the message is ignored.\nThis means that events must specify a topic if they want to be counted,\nfiltering debug messages. Similarly, events with a topic that begins with\n`debug` are ignored.","ref":"hb_event.html#increment/3"},{"type":"function","title":"hb_event.log/1","doc":"Debugging log logging function. For now, it just prints to standard\nerror.","ref":"hb_event.html#log/1"},{"type":"function","title":"hb_event.log/2","doc":"","ref":"hb_event.html#log/2"},{"type":"function","title":"hb_event.log/3","doc":"","ref":"hb_event.html#log/3"},{"type":"function","title":"hb_event.log/4","doc":"","ref":"hb_event.html#log/4"},{"type":"function","title":"hb_event.log/5","doc":"","ref":"hb_event.html#log/5"},{"type":"function","title":"hb_event.log/6","doc":"","ref":"hb_event.html#log/6"},{"type":"module","title":"hb_examples","doc":"This module contains end-to-end tests for Hyperbeam, accessing through\nthe HTTP interface. As well as testing the system, you can use these tests\nas examples of how to interact with HyperBEAM nodes.","ref":"hb_examples.html"},{"type":"function","title":"hb_examples.paid_wasm_test/0","doc":"Gain signed WASM responses from a node and verify them.\n1. Start the client with a small balance.\n2. Execute a simple WASM function on the host node.\n3. Verify the response is correct and signed by the host node.\n4. Get the balance of the client and verify it has been deducted.","ref":"hb_examples.html#paid_wasm_test/0"},{"type":"function","title":"hb_examples.relay_with_payments_test/0","doc":"Start a node running the simple pay meta device, and use it to relay\na message for a client. We must ensure:\n1. When the client has no balance, the relay fails.\n2. The operator is able to topup for the client.\n3. The client has the correct balance after the topup.\n4. The relay succeeds when the client has enough balance.\n5. The received message is signed by the host using http-sig and validates\n   correctly.","ref":"hb_examples.html#relay_with_payments_test/0"},{"type":"module","title":"hb_features","doc":"A module that exports a list of feature flags that the node supports\nusing the `-ifdef` macro.\nAs a consequence, this module acts as a proxy of information between the\nbuild system and the runtime execution environment.","ref":"hb_features.html"},{"type":"function","title":"hb_features.all/0","doc":"Returns a list of all feature flags that the node supports.","ref":"hb_features.html#all/0"},{"type":"function","title":"hb_features.enabled/1","doc":"Returns true if the feature flag is enabled.","ref":"hb_features.html#enabled/1"},{"type":"function","title":"hb_features.genesis_wasm/0","doc":"","ref":"hb_features.html#genesis_wasm/0"},{"type":"function","title":"hb_features.http3/0","doc":"","ref":"hb_features.html#http3/0"},{"type":"function","title":"hb_features.rocksdb/0","doc":"","ref":"hb_features.html#rocksdb/0"},{"type":"function","title":"hb_features.test/0","doc":"","ref":"hb_features.html#test/0"},{"type":"module","title":"hb_gateway_client","doc":"Implementation of Arweave's GraphQL API to gain access to specific \nitems of data stored on the network.\n\nThis module must be used to get full HyperBEAM `structured@1.0` form messages\nfrom data items stored on the network, as Arweave gateways do not presently\nexpose all necessary fields to retrieve this information outside of the\nGraphQL API. When gateways integrate serving in `httpsig@1.0` form, this\nmodule will be deprecated.","ref":"hb_gateway_client.html"},{"type":"function","title":"hb_gateway_client.ans104_no_data_item_test/0","doc":"","ref":"hb_gateway_client.html#ans104_no_data_item_test/0"},{"type":"function","title":"hb_gateway_client.data/2","doc":"Get the data associated with a transaction by its ID, using the node's\nArweave `gateway` peers. The item is expected to be available in its \nunmodified (by caches or other proxies) form at the following location:\n      https://&lt;gateway&gt;/raw/&lt;id&gt;\nwhere `&lt;id&gt;` is the base64-url-encoded transaction ID.","ref":"hb_gateway_client.html#data/2"},{"type":"function","title":"hb_gateway_client.read/2","doc":"Get a data item (including data and tags) by its ID, using the node's\nGraphQL peers.\nIt uses the following GraphQL schema:\ntype Transaction {\n  id: ID!\n  anchor: String!\n  signature: String!\n  recipient: String!\n  owner: Owner { address: String! key: String! }!\n  fee: Amount!\n  quantity: Amount!\n  data: MetaData!\n  tags: [Tag { name: String! value: String! }!]!\n}\ntype Amount {\n  winston: String!\n  ar: String!\n}","ref":"hb_gateway_client.html#read/2"},{"type":"function","title":"hb_gateway_client.result_to_message/2","doc":"Takes a GraphQL item node, matches it with the appropriate data from a\ngateway, then returns `{ok, ParsedMsg}'.","ref":"hb_gateway_client.html#result_to_message/2"},{"type":"function","title":"hb_gateway_client.scheduler_location/2","doc":"Find the location of the scheduler based on its ID, through GraphQL.","ref":"hb_gateway_client.html#scheduler_location/2"},{"type":"function","title":"hb_gateway_client.scheduler_location_test/0","doc":"Test that we can get the scheduler location.","ref":"hb_gateway_client.html#scheduler_location_test/0"},{"type":"module","title":"hb_http","doc":"","ref":"hb_http.html"},{"type":"function","title":"hb_http.accept_to_codec/2","doc":"Calculate the codec name to use for a reply given its initiating Cowboy\nrequest, the parsed TABM request, and the response message. The precidence\norder for finding the codec is:\n1. The `accept-codec` field in the message\n2. The `accept` field in the request headers\n3. The default codec\nOptions can be specified in mime-type format (`application/*`) or in\nAO device format (`device@1.0`).","ref":"hb_http.html#accept_to_codec/2"},{"type":"function","title":"hb_http.ans104_wasm_test/0","doc":"","ref":"hb_http.html#ans104_wasm_test/0"},{"type":"function","title":"hb_http.cors_get_test/0","doc":"","ref":"hb_http.html#cors_get_test/0"},{"type":"function","title":"hb_http.get/2","doc":"Gets a URL via HTTP and returns the resulting message in deserialized\nform.","ref":"hb_http.html#get/2"},{"type":"function","title":"hb_http.get/3","doc":"","ref":"hb_http.html#get/3"},{"type":"function","title":"hb_http.get_deep_signed_wasm_state_test/0","doc":"","ref":"hb_http.html#get_deep_signed_wasm_state_test/0"},{"type":"function","title":"hb_http.get_deep_unsigned_wasm_state_test/0","doc":"","ref":"hb_http.html#get_deep_unsigned_wasm_state_test/0"},{"type":"function","title":"hb_http.nested_ao_resolve_test/0","doc":"","ref":"hb_http.html#nested_ao_resolve_test/0"},{"type":"function","title":"hb_http.post/3","doc":"Posts a message to a URL on a remote peer via HTTP. Returns the\nresulting message in deserialized form.","ref":"hb_http.html#post/3"},{"type":"function","title":"hb_http.post/4","doc":"","ref":"hb_http.html#post/4"},{"type":"function","title":"hb_http.reply/4","doc":"Reply to the client's HTTP request with a message.","ref":"hb_http.html#reply/4"},{"type":"function","title":"hb_http.req_to_tabm_singleton/3","doc":"Convert a cowboy request to a normalized message.","ref":"hb_http.html#req_to_tabm_singleton/3"},{"type":"function","title":"hb_http.request/2","doc":"Posts a binary to a URL on a remote peer via HTTP, returning the raw\nbinary body.","ref":"hb_http.html#request/2"},{"type":"function","title":"hb_http.request/4","doc":"","ref":"hb_http.html#request/4"},{"type":"function","title":"hb_http.request/5","doc":"","ref":"hb_http.html#request/5"},{"type":"function","title":"hb_http.run_wasm_signed_test/0","doc":"","ref":"hb_http.html#run_wasm_signed_test/0"},{"type":"function","title":"hb_http.run_wasm_unsigned_test/0","doc":"","ref":"hb_http.html#run_wasm_unsigned_test/0"},{"type":"function","title":"hb_http.simple_ao_resolve_signed_test/0","doc":"","ref":"hb_http.html#simple_ao_resolve_signed_test/0"},{"type":"function","title":"hb_http.simple_ao_resolve_unsigned_test/0","doc":"","ref":"hb_http.html#simple_ao_resolve_unsigned_test/0"},{"type":"function","title":"hb_http.start/0","doc":"","ref":"hb_http.html#start/0"},{"type":"module","title":"hb_http_benchmark_tests","doc":"","ref":"hb_http_benchmark_tests.html"},{"type":"module","title":"hb_http_client","doc":"A wrapper library for gun. This module originates from the Arweave\nproject, and has been modified for use in HyperBEAM.","ref":"hb_http_client.html"},{"type":"function","title":"hb_http_client.handle_call/3","doc":"","ref":"hb_http_client.html#handle_call/3"},{"type":"function","title":"hb_http_client.handle_cast/2","doc":"","ref":"hb_http_client.html#handle_cast/2"},{"type":"function","title":"hb_http_client.handle_info/2","doc":"","ref":"hb_http_client.html#handle_info/2"},{"type":"function","title":"hb_http_client.init/1","doc":"","ref":"hb_http_client.html#init/1"},{"type":"function","title":"hb_http_client.req/2","doc":"","ref":"hb_http_client.html#req/2"},{"type":"function","title":"hb_http_client.start_link/1","doc":"","ref":"hb_http_client.html#start_link/1"},{"type":"function","title":"hb_http_client.terminate/2","doc":"","ref":"hb_http_client.html#terminate/2"},{"type":"module","title":"hb_http_client_sup","doc":"The supervisor for the gun HTTP client wrapper.","ref":"hb_http_client_sup.html"},{"type":"function","title":"hb_http_client_sup.init/1","doc":"","ref":"hb_http_client_sup.html#init/1"},{"type":"function","title":"hb_http_client_sup.start_link/1","doc":"","ref":"hb_http_client_sup.html#start_link/1"},{"type":"module","title":"hb_http_server","doc":"A router that attaches a HTTP server to the AO-Core resolver.\nBecause AO-Core is built to speak in HTTP semantics, this module\nonly has to marshal the HTTP request into a message, and then\npass it to the AO-Core resolver. \n\n`hb_http:reply/4` is used to respond to the client, handling the \nprocess of converting a message back into an HTTP response.\n\nThe router uses an `Opts` message as its Cowboy initial state, \nsuch that changing it on start of the router server allows for\nthe execution parameters of all downstream requests to be controlled.","ref":"hb_http_server.html"},{"type":"function","title":"hb_http_server.allowed_methods/2","doc":"Return the list of allowed methods for the HTTP server.","ref":"hb_http_server.html#allowed_methods/2"},{"type":"function","title":"hb_http_server.get_opts/1","doc":"","ref":"hb_http_server.html#get_opts/1"},{"type":"function","title":"hb_http_server.init/2","doc":"Entrypoint for all HTTP requests. Receives the Cowboy request option and\nthe server ID, which can be used to lookup the node message.","ref":"hb_http_server.html#init/2"},{"type":"function","title":"hb_http_server.set_default_opts/1","doc":"","ref":"hb_http_server.html#set_default_opts/1"},{"type":"function","title":"hb_http_server.set_opts/1","doc":"Update the `Opts` map that the HTTP server uses for all future\nrequests.","ref":"hb_http_server.html#set_opts/1"},{"type":"function","title":"hb_http_server.start/0","doc":"Starts the HTTP server. Optionally accepts an `Opts` message, which\nis used as the source for server configuration settings, as well as the\n`Opts` argument to use for all AO-Core resolution requests downstream.","ref":"hb_http_server.html#start/0"},{"type":"function","title":"hb_http_server.start/1","doc":"","ref":"hb_http_server.html#start/1"},{"type":"function","title":"hb_http_server.start_node/0","doc":"Test that we can start the server, send a message, and get a response.","ref":"hb_http_server.html#start_node/0"},{"type":"function","title":"hb_http_server.start_node/1","doc":"","ref":"hb_http_server.html#start_node/1"},{"type":"module","title":"hb_json","doc":"Wrapper for encoding and decoding JSON. Supports maps and Jiffy's old \n`ejson` format. This module abstracts the underlying JSON library, allowing\nus to switch between libraries as needed in the future.","ref":"hb_json.html"},{"type":"function","title":"hb_json.decode/1","doc":"Takes a JSON string and decodes it into an Erlang term.","ref":"hb_json.html#decode/1"},{"type":"function","title":"hb_json.decode/2","doc":"","ref":"hb_json.html#decode/2"},{"type":"function","title":"hb_json.encode/1","doc":"Takes a term in Erlang's native form and encodes it as a JSON string.","ref":"hb_json.html#encode/1"},{"type":"module","title":"hb_logger","doc":null,"ref":"hb_logger.html"},{"type":"function","title":"hb_logger.log/2","doc":null,"ref":"hb_logger.html#log/2"},{"type":"function","title":"hb_logger.register/1","doc":null,"ref":"hb_logger.html#register/1"},{"type":"function","title":"hb_logger.report/1","doc":null,"ref":"hb_logger.html#report/1"},{"type":"function","title":"hb_logger.start/0","doc":null,"ref":"hb_logger.html#start/0"},{"type":"function","title":"hb_logger.start/1","doc":null,"ref":"hb_logger.html#start/1"},{"type":"module","title":"hb_message","doc":"This module acts an adapter between messages, as modeled in the\nAO-Core protocol, and their uderlying binary representations and formats.\n\nUnless you are implementing a new message serialization codec, you should\nnot need to interact with this module directly. Instead, use the\n`hb_ao` interfaces to interact with all messages. The `dev_message`\nmodule implements a device interface for abstracting over the different\nmessage formats.\n\n`hb_message` and the HyperBEAM caches can interact with multiple different\ntypes of message formats:\n\n    - Richly typed AO-Core structured messages.\n    - Arweave transations.\n    - ANS-104 data items.\n    - HTTP Signed Messages.\n    - Flat Maps.\n\nThis module is responsible for converting between these formats. It does so\nby normalizing messages to a common format: `Type Annotated Binary Messages`\n(TABM). TABMs are deep Erlang maps with keys than only contain either other\nTABMs or binary values. By marshalling all messages into this format, they\ncan easily be coerced into other output formats. For example, generating a\n`HTTP Signed Message` format output from an Arweave transaction. TABM is\nalso a simple format from a computational perspective (only binary literals\nand O(1) access maps), such that operations upon them are efficient.\n\nThe structure of the conversions is as follows:\n\n```\n    Arweave TX/ANS-104 ==> dev_codec_ans104:from/1 ==> TABM\n    HTTP Signed Message ==> dev_codec_httpsig_conv:from/1 ==> TABM\n    Flat Maps ==> dev_codec_flat:from/1 ==> TABM\n\n    TABM ==> dev_codec_structured:to/1 ==> AO-Core Message\n    AO-Core Message ==> dev_codec_structured:from/1 ==> TABM\n\n    TABM ==> dev_codec_ans104:to/1 ==> Arweave TX/ANS-104\n    TABM ==> dev_codec_httpsig_conv:to/1 ==> HTTP Signed Message\n    TABM ==> dev_codec_flat:to/1 ==> Flat Maps\n    ...\n'''\n\nAdditionally, this module provides a number of utility functions for\nmanipulating messages. For example, `hb_message:sign/2` to sign a message of\narbitrary type, or `hb_message:format/1` to print an AO-Core/TABM message in\na human-readable format.\n\nThe `hb_cache` module is responsible for storing and retrieving messages in\nthe HyperBEAM stores configured on the node. Each store has its own storage\nbackend, but each works with simple key-value pairs. Subsequently, the \n`hb_cache` module uses TABMs as the internal format for storing and \nretrieving messages.","ref":"hb_message.html"},{"type":"function","title":"hb_message.commit/2","doc":"Sign a message with the given wallet.","ref":"hb_message.html#commit/2"},{"type":"function","title":"hb_message.commit/3","doc":"","ref":"hb_message.html#commit/3"},{"type":"function","title":"hb_message.commitment/2","doc":"Extract a commitment from a message given a `committer` ID, or a spec\nmessage to match against. Returns only the first matching commitment, or\n`not_found`.","ref":"hb_message.html#commitment/2"},{"type":"function","title":"hb_message.commitment/3","doc":"","ref":"hb_message.html#commitment/3"},{"type":"function","title":"hb_message.committed/1","doc":"Return the list of committed keys from a message.","ref":"hb_message.html#committed/1"},{"type":"function","title":"hb_message.committed/2","doc":"","ref":"hb_message.html#committed/2"},{"type":"function","title":"hb_message.committed/3","doc":"","ref":"hb_message.html#committed/3"},{"type":"function","title":"hb_message.convert/3","doc":"Convert a message from one format to another. Taking a message in the\nsource format, a target format, and a set of opts. If not given, the source\nis assumed to be `structured@1.0`. Additional codecs can be added by ensuring they\nare part of the `Opts` map -- either globally, or locally for a computation.\n\nThe encoding happens in two phases:\n1. Convert the message to a TABM.\n2. Convert the TABM to the target format.\n\nThe conversion to a TABM is done by the `structured@1.0` codec, which is always\navailable. The conversion from a TABM is done by the target codec.","ref":"hb_message.html#convert/3"},{"type":"function","title":"hb_message.convert/4","doc":"","ref":"hb_message.html#convert/4"},{"type":"function","title":"hb_message.deep_multisignature_test/0","doc":"","ref":"hb_message.html#deep_multisignature_test/0"},{"type":"function","title":"hb_message.deeply_nested_committed_keys_test/0","doc":"","ref":"hb_message.html#deeply_nested_committed_keys_test/0"},{"type":"function","title":"hb_message.default_keys_removed_test/0","doc":"Test that the filter_default_keys/1 function removes TX fields\nthat have the default values found in the tx record, but not those that\nhave been set by the user.","ref":"hb_message.html#default_keys_removed_test/0"},{"type":"function","title":"hb_message.default_tx_list/0","doc":"Get the ordered list of fields as AO-Core keys and default values of\nthe tx record.","ref":"hb_message.html#default_tx_list/0"},{"type":"function","title":"hb_message.filter_default_keys/1","doc":"Remove keys from a map that have the default values found in the tx\nrecord.","ref":"hb_message.html#filter_default_keys/1"},{"type":"function","title":"hb_message.find_target/3","doc":"Implements a standard pattern in which the target for an operation is\nfound by looking for a `target` key in the request. If the target is `self`,\nor not present, the operation is performed on the original message. Otherwise,\nthe target is expected to be a key in the message, and the operation is\nperformed on the value of that key.","ref":"hb_message.html#find_target/3"},{"type":"function","title":"hb_message.format/1","doc":"Format a message for printing, optionally taking an indentation level\nto start from.","ref":"hb_message.html#format/1"},{"type":"function","title":"hb_message.format/2","doc":"","ref":"hb_message.html#format/2"},{"type":"function","title":"hb_message.id/1","doc":"Return the ID of a message.","ref":"hb_message.html#id/1"},{"type":"function","title":"hb_message.id/2","doc":"","ref":"hb_message.html#id/2"},{"type":"function","title":"hb_message.id/3","doc":"","ref":"hb_message.html#id/3"},{"type":"function","title":"hb_message.match/2","doc":"Check if two maps match, including recursively checking nested maps.\nTakes an optional mode argument to control the matching behavior:\n     `strict`: All keys in both maps be present and match.\n     `only_present`: Only present keys in both maps must match.\n     `primary`: Only the primary map's keys must be present.","ref":"hb_message.html#match/2"},{"type":"function","title":"hb_message.match/3","doc":"","ref":"hb_message.html#match/3"},{"type":"function","title":"hb_message.match_modes_test/0","doc":"","ref":"hb_message.html#match_modes_test/0"},{"type":"function","title":"hb_message.message_suite_test_/0","doc":"","ref":"hb_message.html#message_suite_test_/0"},{"type":"function","title":"hb_message.minimization_test/0","doc":"","ref":"hb_message.html#minimization_test/0"},{"type":"function","title":"hb_message.minimize/1","doc":"Remove keys from the map that can be regenerated. Optionally takes an\nadditional list of keys to include in the minimization.","ref":"hb_message.html#minimize/1"},{"type":"function","title":"hb_message.print/1","doc":"Pretty-print a message.","ref":"hb_message.html#print/1"},{"type":"function","title":"hb_message.run_test/0","doc":"","ref":"hb_message.html#run_test/0"},{"type":"function","title":"hb_message.signers/1","doc":"Return all of the committers on a message that have 'normal', 256 bit, \naddresses.","ref":"hb_message.html#signers/1"},{"type":"function","title":"hb_message.type/1","doc":"Return the type of an encoded message.","ref":"hb_message.html#type/1"},{"type":"function","title":"hb_message.uncommitted/1","doc":"Return the unsigned version of a message in AO-Core format.","ref":"hb_message.html#uncommitted/1"},{"type":"function","title":"hb_message.verify/1","doc":"wrapper function to verify a message.","ref":"hb_message.html#verify/1"},{"type":"function","title":"hb_message.verify/2","doc":"","ref":"hb_message.html#verify/2"},{"type":"function","title":"hb_message.with_commitments/2","doc":"Filter messages that do not match the 'spec' given. The underlying match\nis performed in the `only_present` mode, such that match specifications only\nneed to specify the keys that must be present.","ref":"hb_message.html#with_commitments/2"},{"type":"function","title":"hb_message.with_only_committed/1","doc":"Return a message with only the committed keys. If no commitments are\npresent, the message is returned unchanged. This means that you need to\ncheck if the message is:\n- Committed\n- Verifies\n...before using the output of this function as the 'canonical' message. This\nis such that expensive operations like signature verification are not\nperformed unless necessary.","ref":"hb_message.html#with_only_committed/1"},{"type":"function","title":"hb_message.with_only_committed/2","doc":"","ref":"hb_message.html#with_only_committed/2"},{"type":"function","title":"hb_message.with_only_committers/2","doc":"Return the message with only the specified committers attached.","ref":"hb_message.html#with_only_committers/2"},{"type":"function","title":"hb_message.without_commitments/2","doc":"Filter messages that match the 'spec' given. Inverts the `with_commitments/2`\nfunction, such that only messages that do _not_ match the spec are returned.","ref":"hb_message.html#without_commitments/2"},{"type":"module","title":"hb_metrics_collector","doc":null,"ref":"hb_metrics_collector.html"},{"type":"function","title":"hb_metrics_collector.collect_metrics/2","doc":null,"ref":"hb_metrics_collector.html#collect_metrics/2"},{"type":"function","title":"hb_metrics_collector.collect_mf/2","doc":null,"ref":"hb_metrics_collector.html#collect_mf/2"},{"type":"function","title":"hb_metrics_collector.deregister_cleanup/1","doc":null,"ref":"hb_metrics_collector.html#deregister_cleanup/1"},{"type":"module","title":"hb_name","doc":"An abstraction for name registration/deregistration in Hyperbeam.\nIts motivation is to provide a way to register names that are not necessarily\natoms, but can be any term (for example: hashpaths or `process@1.0` IDs).\nAn important characteristic of these functions is that they are atomic:\nThere can only ever be one registrant for a given name at a time.","ref":"hb_name.html"},{"type":"function","title":"hb_name.all/0","doc":"List the names in the registry.","ref":"hb_name.html#all/0"},{"type":"function","title":"hb_name.all_test/0","doc":"","ref":"hb_name.html#all_test/0"},{"type":"function","title":"hb_name.atom_test/0","doc":"","ref":"hb_name.html#atom_test/0"},{"type":"function","title":"hb_name.cleanup_test/0","doc":"","ref":"hb_name.html#cleanup_test/0"},{"type":"function","title":"hb_name.concurrency_test/0","doc":"","ref":"hb_name.html#concurrency_test/0"},{"type":"function","title":"hb_name.dead_process_test/0","doc":"","ref":"hb_name.html#dead_process_test/0"},{"type":"function","title":"hb_name.lookup/1","doc":"Lookup a name -> PID.","ref":"hb_name.html#lookup/1"},{"type":"function","title":"hb_name.register/1","doc":"Register a name. If the name is already registered, the registration\nwill fail. The name can be any Erlang term.","ref":"hb_name.html#register/1"},{"type":"function","title":"hb_name.register/2","doc":"","ref":"hb_name.html#register/2"},{"type":"function","title":"hb_name.start/0","doc":"","ref":"hb_name.html#start/0"},{"type":"function","title":"hb_name.term_test/0","doc":"","ref":"hb_name.html#term_test/0"},{"type":"function","title":"hb_name.unregister/1","doc":"Unregister a name.","ref":"hb_name.html#unregister/1"},{"type":"module","title":"hb_opts","doc":"A module for interacting with local and global options inside\nHyperBEAM. Options are set globally, but can also be overridden using an\nan optional local `Opts` map argument. Many functions across the HyperBEAM \nenvironment accept an `Opts` argument, which can be used to customize \nbehavior.\n\nOptions set in an `Opts` map must _never_ change the behavior of a function\nthat should otherwise be deterministic. Doing so may lead to loss of funds\nby the HyperBEAM node operator, as the results of their executions will be\ndifferent than those of other node operators. If they are economically \nstaked on the correctness of these results, they may experience punishments\nfor non-verifiable behavior. Instead, if a local node setting makes \ndeterministic behavior impossible, the caller should fail the execution \nwith a refusal to execute.","ref":"hb_opts.html"},{"type":"function","title":"hb_opts.default_message/0","doc":"The default configuration options of the hyperbeam node.","ref":"hb_opts.html#default_message/0"},{"type":"function","title":"hb_opts.get/1","doc":"Get an option from the global options, optionally overriding with a\nlocal `Opts` map if `prefer` or `only` is set to `local`. If the `only` \noption is provided in the `local` map, only keys found in the corresponding\n(`local` or `global`) map will be returned. This function also offers users\na way to specify a default value to return if the option is not set.\n\n`prefer` defaults to `local`.","ref":"hb_opts.html#get/1"},{"type":"function","title":"hb_opts.get/2","doc":"","ref":"hb_opts.html#get/2"},{"type":"function","title":"hb_opts.get/3","doc":"","ref":"hb_opts.html#get/3"},{"type":"function","title":"hb_opts.load/1","doc":"Parse a `flat@1.0` encoded file into a map, matching the types of the \nkeys to those in the default message.","ref":"hb_opts.html#load/1"},{"type":"function","title":"hb_opts.mimic_default_types/2","doc":"Mimic the types of the default message for a given map.","ref":"hb_opts.html#mimic_default_types/2"},{"type":"module","title":"hb_path","doc":"This module provides utilities for manipulating the paths of a\nmessage: Its request path (referred to in messages as just the `Path`), and\nits HashPath.\n\nA HashPath is a rolling Merkle list of the messages that have been applied \nin order to generate a given message. Because applied messages can\nthemselves be the result of message applications with the AO-Core protocol,\nthe HashPath can be thought of as the tree of messages that represent the\nhistory of a given message. The initial message on a HashPath is referred to\nby its ID and serves as its user-generated 'root'.\n\nSpecifically, the HashPath can be generated by hashing the previous HashPath\nand the current message. This means that each message in the HashPath is\ndependent on all previous messages.\n```\n    Msg1.HashPath = Msg1.ID\n    Msg3.HashPath = Msg1.Hash(Msg1.HashPath, Msg2.ID)\n    Msg3.{...} = AO-Core.apply(Msg1, Msg2)\n    ...\n'''\n\nA message's ID itself includes its HashPath, leading to the mixing of\na Msg2's merkle list into the resulting Msg3's HashPath. This allows a single\nmessage to represent a history _tree_ of all of the messages that were\napplied to generate it -- rather than just a linear history.\n\nA message may also specify its own algorithm for generating its HashPath,\nwhich allows for custom logic to be used for representing the history of a\nmessage. When Msg2's are applied to a Msg1, the resulting Msg3's HashPath\nwill be generated according to Msg1's algorithm choice.","ref":"hb_path.html"},{"type":"function","title":"hb_path.from_message/2","doc":"Extract the request path or hashpath from a message. We do not use\nAO-Core for this resolution because this function is called from inside AO-Core \nitself. This imparts a requirement: the message's device must store a \nviable hashpath and path in its Erlang map at all times, unless the message\nis directly from a user (in which case paths and hashpaths will not have \nbeen assigned yet).","ref":"hb_path.html#from_message/2"},{"type":"function","title":"hb_path.hashpath/2","doc":"Add an ID of a Msg2 to the HashPath of another message.","ref":"hb_path.html#hashpath/2"},{"type":"function","title":"hb_path.hashpath/3","doc":"","ref":"hb_path.html#hashpath/3"},{"type":"function","title":"hb_path.hashpath/4","doc":"","ref":"hb_path.html#hashpath/4"},{"type":"function","title":"hb_path.hashpath_alg/1","doc":"Get the hashpath function for a message from its HashPath-Alg.\nIf no hashpath algorithm is specified, the protocol defaults to\n`sha-256-chain`.","ref":"hb_path.html#hashpath_alg/1"},{"type":"function","title":"hb_path.hashpath_direct_msg2_test/0","doc":"","ref":"hb_path.html#hashpath_direct_msg2_test/0"},{"type":"function","title":"hb_path.hashpath_test/0","doc":"","ref":"hb_path.html#hashpath_test/0"},{"type":"function","title":"hb_path.hd/2","doc":"Extract the first key from a `Message2`'s `Path` field.\nNote: This function uses the `dev_message:get/2` function, rather than \na generic call as the path should always be an explicit key in the message.","ref":"hb_path.html#hd/2"},{"type":"function","title":"hb_path.hd_test/0","doc":"","ref":"hb_path.html#hd_test/0"},{"type":"function","title":"hb_path.matches/2","doc":"Check if two keys match.","ref":"hb_path.html#matches/2"},{"type":"function","title":"hb_path.multiple_hashpaths_test/0","doc":"","ref":"hb_path.html#multiple_hashpaths_test/0"},{"type":"function","title":"hb_path.normalize/1","doc":"Normalize a path to a binary, removing the leading slash if present.","ref":"hb_path.html#normalize/1"},{"type":"function","title":"hb_path.pop_from_message_test/0","doc":"","ref":"hb_path.html#pop_from_message_test/0"},{"type":"function","title":"hb_path.pop_from_path_list_test/0","doc":"","ref":"hb_path.html#pop_from_path_list_test/0"},{"type":"function","title":"hb_path.pop_request/2","doc":"Pop the next element from a request path or path list.","ref":"hb_path.html#pop_request/2"},{"type":"function","title":"hb_path.priv_remaining/2","doc":"Return the `Remaining-Path` of a message, from its hidden `AO-Core`\nkey. Does not use the `get` or set `hb_private` functions, such that it\ncan be safely used inside the main AO-Core resolve function.","ref":"hb_path.html#priv_remaining/2"},{"type":"function","title":"hb_path.priv_store_remaining/2","doc":"Store the remaining path of a message in its hidden `AO-Core` key.","ref":"hb_path.html#priv_store_remaining/2"},{"type":"function","title":"hb_path.push_request/2","doc":"Add a message to the head (next to execute) of a request path.","ref":"hb_path.html#push_request/2"},{"type":"function","title":"hb_path.queue_request/2","doc":"Queue a message at the back of a request path. `path` is the only\nkey that we cannot use dev_message's `set/3` function for (as it expects\nthe compute path to be there), so we use `maps:put/3` instead.","ref":"hb_path.html#queue_request/2"},{"type":"function","title":"hb_path.regex_matches/2","doc":"Check if two keys match using regex.","ref":"hb_path.html#regex_matches/2"},{"type":"function","title":"hb_path.regex_matches_test/0","doc":"","ref":"hb_path.html#regex_matches_test/0"},{"type":"function","title":"hb_path.term_to_path_parts/1","doc":"Convert a term into an executable path. Supports binaries, lists, and\natoms. Notably, it does not support strings as lists of characters.","ref":"hb_path.html#term_to_path_parts/1"},{"type":"function","title":"hb_path.term_to_path_parts/2","doc":"","ref":"hb_path.html#term_to_path_parts/2"},{"type":"function","title":"hb_path.term_to_path_parts_test/0","doc":"","ref":"hb_path.html#term_to_path_parts_test/0"},{"type":"function","title":"hb_path.tl/2","doc":"Return the message without its first path element. Note that this\nis the only transformation in AO-Core that does _not_ make a log of its\ntransformation. Subsequently, the message's IDs will not be verifiable \nafter executing this transformation.\nThis may or may not be the mainnet behavior we want.","ref":"hb_path.html#tl/2"},{"type":"function","title":"hb_path.tl_test/0","doc":"","ref":"hb_path.html#tl_test/0"},{"type":"function","title":"hb_path.to_binary/1","doc":"Convert a path of any form to a binary.","ref":"hb_path.html#to_binary/1"},{"type":"function","title":"hb_path.to_binary_test/0","doc":"","ref":"hb_path.html#to_binary_test/0"},{"type":"function","title":"hb_path.verify_hashpath/2","doc":"Verify the HashPath of a message, given a list of messages that\nrepresent its history.","ref":"hb_path.html#verify_hashpath/2"},{"type":"function","title":"hb_path.verify_hashpath_test/0","doc":"","ref":"hb_path.html#verify_hashpath_test/0"},{"type":"module","title":"hb_persistent","doc":"Creates and manages long-lived AO-Core resolution processes.\nThese can be useful for situations where a message is large and expensive\nto serialize and deserialize, or when executions should be deliberately\nserialized to avoid parallel executions of the same computation. This \nmodule is called during the core `hb_ao` execution process, so care\nmust be taken to avoid recursive spawns/loops.\n\nBuilt using the `pg` module, which is a distributed Erlang process group\nmanager.","ref":"hb_persistent.html"},{"type":"function","title":"hb_persistent.await/4","doc":"If there was already an Erlang process handling this execution,\nwe should register with them and wait for them to notify us of\ncompletion.","ref":"hb_persistent.html#await/4"},{"type":"function","title":"hb_persistent.deduplicated_execution_test/0","doc":"Test merging and returning a value with a persistent worker.","ref":"hb_persistent.html#deduplicated_execution_test/0"},{"type":"function","title":"hb_persistent.default_await/5","doc":"Default await function that waits for a resolution from a worker.","ref":"hb_persistent.html#default_await/5"},{"type":"function","title":"hb_persistent.default_grouper/3","doc":"Create a group name from a Msg1 and Msg2 pair as a tuple.","ref":"hb_persistent.html#default_grouper/3"},{"type":"function","title":"hb_persistent.default_worker/3","doc":"A server function for handling persistent executions.","ref":"hb_persistent.html#default_worker/3"},{"type":"function","title":"hb_persistent.find_or_register/3","doc":"Register the process to lead an execution if none is found, otherwise\nsignal that we should await resolution.","ref":"hb_persistent.html#find_or_register/3"},{"type":"function","title":"hb_persistent.forward_work/2","doc":"Forward requests to a newly delegated execution process.","ref":"hb_persistent.html#forward_work/2"},{"type":"function","title":"hb_persistent.group/3","doc":"Calculate the group name for a Msg1 and Msg2 pair. Uses the Msg1's\n`group` function if it is found in the `info`, otherwise uses the default.","ref":"hb_persistent.html#group/3"},{"type":"function","title":"hb_persistent.notify/4","doc":"Check our inbox for processes that are waiting for the resolution\nof this execution. Comes in two forms:\n1. Notify on group name alone.\n2. Notify on group name and Msg2.","ref":"hb_persistent.html#notify/4"},{"type":"function","title":"hb_persistent.persistent_worker_test/0","doc":"Test spawning a default persistent worker.","ref":"hb_persistent.html#persistent_worker_test/0"},{"type":"function","title":"hb_persistent.spawn_after_execution_test/0","doc":"","ref":"hb_persistent.html#spawn_after_execution_test/0"},{"type":"function","title":"hb_persistent.start_monitor/0","doc":"Start a monitor that prints the current members of the group every\nn seconds.","ref":"hb_persistent.html#start_monitor/0"},{"type":"function","title":"hb_persistent.start_monitor/1","doc":"","ref":"hb_persistent.html#start_monitor/1"},{"type":"function","title":"hb_persistent.start_worker/2","doc":"Start a worker process that will hold a message in memory for\nfuture executions.","ref":"hb_persistent.html#start_worker/2"},{"type":"function","title":"hb_persistent.start_worker/3","doc":"","ref":"hb_persistent.html#start_worker/3"},{"type":"function","title":"hb_persistent.stop_monitor/1","doc":"","ref":"hb_persistent.html#stop_monitor/1"},{"type":"function","title":"hb_persistent.unregister_notify/4","doc":"Unregister as the leader for an execution and notify waiting processes.","ref":"hb_persistent.html#unregister_notify/4"},{"type":"module","title":"hb_private","doc":"This module provides basic helper utilities for managing the\nprivate element of a message, which can be used to store state that is\nnot included in serialized messages, or those granted to users via the\nAPIs. Private elements of a message can be useful for storing state that\nis only relevant temporarily. For example, a device might use the private\nelement to store a cache of values that are expensive to recompute. They\nshould _not_ be used for encoding state that makes the execution of a\ndevice non-deterministic (unless you are sure you know what you are doing).\n\nThe `set` and `get` functions of this module allow you to run those keys\nas AO-Core paths if you would like to have private `devices` in the\nmessages non-public zone.\n\nSee `hb_ao` for more information about the AO-Core protocol\nand private elements of messages.","ref":"hb_private.html"},{"type":"function","title":"hb_private.from_message/1","doc":"Return the `private` key from a message. If the key does not exist, an\nempty map is returned.","ref":"hb_private.html#from_message/1"},{"type":"function","title":"hb_private.get/3","doc":"Helper for getting a value from the private element of a message. Uses\nAO-Core resolve under-the-hood, removing the private specifier from the\npath if it exists.","ref":"hb_private.html#get/3"},{"type":"function","title":"hb_private.get/4","doc":"","ref":"hb_private.html#get/4"},{"type":"function","title":"hb_private.get_private_key_test/0","doc":"","ref":"hb_private.html#get_private_key_test/0"},{"type":"function","title":"hb_private.is_private/1","doc":"Check if a key is private.","ref":"hb_private.html#is_private/1"},{"type":"function","title":"hb_private.reset/1","doc":"Unset all of the private keys in a message.","ref":"hb_private.html#reset/1"},{"type":"function","title":"hb_private.set/3","doc":"","ref":"hb_private.html#set/3"},{"type":"function","title":"hb_private.set/4","doc":"Helper function for setting a key in the private element of a message.","ref":"hb_private.html#set/4"},{"type":"function","title":"hb_private.set_priv/2","doc":"Helper function for setting the complete private element of a message.","ref":"hb_private.html#set_priv/2"},{"type":"function","title":"hb_private.set_private_test/0","doc":"","ref":"hb_private.html#set_private_test/0"},{"type":"module","title":"hb_process_monitor","doc":null,"ref":"hb_process_monitor.html"},{"type":"function","title":"hb_process_monitor.start/1","doc":null,"ref":"hb_process_monitor.html#start/1"},{"type":"function","title":"hb_process_monitor.start/2","doc":null,"ref":"hb_process_monitor.html#start/2"},{"type":"function","title":"hb_process_monitor.start/3","doc":null,"ref":"hb_process_monitor.html#start/3"},{"type":"function","title":"hb_process_monitor.stop/1","doc":null,"ref":"hb_process_monitor.html#stop/1"},{"type":"module","title":"hb_router","doc":null,"ref":"hb_router.html"},{"type":"function","title":"hb_router.find/2","doc":null,"ref":"hb_router.html#find/2"},{"type":"function","title":"hb_router.find/3","doc":null,"ref":"hb_router.html#find/3"},{"type":"module","title":"hb_singleton","doc":"A parser that translates AO-Core HTTP API requests in TABM format\ninto an ordered list of messages to evaluate. The details of this format\nare described in `docs/ao-core-http-api.md`.\n\nSyntax overview:\n```\n    Singleton: Message containing keys and a `path` field,\n               which may also contain a query string of key-value pairs.\n\n    Path:\n        - /Part1/Part2/.../PartN/ => [Part1, Part2, ..., PartN]\n        - /ID/Part2/.../PartN => [ID, Part2, ..., PartN]\n\n    Part: (Key + Resolution), Device?, #{ K => V}?\n        - Part => #{ path => Part }\n        - Part&Key=Value => #{ path => Part, Key => Value }\n        - Part&Key => #{ path => Part, Key => true }\n        - Part&k1=v1&k2=v2 => #{ path => Part, k1 => <<\"v1\">>, k2 => <<\"v2\">> }\n        - Part~Device => {as, Device, #{ path => Part }}\n        - Part~D&K1=V1 => {as, D, #{ path => Part, K1 => <<\"v1\">> }}\n        - pt&k1+int=1 => #{ path => pt, k1 => 1 }\n        - pt~d&k1+int=1 => {as, d, #{ path => pt, k1 => 1 }}\n        - (/nested/path) => Resolution of the path /nested/path\n        - (/nested/path&k1=v1) => (resolve /nested/path)#{k1 => v1}\n        - (/nested/path~D&K1=V1) => (resolve /nested/path)#{K1 => V1}\n        - pt&k1+res=(/a/b/c) => #{ path => pt, k1 => (resolve /a/b/c) }\n    Key:\n        - key: <<\"value\">> => #{ key => <<\"value\">>, ... } for all messages\n        - n.key: <<\"value\">> => #{ key => <<\"value\">>, ... } for Nth message\n        - key+Int: 1 => #{ key => 1, ... }\n        - key+Res: /nested/path => #{ key => (resolve /nested/path), ... }\n        - N.Key+Res=(/a/b/c) => #{ Key => (resolve /a/b/c), ... }\n'''","ref":"hb_singleton.html"},{"type":"function","title":"hb_singleton.basic_hashpath_test/0","doc":"","ref":"hb_singleton.html#basic_hashpath_test/0"},{"type":"function","title":"hb_singleton.basic_hashpath_to_test/0","doc":"","ref":"hb_singleton.html#basic_hashpath_to_test/0"},{"type":"function","title":"hb_singleton.from/1","doc":"Normalize a singleton TABM message into a list of executable AO-Core\nmessages.","ref":"hb_singleton.html#from/1"},{"type":"function","title":"hb_singleton.inlined_keys_test/0","doc":"","ref":"hb_singleton.html#inlined_keys_test/0"},{"type":"function","title":"hb_singleton.inlined_keys_to_test/0","doc":"","ref":"hb_singleton.html#inlined_keys_to_test/0"},{"type":"function","title":"hb_singleton.multiple_inlined_keys_test/0","doc":"","ref":"hb_singleton.html#multiple_inlined_keys_test/0"},{"type":"function","title":"hb_singleton.multiple_inlined_keys_to_test/0","doc":"","ref":"hb_singleton.html#multiple_inlined_keys_to_test/0"},{"type":"function","title":"hb_singleton.multiple_messages_test/0","doc":"","ref":"hb_singleton.html#multiple_messages_test/0"},{"type":"function","title":"hb_singleton.multiple_messages_to_test/0","doc":"","ref":"hb_singleton.html#multiple_messages_to_test/0"},{"type":"function","title":"hb_singleton.parse_explicit_message_test/0","doc":"","ref":"hb_singleton.html#parse_explicit_message_test/0"},{"type":"function","title":"hb_singleton.path_parts_test/0","doc":"","ref":"hb_singleton.html#path_parts_test/0"},{"type":"function","title":"hb_singleton.scoped_key_test/0","doc":"","ref":"hb_singleton.html#scoped_key_test/0"},{"type":"function","title":"hb_singleton.scoped_key_to_test/0","doc":"","ref":"hb_singleton.html#scoped_key_to_test/0"},{"type":"function","title":"hb_singleton.simple_to_test/0","doc":"","ref":"hb_singleton.html#simple_to_test/0"},{"type":"function","title":"hb_singleton.single_message_test/0","doc":"","ref":"hb_singleton.html#single_message_test/0"},{"type":"function","title":"hb_singleton.subpath_in_inlined_test/0","doc":"","ref":"hb_singleton.html#subpath_in_inlined_test/0"},{"type":"function","title":"hb_singleton.subpath_in_inlined_to_test/0","doc":"","ref":"hb_singleton.html#subpath_in_inlined_to_test/0"},{"type":"function","title":"hb_singleton.subpath_in_key_test/0","doc":"","ref":"hb_singleton.html#subpath_in_key_test/0"},{"type":"function","title":"hb_singleton.subpath_in_key_to_test/0","doc":"","ref":"hb_singleton.html#subpath_in_key_to_test/0"},{"type":"function","title":"hb_singleton.subpath_in_path_test/0","doc":"","ref":"hb_singleton.html#subpath_in_path_test/0"},{"type":"function","title":"hb_singleton.subpath_in_path_to_test/0","doc":"","ref":"hb_singleton.html#subpath_in_path_to_test/0"},{"type":"function","title":"hb_singleton.to/1","doc":"Convert a list of AO-Core message into TABM message.","ref":"hb_singleton.html#to/1"},{"type":"function","title":"hb_singleton.to_suite_test_/0","doc":"","ref":"hb_singleton.html#to_suite_test_/0"},{"type":"function","title":"hb_singleton.typed_key_test/0","doc":"","ref":"hb_singleton.html#typed_key_test/0"},{"type":"function","title":"hb_singleton.typed_key_to_test/0","doc":"","ref":"hb_singleton.html#typed_key_to_test/0"},{"type":"type","title":"hb_singleton.ao_message/0","doc":"","ref":"hb_singleton.html#t:ao_message/0"},{"type":"type","title":"hb_singleton.tabm_message/0","doc":"","ref":"hb_singleton.html#t:tabm_message/0"},{"type":"module","title":"hb_store","doc":"","ref":"hb_store.html"},{"type":"function","title":"hb_store.add_path/2","doc":"Add two path components together. If no store implements the add_path\nfunction, we concatenate the paths.","ref":"hb_store.html#add_path/2"},{"type":"function","title":"hb_store.add_path/3","doc":"","ref":"hb_store.html#add_path/3"},{"type":"function","title":"hb_store.behavior_info/1","doc":"","ref":"hb_store.html#behavior_info/1"},{"type":"function","title":"hb_store.filter/2","doc":"Takes a store object and a filter function or match spec, returning a\nnew store object with only the modules that match the filter. The filter\nfunction takes 2 arguments: the scope and the options. It calls the store's\nscope function to get the scope of the module.","ref":"hb_store.html#filter/2"},{"type":"function","title":"hb_store.generate_test_suite/1","doc":"","ref":"hb_store.html#generate_test_suite/1"},{"type":"function","title":"hb_store.generate_test_suite/2","doc":"","ref":"hb_store.html#generate_test_suite/2"},{"type":"function","title":"hb_store.join/1","doc":"Join a list of path components together.","ref":"hb_store.html#join/1"},{"type":"function","title":"hb_store.list/2","doc":"List the keys in a group in the store. Use only in debugging.\nThe hyperbeam model assumes that stores are built as efficient hash-based\nstructures, so this is likely to be very slow for most stores.","ref":"hb_store.html#list/2"},{"type":"function","title":"hb_store.make_group/2","doc":"Make a group in the store. A group can be seen as a namespace or\n'directory' in a filesystem.","ref":"hb_store.html#make_group/2"},{"type":"function","title":"hb_store.make_link/3","doc":"Make a link from one path to another in the store.","ref":"hb_store.html#make_link/3"},{"type":"function","title":"hb_store.path/1","doc":"Create a path from a list of path components. If no store implements\nthe path function, we return the path with the 'default' transformation (id).","ref":"hb_store.html#path/1"},{"type":"function","title":"hb_store.path/2","doc":"","ref":"hb_store.html#path/2"},{"type":"function","title":"hb_store.read/2","doc":"Read a key from the store.","ref":"hb_store.html#read/2"},{"type":"function","title":"hb_store.reset/1","doc":"Delete all of the keys in a store. Should be used with extreme\ncaution. Lost data can lose money in many/most of hyperbeam's use cases.","ref":"hb_store.html#reset/1"},{"type":"function","title":"hb_store.resolve/2","doc":"Follow links through the store to resolve a path to its ultimate target.","ref":"hb_store.html#resolve/2"},{"type":"function","title":"hb_store.scope/2","doc":"Limit the store scope to only a specific (set of) option(s).\nTakes either an Opts message or store, and either a single scope or a list\nof scopes.","ref":"hb_store.html#scope/2"},{"type":"function","title":"hb_store.sort/2","doc":"Order a store by a preference of its scopes. This is useful for making\nsure that faster (or perhaps cheaper) stores are used first. If a list is\nprovided, it will be used as a preference order. If a map is provided,\nscopes will be ordered by the scores in the map. Any unknown scopes will\ndefault to a score of 0.","ref":"hb_store.html#sort/2"},{"type":"function","title":"hb_store.start/1","doc":"","ref":"hb_store.html#start/1"},{"type":"function","title":"hb_store.stop/1","doc":"","ref":"hb_store.html#stop/1"},{"type":"function","title":"hb_store.store_suite_test_/0","doc":"","ref":"hb_store.html#store_suite_test_/0"},{"type":"function","title":"hb_store.test_stores/0","doc":"","ref":"hb_store.html#test_stores/0"},{"type":"function","title":"hb_store.type/2","doc":"Get the type of element of a given path in the store. This can be\na performance killer if the store is remote etc. Use only when necessary.","ref":"hb_store.html#type/2"},{"type":"function","title":"hb_store.write/3","doc":"Write a key with a value to the store.","ref":"hb_store.html#write/3"},{"type":"module","title":"hb_store_fs","doc":"","ref":"hb_store_fs.html"},{"type":"function","title":"hb_store_fs.list/2","doc":"List contents of a directory in the store.","ref":"hb_store_fs.html#list/2"},{"type":"function","title":"hb_store_fs.make_group/2","doc":"Create a directory (group) in the store.","ref":"hb_store_fs.html#make_group/2"},{"type":"function","title":"hb_store_fs.make_link/3","doc":"Create a symlink, handling the case where the link would point to itself.","ref":"hb_store_fs.html#make_link/3"},{"type":"function","title":"hb_store_fs.read/2","doc":"Read a key from the store, following symlinks as needed.","ref":"hb_store_fs.html#read/2"},{"type":"function","title":"hb_store_fs.reset/1","doc":"Reset the store by completely removing its directory and recreating it.","ref":"hb_store_fs.html#reset/1"},{"type":"function","title":"hb_store_fs.resolve/2","doc":"Replace links in a path successively, returning the final path.\nEach element of the path is resolved in turn, with the result of each\nresolution becoming the prefix for the next resolution. This allows \npaths to resolve across many links. For example, a structure as follows:\n    /a/b/c: \"Not the right data\"\n    /a/b -> /a/alt-b\n    /a/alt-b/c: \"Correct data\"\nwill resolve \"a/b/c\" to \"Correct data\".","ref":"hb_store_fs.html#resolve/2"},{"type":"function","title":"hb_store_fs.scope/1","doc":"The file-based store is always local, for now. In the future, we may\nwant to allow that an FS store is shared across a cluster and thus remote.","ref":"hb_store_fs.html#scope/1"},{"type":"function","title":"hb_store_fs.start/1","doc":"Initialize the file system store with the given data directory.","ref":"hb_store_fs.html#start/1"},{"type":"function","title":"hb_store_fs.stop/1","doc":"Stop the file system store. Currently a no-op.","ref":"hb_store_fs.html#stop/1"},{"type":"function","title":"hb_store_fs.type/2","doc":"Determine the type of a key in the store.","ref":"hb_store_fs.html#type/2"},{"type":"function","title":"hb_store_fs.write/3","doc":"Write a value to the specified path in the store.","ref":"hb_store_fs.html#write/3"},{"type":"module","title":"hb_store_gateway","doc":"A store module that reads data from the nodes Arweave gateway and \nGraphQL routes, additionally including additional store-specific routes.","ref":"hb_store_gateway.html"},{"type":"function","title":"hb_store_gateway.cache_read_message_test/0","doc":"Ensure that saving to the gateway store works.","ref":"hb_store_gateway.html#cache_read_message_test/0"},{"type":"function","title":"hb_store_gateway.external_http_access_test/0","doc":"Test that the default node config allows for data to be accessed.","ref":"hb_store_gateway.html#external_http_access_test/0"},{"type":"function","title":"hb_store_gateway.graphql_as_store_test_/0","doc":"Store is accessible via the default options.","ref":"hb_store_gateway.html#graphql_as_store_test_/0"},{"type":"function","title":"hb_store_gateway.graphql_from_cache_test/0","doc":"Stored messages are accessible via `hb_cache` accesses.","ref":"hb_store_gateway.html#graphql_from_cache_test/0"},{"type":"function","title":"hb_store_gateway.list/2","doc":"","ref":"hb_store_gateway.html#list/2"},{"type":"function","title":"hb_store_gateway.manual_local_cache_test/0","doc":"","ref":"hb_store_gateway.html#manual_local_cache_test/0"},{"type":"function","title":"hb_store_gateway.read/2","doc":"Read the data at the given key from the GraphQL route. Will only attempt\nto read the data if the key is an ID.","ref":"hb_store_gateway.html#read/2"},{"type":"function","title":"hb_store_gateway.resolve/2","doc":"","ref":"hb_store_gateway.html#resolve/2"},{"type":"function","title":"hb_store_gateway.resolve_on_gateway_test_/0","doc":"","ref":"hb_store_gateway.html#resolve_on_gateway_test_/0"},{"type":"function","title":"hb_store_gateway.scope/1","doc":"The scope of a GraphQL store is always remote, due to performance.","ref":"hb_store_gateway.html#scope/1"},{"type":"function","title":"hb_store_gateway.specific_route_test/0","doc":"Routes can be specified in the options, overriding the default routes.\nWe test this by inversion: If the above cache read test works, then we know \nthat the default routes allow access to the item. If the test below were to\nproduce the same result, despite an empty 'only' route list, then we would\nknow that the module is not respecting the route list.","ref":"hb_store_gateway.html#specific_route_test/0"},{"type":"function","title":"hb_store_gateway.type/2","doc":"Get the type of the data at the given key. We potentially cache the\nresult, so that we don't have to read the data from the GraphQL route\nmultiple times.","ref":"hb_store_gateway.html#type/2"},{"type":"module","title":"hb_store_remote_node","doc":"A store module that reads data from another AO node.\nNotably, this store only provides the _read_ side of the store interface.\nThe write side could be added, returning an commitment that the data has\nbeen written to the remote node. In that case, the node would probably want\nto upload it to an Arweave bundler to ensure persistence, too.","ref":"hb_store_remote_node.html"},{"type":"function","title":"hb_store_remote_node.make_link/3","doc":"Link a source to a destination in the remote node.\n%\nConstructs an HTTP POST link request. If a wallet is provided,\nthe message is signed. Returns {ok, Path} on HTTP 200, or\n{error, Reason} on failure.","ref":"hb_store_remote_node.html#make_link/3"},{"type":"function","title":"hb_store_remote_node.read/2","doc":"Read a key from the remote node.\n%\nMakes an HTTP GET request to the remote node and returns the\ncommitted message.\n%\n@param Opts A map of options (including node configuration).\n@param Key The key to read.\n@returns {ok, Msg} on success or not_found if the key is missing.","ref":"hb_store_remote_node.html#read/2"},{"type":"function","title":"hb_store_remote_node.read_test/0","doc":"Test that we can create a store, write a random message to it, then\nstart a remote node with that store, and read the message from it.","ref":"hb_store_remote_node.html#read_test/0"},{"type":"function","title":"hb_store_remote_node.resolve/2","doc":"Resolve a key path in the remote store.\n%\nFor the remote node store, the key is returned as-is.\n%\n@param Data A map containing node configuration.\n@param Key The key to resolve.\n@returns The resolved key.","ref":"hb_store_remote_node.html#resolve/2"},{"type":"function","title":"hb_store_remote_node.scope/1","doc":"Return the scope of this store.\n\nFor the remote store, the scope is always `remote`.\n\n@param Arg An arbitrary parameter (ignored).\n@returns remote.","ref":"hb_store_remote_node.html#scope/1"},{"type":"function","title":"hb_store_remote_node.type/2","doc":"Determine the type of value at a given key.\n%\nRemote nodes support only the `simple` type or `not_found`.\n%\n@param Opts A map of options (including node configuration).\n@param Key The key whose value type is determined.\n@returns simple if found, or not_found otherwise.","ref":"hb_store_remote_node.html#type/2"},{"type":"function","title":"hb_store_remote_node.write/3","doc":"Write a key to the remote node.\n%\nConstructs an HTTP POST write request. If a wallet is provided,\nthe message is signed. Returns {ok, Path} on HTTP 200, or\n{error, Reason} on failure.\n%\n@param Opts A map of options (including node configuration).\n@param Key The key to write.\n@param Value The value to store.\n@returns {ok, Path} on success or {error, Reason} on failure.","ref":"hb_store_remote_node.html#write/3"},{"type":"module","title":"hb_store_rocksdb","doc":"A process wrapper over rocksdb storage. Replicates functionality of the\n     hb_fs_store module.\n\n    Encodes the item types with the help of prefixes, see `encode_value/2`\n    and `decode_value/1`\n@end\n%%%-----------------------------------------------------------------------------","ref":"hb_store_rocksdb.html"},{"type":"function","title":"hb_store_rocksdb.add_path/3","doc":"Add two path components together. // is not used","ref":"hb_store_rocksdb.html#add_path/3"},{"type":"function","title":"hb_store_rocksdb.code_change/3","doc":"","ref":"hb_store_rocksdb.html#code_change/3"},{"type":"function","title":"hb_store_rocksdb.enabled/0","doc":"Returns whether the RocksDB store is enabled.","ref":"hb_store_rocksdb.html#enabled/0"},{"type":"function","title":"hb_store_rocksdb.handle_call/3","doc":"","ref":"hb_store_rocksdb.html#handle_call/3"},{"type":"function","title":"hb_store_rocksdb.handle_cast/2","doc":"","ref":"hb_store_rocksdb.html#handle_cast/2"},{"type":"function","title":"hb_store_rocksdb.handle_info/2","doc":"","ref":"hb_store_rocksdb.html#handle_info/2"},{"type":"function","title":"hb_store_rocksdb.init/1","doc":"","ref":"hb_store_rocksdb.html#init/1"},{"type":"function","title":"hb_store_rocksdb.list/0","doc":"List all items registered in rocksdb store. Should be used only\nfor testing/debugging, as the underlying operation is doing full traversal\non the KV storage, and is slow.","ref":"hb_store_rocksdb.html#list/0"},{"type":"function","title":"hb_store_rocksdb.list/2","doc":"Returns the full list of items stored under the given path. Where the path\nchild items is relevant to the path of parentItem. (Same as in `hb_store_fs`).","ref":"hb_store_rocksdb.html#list/2"},{"type":"function","title":"hb_store_rocksdb.make_group/2","doc":"Creates group under the given path.","ref":"hb_store_rocksdb.html#make_group/2"},{"type":"function","title":"hb_store_rocksdb.make_link/3","doc":"","ref":"hb_store_rocksdb.html#make_link/3"},{"type":"function","title":"hb_store_rocksdb.path/2","doc":"Return path","ref":"hb_store_rocksdb.html#path/2"},{"type":"function","title":"hb_store_rocksdb.read/2","doc":"Read data by the key.\nRecursively follows link messages","ref":"hb_store_rocksdb.html#read/2"},{"type":"function","title":"hb_store_rocksdb.reset/1","doc":"","ref":"hb_store_rocksdb.html#reset/1"},{"type":"function","title":"hb_store_rocksdb.resolve/2","doc":"Replace links in a path with the target of the link.","ref":"hb_store_rocksdb.html#resolve/2"},{"type":"function","title":"hb_store_rocksdb.scope/1","doc":"Return scope (local)","ref":"hb_store_rocksdb.html#scope/1"},{"type":"function","title":"hb_store_rocksdb.start/1","doc":"","ref":"hb_store_rocksdb.html#start/1"},{"type":"function","title":"hb_store_rocksdb.start_link/1","doc":"","ref":"hb_store_rocksdb.html#start_link/1"},{"type":"function","title":"hb_store_rocksdb.stop/1","doc":"","ref":"hb_store_rocksdb.html#stop/1"},{"type":"function","title":"hb_store_rocksdb.terminate/2","doc":"","ref":"hb_store_rocksdb.html#terminate/2"},{"type":"function","title":"hb_store_rocksdb.type/2","doc":"Get type of the current item","ref":"hb_store_rocksdb.html#type/2"},{"type":"function","title":"hb_store_rocksdb.write/3","doc":"Write given Key and Value to the database","ref":"hb_store_rocksdb.html#write/3"},{"type":"type","title":"hb_store_rocksdb.key/0","doc":"","ref":"hb_store_rocksdb.html#t:key/0"},{"type":"type","title":"hb_store_rocksdb.value/0","doc":"","ref":"hb_store_rocksdb.html#t:value/0"},{"type":"module","title":"hb_structured_fields","doc":"A module for parsing and converting between Erlang and HTTP Structured\nFields, as described in RFC-9651.\n\nThe mapping between Erlang and structured headers types is as follow:\n\nList: list()\nInner list: {list, [item()], params()}\nDictionary: [{binary(), item()}]\n  There is no distinction between empty list and empty dictionary.\nItem with parameters: {item, bare_item(), params()}\nParameters: [{binary(), bare_item()}]\nBare item: one bare_item() that can be of type:\nInteger: integer()\nDecimal: {decimal, {integer(), integer()}}\nString: {string, binary()}\nToken: {token, binary()}\nByte sequence: {binary, binary()}\nBoolean: boolean()","ref":"hb_structured_fields.html"},{"type":"function","title":"hb_structured_fields.bare_item/1","doc":"","ref":"hb_structured_fields.html#bare_item/1"},{"type":"function","title":"hb_structured_fields.dictionary/1","doc":"","ref":"hb_structured_fields.html#dictionary/1"},{"type":"function","title":"hb_structured_fields.from_bare_item/1","doc":"Convert an SF `bare_item` to an Erlang term.","ref":"hb_structured_fields.html#from_bare_item/1"},{"type":"function","title":"hb_structured_fields.item/1","doc":"","ref":"hb_structured_fields.html#item/1"},{"type":"function","title":"hb_structured_fields.list/1","doc":"","ref":"hb_structured_fields.html#list/1"},{"type":"function","title":"hb_structured_fields.parse_bare_item/1","doc":"Parse an integer or decimal.","ref":"hb_structured_fields.html#parse_bare_item/1"},{"type":"function","title":"hb_structured_fields.parse_dictionary/1","doc":"Parse a binary SF dictionary.","ref":"hb_structured_fields.html#parse_dictionary/1"},{"type":"function","title":"hb_structured_fields.parse_item/1","doc":"Parse a binary SF item to an SF `item`.","ref":"hb_structured_fields.html#parse_item/1"},{"type":"function","title":"hb_structured_fields.parse_list/1","doc":"Parse a binary SF list.","ref":"hb_structured_fields.html#parse_list/1"},{"type":"function","title":"hb_structured_fields.parse_struct_hd_test_/0","doc":"","ref":"hb_structured_fields.html#parse_struct_hd_test_/0"},{"type":"function","title":"hb_structured_fields.struct_hd_identity_test_/0","doc":"","ref":"hb_structured_fields.html#struct_hd_identity_test_/0"},{"type":"function","title":"hb_structured_fields.to_dictionary/1","doc":"Convert a map to a dictionary.","ref":"hb_structured_fields.html#to_dictionary/1"},{"type":"function","title":"hb_structured_fields.to_dictionary_depth_test/0","doc":"","ref":"hb_structured_fields.html#to_dictionary_depth_test/0"},{"type":"function","title":"hb_structured_fields.to_dictionary_test/0","doc":"","ref":"hb_structured_fields.html#to_dictionary_test/0"},{"type":"function","title":"hb_structured_fields.to_item/1","doc":"Convert an item to a dictionary.","ref":"hb_structured_fields.html#to_item/1"},{"type":"function","title":"hb_structured_fields.to_item/2","doc":"","ref":"hb_structured_fields.html#to_item/2"},{"type":"function","title":"hb_structured_fields.to_item_test/0","doc":"","ref":"hb_structured_fields.html#to_item_test/0"},{"type":"function","title":"hb_structured_fields.to_list/1","doc":"Convert a list to an SF term.","ref":"hb_structured_fields.html#to_list/1"},{"type":"function","title":"hb_structured_fields.to_list_depth_test/0","doc":"","ref":"hb_structured_fields.html#to_list_depth_test/0"},{"type":"function","title":"hb_structured_fields.to_list_test/0","doc":"","ref":"hb_structured_fields.html#to_list_test/0"},{"type":"type","title":"hb_structured_fields.sh_bare_item/0","doc":"","ref":"hb_structured_fields.html#t:sh_bare_item/0"},{"type":"type","title":"hb_structured_fields.sh_decimal/0","doc":"","ref":"hb_structured_fields.html#t:sh_decimal/0"},{"type":"type","title":"hb_structured_fields.sh_dictionary/0","doc":"","ref":"hb_structured_fields.html#t:sh_dictionary/0"},{"type":"type","title":"hb_structured_fields.sh_inner_list/0","doc":"","ref":"hb_structured_fields.html#t:sh_inner_list/0"},{"type":"type","title":"hb_structured_fields.sh_item/0","doc":"","ref":"hb_structured_fields.html#t:sh_item/0"},{"type":"type","title":"hb_structured_fields.sh_list/0","doc":"","ref":"hb_structured_fields.html#t:sh_list/0"},{"type":"type","title":"hb_structured_fields.sh_params/0","doc":"","ref":"hb_structured_fields.html#t:sh_params/0"},{"type":"module","title":"hb_sup","doc":"","ref":"hb_sup.html"},{"type":"function","title":"hb_sup.init/1","doc":"","ref":"hb_sup.html#init/1"},{"type":"function","title":"hb_sup.start_link/0","doc":"","ref":"hb_sup.html#start_link/0"},{"type":"function","title":"hb_sup.start_link/1","doc":"","ref":"hb_sup.html#start_link/1"},{"type":"module","title":"hb_test_utils","doc":"Simple utilities for testing HyperBEAM.","ref":"hb_test_utils.html"},{"type":"function","title":"hb_test_utils.run/4","doc":"","ref":"hb_test_utils.html#run/4"},{"type":"function","title":"hb_test_utils.suite_with_opts/2","doc":"Run each test in a suite with each set of options. Start and reset\nthe store(s) for each test. Expects suites to be a list of tuples with\nthe test name, description, and test function.\nThe list of `Opts` should contain maps with the `name` and `opts` keys.\nEach element may also contain a `skip` key with a list of test names to skip.\nThey can also contain a `desc` key with a description of the options.","ref":"hb_test_utils.html#suite_with_opts/2"},{"type":"module","title":"hb_util","doc":"A collection of utility functions for building with HyperBEAM.","ref":"hb_util.html"},{"type":"function","title":"hb_util.atom/1","doc":"Coerce a string to an atom.","ref":"hb_util.html#atom/1"},{"type":"function","title":"hb_util.bin/1","doc":"Coerce a value to a binary.","ref":"hb_util.html#bin/1"},{"type":"function","title":"hb_util.count/2","doc":"","ref":"hb_util.html#count/2"},{"type":"function","title":"hb_util.debug_fmt/1","doc":"Convert a term to a string for debugging print purposes.","ref":"hb_util.html#debug_fmt/1"},{"type":"function","title":"hb_util.debug_fmt/2","doc":"","ref":"hb_util.html#debug_fmt/2"},{"type":"function","title":"hb_util.debug_print/4","doc":"Print a message to the standard error stream, prefixed by the amount\nof time that has elapsed since the last call to this function.","ref":"hb_util.html#debug_print/4"},{"type":"function","title":"hb_util.decode/1","doc":"Try to decode a URL safe base64 into a binary or throw an error when\ninvalid.","ref":"hb_util.html#decode/1"},{"type":"function","title":"hb_util.deep_merge/2","doc":"Deep merge two maps, recursively merging nested maps.","ref":"hb_util.html#deep_merge/2"},{"type":"function","title":"hb_util.encode/1","doc":"Encode a binary to URL safe base64 binary string.","ref":"hb_util.html#encode/1"},{"type":"function","title":"hb_util.eunit_print/2","doc":"Format and print an indented string to standard error.","ref":"hb_util.html#eunit_print/2"},{"type":"function","title":"hb_util.find_value/2","doc":"Find the value associated with a key in parsed a JSON structure list.","ref":"hb_util.html#find_value/2"},{"type":"function","title":"hb_util.find_value/3","doc":"","ref":"hb_util.html#find_value/3"},{"type":"function","title":"hb_util.float/1","doc":"Coerce a string to a float.","ref":"hb_util.html#float/1"},{"type":"function","title":"hb_util.format_binary/1","doc":"Format a binary as a short string suitable for printing.","ref":"hb_util.html#format_binary/1"},{"type":"function","title":"hb_util.format_indented/2","doc":"Format a string with an indentation level.","ref":"hb_util.html#format_indented/2"},{"type":"function","title":"hb_util.format_indented/3","doc":"","ref":"hb_util.html#format_indented/3"},{"type":"function","title":"hb_util.format_maybe_multiline/2","doc":"Format a map as either a single line or a multi-line string depending\non the value of the `debug_print_map_line_threshold` runtime option.","ref":"hb_util.html#format_maybe_multiline/2"},{"type":"function","title":"hb_util.format_trace_short/1","doc":"Format a trace to a short string.","ref":"hb_util.html#format_trace_short/1"},{"type":"function","title":"hb_util.hd/1","doc":"Get the first element (the lowest integer key >= 1) of a numbered map.\nOptionally, it takes a specifier of whether to return the key or the value,\nas well as a standard map of HyperBEAM runtime options.","ref":"hb_util.html#hd/1"},{"type":"function","title":"hb_util.hd/2","doc":"","ref":"hb_util.html#hd/2"},{"type":"function","title":"hb_util.hd/3","doc":"","ref":"hb_util.html#hd/3"},{"type":"function","title":"hb_util.human_id/1","doc":"Convert a native binary ID to a human readable ID. If the ID is already\na human readable ID, it is returned as is.","ref":"hb_util.html#human_id/1"},{"type":"function","title":"hb_util.human_int/1","doc":"Add `,` characters to a number every 3 digits to make it human readable.","ref":"hb_util.html#human_int/1"},{"type":"function","title":"hb_util.id/1","doc":"Return the human-readable form of an ID of a message when given either\na message explicitly, raw encoded ID, or an Erlang Arweave `tx` record.","ref":"hb_util.html#id/1"},{"type":"function","title":"hb_util.id/2","doc":"","ref":"hb_util.html#id/2"},{"type":"function","title":"hb_util.int/1","doc":"Coerce a string to an integer.","ref":"hb_util.html#int/1"},{"type":"function","title":"hb_util.is_string_list/1","doc":"Is the given term a string list?","ref":"hb_util.html#is_string_list/1"},{"type":"function","title":"hb_util.key_to_atom/2","doc":"Convert keys in a map to atoms, lowering `-` to `_`.","ref":"hb_util.html#key_to_atom/2"},{"type":"function","title":"hb_util.list/1","doc":"Coerce a value to a list.","ref":"hb_util.html#list/1"},{"type":"function","title":"hb_util.list_to_numbered_map/1","doc":"Convert a list of elements to a map with numbered keys.","ref":"hb_util.html#list_to_numbered_map/1"},{"type":"function","title":"hb_util.maybe_throw/2","doc":"Throw an exception if the Opts map has an `error_strategy` key with the\nvalue `throw`. Otherwise, return the value.","ref":"hb_util.html#maybe_throw/2"},{"type":"function","title":"hb_util.mean/1","doc":"","ref":"hb_util.html#mean/1"},{"type":"function","title":"hb_util.message_to_ordered_list/1","doc":"Take a message with numbered keys and convert it to a list of tuples\nwith the associated key as an integer and a value. Optionally, it takes a\nstandard map of HyperBEAM runtime options.","ref":"hb_util.html#message_to_ordered_list/1"},{"type":"function","title":"hb_util.message_to_ordered_list/2","doc":"","ref":"hb_util.html#message_to_ordered_list/2"},{"type":"function","title":"hb_util.native_id/1","doc":"Convert a human readable ID to a native binary ID. If the ID is already\na native binary ID, it is returned as is.","ref":"hb_util.html#native_id/1"},{"type":"function","title":"hb_util.number/1","doc":"Label a list of elements with a number.","ref":"hb_util.html#number/1"},{"type":"function","title":"hb_util.ok/1","doc":"Unwrap a tuple of the form `{ok, Value}', or throw/return, depending on\nthe value of the `error_strategy` option.","ref":"hb_util.html#ok/1"},{"type":"function","title":"hb_util.ok/2","doc":"","ref":"hb_util.html#ok/2"},{"type":"function","title":"hb_util.print_trace/4","doc":"Print the trace of the current stack, up to the first non-hyperbeam\nmodule. Prints each stack frame on a new line, until it finds a frame that\ndoes not start with a prefix in the `stack_print_prefixes` hb_opts.\nOptionally, you may call this function with a custom label and caller info,\nwhich will be used instead of the default.","ref":"hb_util.html#print_trace/4"},{"type":"function","title":"hb_util.print_trace_short/4","doc":"Print a trace to the standard error stream.","ref":"hb_util.html#print_trace_short/4"},{"type":"function","title":"hb_util.remove_common/2","doc":"Remove the common prefix from two strings, returning the remainder of the\nfirst string. This function also coerces lists to binaries where appropriate,\nreturning the type of the first argument.","ref":"hb_util.html#remove_common/2"},{"type":"function","title":"hb_util.remove_trailing_noise/2","doc":"","ref":"hb_util.html#remove_trailing_noise/2"},{"type":"function","title":"hb_util.safe_decode/1","doc":"Safely decode a URL safe base64 into a binary returning an ok or error\ntuple.","ref":"hb_util.html#safe_decode/1"},{"type":"function","title":"hb_util.safe_encode/1","doc":"Safely encode a binary to URL safe base64.","ref":"hb_util.html#safe_encode/1"},{"type":"function","title":"hb_util.short_id/1","doc":"Return a short ID for the different types of IDs used in AO-Core.","ref":"hb_util.html#short_id/1"},{"type":"function","title":"hb_util.stddev/1","doc":"","ref":"hb_util.html#stddev/1"},{"type":"function","title":"hb_util.to_hex/1","doc":"Convert a binary to a hex string. Do not use this for anything other than\ngenerating a lower-case, non-special character id. It should not become part of\nthe core protocol. We use b64u for efficient encoding.","ref":"hb_util.html#to_hex/1"},{"type":"function","title":"hb_util.to_lower/1","doc":"Convert a binary to a lowercase.","ref":"hb_util.html#to_lower/1"},{"type":"function","title":"hb_util.to_sorted_keys/1","doc":"Given a map or KVList, return a deterministically ordered list of its keys.","ref":"hb_util.html#to_sorted_keys/1"},{"type":"function","title":"hb_util.to_sorted_list/1","doc":"Given a map or KVList, return a deterministically sorted list of its\nkey-value pairs.","ref":"hb_util.html#to_sorted_list/1"},{"type":"function","title":"hb_util.trace_macro_helper/5","doc":"Utility function to help macro `?trace/0` remove the first frame of the\nstack trace.","ref":"hb_util.html#trace_macro_helper/5"},{"type":"function","title":"hb_util.until/1","doc":"Utility function to wait for a condition to be true. Optionally,\nyou can pass a function that will be called with the current count of\niterations, returning an integer that will be added to the count. Once the\ncondition is true, the function will return the count.","ref":"hb_util.html#until/1"},{"type":"function","title":"hb_util.until/2","doc":"","ref":"hb_util.html#until/2"},{"type":"function","title":"hb_util.until/3","doc":"","ref":"hb_util.html#until/3"},{"type":"function","title":"hb_util.variance/1","doc":"","ref":"hb_util.html#variance/1"},{"type":"module","title":"rsa_pss","doc":"Distributed under the Mozilla Public License v2.0. Original available at: https://github.com/potatosalad/erlang-crypto_rsassa_pss","ref":"rsa_pss.html"},{"type":"function","title":"rsa_pss.sign/3","doc":null,"ref":"rsa_pss.html#sign/3"},{"type":"function","title":"rsa_pss.sign/4","doc":null,"ref":"rsa_pss.html#sign/4"},{"type":"function","title":"rsa_pss.verify/4","doc":null,"ref":"rsa_pss.html#verify/4"},{"type":"function","title":"rsa_pss.verify_legacy/4","doc":null,"ref":"rsa_pss.html#verify_legacy/4"},{"type":"type","title":"rsa_pss.rsa_digest_type/0","doc":null,"ref":"rsa_pss.html#t:rsa_digest_type/0"},{"type":"type","title":"rsa_pss.rsa_private_key/0","doc":null,"ref":"rsa_pss.html#t:rsa_private_key/0"},{"type":"type","title":"rsa_pss.rsa_public_key/0","doc":null,"ref":"rsa_pss.html#t:rsa_public_key/0"},{"type":"extras","title":"README","doc":"![hyperbeam_logo-thin-3](https://github.com/user-attachments/assets/fcca891c-137e-4022-beff-360eb2a0d05e)\n\nThis repository contains a reference implementation of AO-Core, along with an\nErlang-based (BEAM) client implementing a number of devices for the protocol.\n\nAO-Core is a protocol built to enable decentralized computations, offering a\nseries of universal primitives to achieve this end. Instead of enforcing a single,\nmonolithic architecture, AO-Core provides a framework into which any number of\ndifferent computational models, encapsulated as primitive `devices`, can be attached.\n\nAO-Core's protocol offers a framework for decentralized computations, built upon the\nfollowing fundamental primitives:\n\n1. Hashpaths: A mechanism for referencing locations in a program's state-space\nprior to execution. These state-space `links` are represented as Merklized lists of\nprograms inputs and initial states.\n2. A unified data structure for representing program states as HTTP documents,\nas described in the [HTTP Semantics RFC](https://www.rfc-editor.org/rfc/rfc9110.html).\n3. A unified protocol for expressing `commitments` of the `states` found at\nparticular `hashpaths`. These commitments allow nodes to participate in varied\neconomic and cryptographic mechanisms to prove and challenge each-other's\nrepresentations regarding the programs that operate inside the AO-Core protocol.\n4. A meta-VM that allows any number of different virtual machines and computational\nmodels (`devices`) to be executed inside the AO-Core protocol, while enabling their\nstates and inputs to be calculated and committed to in a unified format.","ref":"readme.html"},{"type":"extras","title":"What is HyperBeam? - README","doc":"HyperBeam is a client implementation of the AO-Core protocol, written in Erlang.\nIt can be seen as the 'node' software for the decentralized operating system that\nAO enables; abstracting hardware provisioning and details from the execution of\nindividual programs.\n\nHyperBEAM node operators can offer the services of their machine to others inside\nthe network by electing to execute any number of different `devices`, charging \nusers for their computation as necessary.\n\nEach HyperBEAM node is configured using the `~meta@1.0` device, which provides\nan interface for specifying the node's hardware, supported devices, metering and\npayments information, amongst other configuration options.","ref":"readme.html#what-is-hyperbeam"},{"type":"extras","title":"Getting Started - README","doc":"To begin using HyperBeam, you will need to install:\n\n- The Erlang runtime (OTP 27)\n- Rebar3\n- Git\n- Docker (optional, for containerized deployment)\n\nYou will also need:\n- A wallet and it's keyfile *(generate a new wallet and keyfile with https://www.wander.app)*\n\nThen you can clone the HyperBEAM source and build it:\n\n```bash\ngit clone https://github.com/permaweb/HyperBEAM.git\ncd HyperBEAM\nrebar3 compile\n```\n\nIf you would prefer to execute HyperBEAM in a containerized environment, you\ncan use the provided Dockerfile to build a container image.\n\n```bash\ndocker build -t hyperbeam .\n```\n\nIf you intend to offer TEE-based computation of AO-Core devices, please see the\n[`HyperBEAM OS`](https://github.com/permaweb/hb-os) repo for details on configuration and deployment.","ref":"readme.html#getting-started"},{"type":"extras","title":"Running HyperBEAM - README","doc":"Once the code is compiled, you can start HyperBEAM with:\n\n```bash\n# Start with default configuration\nrebar3 shell\n```\n\nThe default configuration uses settings from `hb_opts.erl`, which preloads \nall devices and sets up default stores on port 10000.","ref":"readme.html#running-hyperbeam"},{"type":"extras","title":"Optional Build Profiles - README","doc":"HyperBEAM supports several optional build profiles that enable additional features:\n\n- `genesis_wasm`: Enables Genesis WebAssembly support\n- `rocksdb`: Enables RocksDB storage backend (adds RocksDB v1.8.0 dependency)\n- `http3`: Enables HTTP/3 support via QUIC protocol\n\n\nUsing these profiles allows you to optimize HyperBEAM for your specific use case without adding unnecessary dependencies to the base installation.\n\nTo start a shell with profiles:\n\n```bash\n# Single profile\nrebar3 as rocksdb shell\n\n# Multiple profiles\nrebar3 as rocksdb,genesis_wasm shell\n```\n\nTo create a release with profiles:\n\n```bash\n# Create release with profiles\nrebar3 as rocksdb,genesis_wasm release\n```\n\nNote: Profiles modify compile-time options that get baked into the release. Choose the profiles you need before starting HyperBEAM.","ref":"readme.html#optional-build-profiles"},{"type":"extras","title":"Verify Installation - README","doc":"To verify that your HyperBEAM node is running correctly, check:\n\n```bash\ncurl http://localhost:10000/~meta@1.0/info\n```\n\nIf you receive a response with node information, your HyperBEAM\ninstallation is working properly.","ref":"readme.html#verify-installation"},{"type":"extras","title":"Configuration - README","doc":"HyperBEAM can be configured using a `~meta@1.0` device, which is initialized\n using either command line arguments or a configuration file.","ref":"readme.html#configuration"},{"type":"extras","title":"Configuration with `config.flat` - README","doc":"The simplest way to configure HyperBEAM is using the `config.flat` file:\n\n1. A file named `config.flat` is already included in the project directory\n2. Update to include your configuration values:\n\n```\nport: 10000\npriv_key_location: /path/to/wallet.json\n```\n\n3. Start HyperBEAM with `rebar3 shell`\n\nHyperBEAM will automatically load your configuration and display the active\nsettings in the startup log.","ref":"readme.html#configuration-with-config-flat"},{"type":"extras","title":"Creating a Release - README","doc":"For production environments, you can create a standalone release:\n\n```bash\nrebar3 release\n```\n\nThis creates a release in `_build/default/rel/hb` that can be deployed independently.","ref":"readme.html#creating-a-release"},{"type":"extras","title":"Runtime Configuration Changes - README","doc":"Additionally, if you would like to modify a running node's configuration, you can\n do so by sending a HTTP Signed Message using any RFC-9421 compatible client\n  in the following form:\n\n```\nPOST /~meta@1.0/info\nYour-Config-Tag: Your-Config-Tag\n```\n\nThe individual headers provided in the message will each be interpreted as additional\nconfiguration options for the node.","ref":"readme.html#runtime-configuration-changes"},{"type":"extras","title":"Messages - README","doc":"HyperBEAM describes every piece of data as a `message`, which can be interpreted as\na binary term or as collection of named functions aka. a `Map` of functions.\n\nEvery message _may_ specify a `device` which is interpreted by the AO-Core compatible\nsystem in order to operate upon the message's contents, which to say read it, or\nexecute it. Executing a named function within a message, providing a map of arguments,\nresults in another `message`.\n\nIn this way, `messages` in AO-Core always _beget_ further `messages`, giving rise \nto a vast computational space, leveraging function application and composition at its core.\nFor those familiar with the concept, this programming model is similar to that \ndescribed by traditional `combinator` systems.\n\n> Notably, this computation does not require the computor of a message\n> to know the values of all the keys contained therin. In other words, keys\n> may be _lazily_ evaluated, and only by computors that are interested\n> in their outputs, or even _sharded_ across arbitrary sets of nodes, as necessary\n\nIf a `message` does not explicitly specify a `device`, its implied `device` is a\n `message@1.0`, which simply returns the binary or `message` at a given named function.","ref":"readme.html#messages"},{"type":"extras","title":"Devices - README","doc":"HyperBeam supports a number of different devices, each of which enable different\nservices to be offered by the node. There are presently 25 different devices\nincluded in the `preloaded_devices` of a HyperBEAM node, although it is possible\nto add and remove devices as necessary.","ref":"readme.html#devices"},{"type":"extras","title":"Preloaded Devices - README","doc":"The following devices are included in the `preloaded_devices` of a HyperBEAM node:\n\n- `~meta@1.0`: The `~meta@1.0` device is used to configure the node's hardware,\nsupported devices, metering and payments information, amongst other configuration options.\nAdditionally, this device allows external clients to find and validate the configuration\nof nodes in the network.\n\n- `~relay@1.0`: The `~relay@1.0` device is used to relay messages between nodes\nand the wider HTTP network. It offers an interface for sending and receiving messages\nto and from nodes in the network, using a variety of execution strategies.\n\n- `~wasm64@1.0`: The `~wasm64@1.0` device is used to execute WebAssembly code, using\nthe [Web Assembly Micro-Runtime (WAMR)](https://github.com/bytecodealliance/wasm-micro-runtime)\nunder-the-hood. WASM modules can be called from any other device, and can also be\nused to execute `devices` written in languages such as Rust, C, and C++.\n\n- `~json-iface@1.0`: The `~json-iface@1.0` device offers a translation layer between\nthe JSON-encoded message format used by AOS 2.0 and prior versions, to HyperBEAM's\nnative HTTP message format.\n\n- `~compute-lite@1.0`: The `~compute-lite@1.0` device is a lightweight device wrapping\na local WASM executor, used for executing legacynet AO processes inside HyperBEAM.\nSee the [HyperBEAM OS](https://github.com/permaweb/hb-os) repository for an \nexample setup with co-executing HyperBEAM and legacy-CU nodes.\n\n- `~snp@1.0`: The `~snp@1.0` device is used to generate and validate proofs that \nthe local node, or another node in the network, is executing inside a [Trusted Execution\nEnvironment (TEE)](https://en.wikipedia.org/wiki/Trusted_execution_environment).\nNodes executing inside these environments use an ephemeral key pair, provably\nonly existing inside the TEE, and can be signed commitments of AO-Core executions\nin a trust-minimized way.\n\n- `p4@1.0`: The `p4@1.0` device runs as a `pre-processor` and `post-processor` in\nthe framework provided by `~meta@1.0`, enabling a framework for node operators to\nsell usage of their machine's hardware to execute AO-Core devices. The `p4@1.0`\nframework offers two additional hooks, allowing node operators flexibility in how\ntheir hardware is offered: A `pricing` device, and a `ledger` device.\n\n- `~simple-pay@1.0`: Implements a simple, flexible pricing device that can be used\nin conjunction with `p4@1.0` to offer flat-fees for the execution of AO-Core messages.\n\n- `~faff@1.0`: A simple pricing (and ledger) device for `p4@1.0`, allowing nodes\nto offer access to their services only to a specific set of users. This device is\nuseful if you intend to operate your node onmly for personal use, or for a specific\nsubset of users (servicing an individual app, for example).\n\n- `scheduler@1.0`: The `scheduler@1.0` device is used to assign a linear hashpath\nto an execution, such that all users may access it with a deterministic ordering.\nWhen used in conjunction with other AO-Core devices, this allows for the creation\nof executions that mirror the behaviour of traditional smart contracting networks.\n\n- `stack@1.0`: The `stack@1.0` device is used to execute an ordered set of devices,\nover the same inputs. This device allows its users to create complex combinations of\nother devices and apply them as a single unit, with a single hashpath.\n\n- `~process@1.0`: Processes enable users to create persistent, shared executions\nthat can be accessed by any number of users, each of whom may add additional inputs\nto its hashpath. The `~process@1.0` allows users to customize the `execution` and\n`scheduler` devices that they choose for their process, such that a variety of different\nexecution patterns can be created. In addition, the `~process@1.0` device offers a\n`push` key, which moves messages from a process's execution `outbox` into the\nschedule of another execution.\n\nDetails on other devices found in the pre-loaded set can be located in their \nrespective documentation.","ref":"readme.html#preloaded-devices"},{"type":"extras","title":"Contributing - README","doc":"HyperBEAM is developed as an open source implementation of the AO-Core protocol \nby [Forward Research](https://fwd.arweave.net). Pull Requests are always welcome!\n\nTo get started building on HyperBEAM, check out the [hacking on HyperBEAM](./docs/hacking-on-hyperbeam.md)\nguide.","ref":"readme.html#contributing"},{"type":"extras","title":"Documentation - README","doc":"HyperBEAM implementation documentation is generated into the [`doc` directory](./doc)\nusing [`edoc`](https://www.erlang.org/doc/apps/edoc/chapter.html#content).\nYou can regenerate the documentation by running:\n\n```sh\nrebar3 edoc\n```\n\nThen you can serve them locally by running the following command, then navigating\nto `http://localhost:8000/index.html`.\n\n```sh\nerl -s inets -eval 'inets:start(httpd,[{server_name,\"HyperBEAM_Docs\"},{document_root, \"doc\"},{server_root, \"doc\"},{port, 8000},{mime_types,[{\"html\",\"text/html\"},{\"htm\",\"text/html\"},{\"js\",\"text/javascript\"},{\"css\",\"text/css\"},{\"gif\",\"image/gif\"},{\"jpg\",\"image/jpeg\"},{\"jpeg\",\"image/jpeg\"},{\"png\",\"image/png\"}]}]).'\n```","ref":"readme.html#documentation"},{"type":"extras","title":"AO","doc":"# AO\n\nOver the years, blockchain technology and decentralized systems have advanced significantly, yet they still face several fundamental challenges. Many traditional smart contract platforms struggle with scalability, meaning they cannot process many transactions quickly. They also have high costs for executing transactions and often come with limitations on how developers can program complex applications.\n\nDecentralized storage solutions have made it possible to store data permanently without relying on centralized servers. \nHowever, these solutions primarily focus on storing data, not executing programs. \nThis means that while they provide reliable storage, they lack the computational layer necessary to create fully autonomous applications that can operate without ongoing human intervention.\n\nAO is a decentralized computing system built on Arweave, which provides permanent storage. \nUnlike traditional blockchain platforms, AO is designed as a decentralized supercomputer capable of running thousands of processes in parallel. \nThis creates what is known as a hyper-parallel processing engine, allowing computations to happen at a much larger scale and with greater efficiency.\n\nAO is built to support autonomous agents—self-executing programs that run independently. These agents can respond to events, process data, and execute logic without requiring centralized control. Because AO combines Arweave’s permanent storage with a fully decentralized execution environment, it overcomes many of the limitations found in traditional blockchains, making it more scalable, cost-efficient, and resilient for decentralized applications.\n\nDecentralized systems like Bitcoin have introduced strong guarantees of trustlessness and permissionlessness, but they are not absolute. Users still need to trust that the majority of mining power follows the rules and that cryptographic security remains intact.\nAO introduces a new approach where users do not need to trust any central authority or even other participants in the network. Instead, it relies entirely on cryptographic proofs and decentralized execution. The AO-Core protocol, which powers AO, is built on two key principles:\n- Trustlessness – Anyone can participate in the network without having to trust other participants to act honestly. Everything is verifiable and executed based on predefined rules.\n- Permissionlessness – No entity, individual, or group has the power to block another participant from accessing or using the network. Everyone has equal access to computation and storage resources.\n\nUnlike rigid blockchain models that enforce the same rules for all users, AO and AO-Core provide flexibility by allowing participants to choose from different levels of security, scalability, and computational resources. This way, users can collaborate while still maintaining control over their trade-offs.\n\nAt the heart of AO is a unique concept: executable and isolated processes. These processes are self-contained pieces of code that are permanently stored on Arweave. Once stored, they can be executed at any time to produce specific results.\n\nOne of the key advantages of AO is that multiple processes can run in parallel, independently of one another. Unlike traditional blockchains that require every node to process every transaction, AO allows computations to happen separately and simultaneously.\n\nEach process in AO can:\n- Read and write data on Arweave.\n- Act as an autonomous agent, continuously responding to new events.\n- Communicate with other processes and nodes using messages.\n\nInstead of relying on a global consensus mechanism like Bitcoin or Ethereum, AO uses a more modular approach where messages trigger processes. These messages function like transactions or function calls in traditional systems, enabling communication and execution between nodes.\nThe execution of these processes is supported by modular layers, including transmission, scheduling, and execution components. This modular structure allows the network to scale efficiently and enables what is known as hyper-parallel computing, where thousands of computations can run simultaneously without interference.","ref":"intro.html"},{"type":"extras","title":"AO-Core protocol: A new way to Process Data - AO","doc":"The AO-Core protocol is a foundational system that makes it easier to process and manage data across decentralized networks. It is designed to work with standard web technologies like HTTP, making it more accessible and flexible than traditional blockchain-based architectures.\n\nAt its core, AO-Core helps users create, track, and combine pieces of information efficiently by organizing them into three main components:\n- Messages – The smallest units of data and computation.\n- Devices – Systems that process and store messages.\n- Paths – The structures that connect and organize messages over time.\n\nBy keeping messages small and lightweight, AO-Core reduces storage and computation costs. At the same time, it ensures scalability by distributing computations across multiple machines, increasing both speed and efficiency. Security is guaranteed through cryptographic proofs, ensuring that all data remains transparent and verifiable.","ref":"intro.html#ao-core-protocol-a-new-way-to-process-data"},{"type":"extras","title":"Messages: The Building Blocks of AO-Core - AO","doc":"At the heart of AO-Core’s decentralized system is the concept of Messages. Messages are the smallest units of data and computation, acting as the primary way that processes communicate and execute functions.\n\nMessages are processed by devices, stored permanently, and can be referenced at any time. This eliminates the need for centralized servers and ensures that every computation remains verifiable and traceable.\n\nUnlike traditional blockchains, where transactions are processed in a strict order, AO-Core allows messages to be processed in parallel. This is a critical innovation that enables AO’s hyper-parallel computing model.\nBecause messages are lightweight and cryptographically linked, they can be distributed across many devices without causing congestion. This makes AO-Core much more scalable than traditional blockchain-based smart contract platforms.\n\nMessages don’t just exist in isolation. Instead, they form a computation graph, where new messages reference previous ones to build complex logic and decision-making processes.\nFor example, one message might contain raw data, while another message applies a transformation to that data. A third message might then combine multiple previous messages to create a final result.\nThis graph-based structure eliminates the need for sequential processing and allows AO to operate in a truly decentralized and parallel manner.","ref":"intro.html#messages-the-building-blocks-of-ao-core"},{"type":"extras","title":"Devices: Systems That Process Messages - AO","doc":"In the AO-Core protocol, a Device is a system responsible for processing and interpreting messages. Devices determine how messages are executed and play a key role in making AO a modular and flexible decentralized computing framework.\n\nUnlike traditional blockchains, where every node processes every transaction, AO-Core distributes tasks among different devices. This eliminates bottlenecks, improves efficiency, and enables AO to support a wide variety of use cases without enforcing a single computation model.\n\nDevices are not fixed; they can be added or upgraded over time. Each node in the network can select which devices to support based on their hardware capabilities and desired functionality. This decentralized approach allows nodes to contribute computing power and storage in a way that best suits their resources.\n\nEach device has specific logic that defines:\n- How a message is processed. Some devices might execute code, while others might store or relay information.\n- What kind of data or computation it handles. For example, some devices execute WebAssembly code, while others schedule tasks.\n- How it interacts with other devices. Devices can communicate and depend on each other to perform more complex tasks.\n\nFor example, a high-performance node with a powerful CPU may choose to run compute-intensive devices, while a lightweight node might only handle relay or scheduling tasks. This flexibility ensures scalability and prevents wasted resources.","ref":"intro.html#devices-systems-that-process-messages"},{"type":"extras","title":"Paths: Tracing the history of computation - AO","doc":"A Path in AO-Core is a way to link and structure messages over time, creating an organized and verifiable history of computations.\n\nPaths ensure that every transformation applied to a message is traceable, reproducible, and secure. Instead of storing each version of data separately, AO-Core keeps only the essential transformation steps, reducing storage costs while maintaining a full history of how data evolved.\n\nEach Path generates a HashPath, a cryptographic fingerprint that records every change applied to a message. This ensures once a message is recorded in a HashPath, it cannot be altered without detection.\nInstead of storing every version of a message, AO-Core saves only the essential transformation steps. At the end, large-scale distributed computing becomes possible because only the necessary parts of a message are retrieved and processed, reducing network congestion.\n\nPaths function like version control systems (similar to Git), allowing AO-Core to maintain a structured and efficient way to track changes without wasting resources.","ref":"intro.html#paths-tracing-the-history-of-computation"},{"type":"extras","title":"HyperBEAM - AO","doc":"HyperBEAM is the main implementation of the AO-Core protocol, written in Erlang, and serves as the backbone of AO’s decentralized operating system. By using Erlang and its BEAM runtime, HyperBEAM benefits from a battle-tested ecosystem designed for fault tolerance and distributed computing. \nThis architecture ensures key features such as process isolation, message-passing, and efficient task scheduling, all of which align with the core principles of AO. Erlang’s lightweight processes and actor-based concurrency model mirror AO’s execution requirements, where independent agents must operate in parallel, communicate asynchronously, and recover from failures automatically—ensuring a robust, decentralized computing environment.\n\nOne of HyperBEAM’s most important capabilities is its abstraction and modular design, which allows programs to execute independently of the underlying hardware. HyperBEAM provides a hardware-agnostic execution layer, enabling computations to run across a distributed network of nodes. \nThis means that programs can function seamlessly across various infrastructures, ensuring scalability and resilience. By allowing nodes to dynamically select and execute different devices, HyperBEAM ensures adaptability while maintaining the robustness needed for a truly fault-tolerant and decentralized system.\n\nHyperBEAM plays a crucial role in coordinating node operations, allowing individual operators to contribute their machine’s resources to the network. Instead of enforcing a rigid infrastructure, AO enables flexible participation, where each node can expose specific services by running designated devices. \nThese devices act as modular execution units, providing different functionalities such as processing, communication, scheduling, and interaction with external networks. This decentralized approach ensures that AO can support a diverse set of computational needs, from handling autonomous agents to executing smart contract logic efficiently.\n\nTo facilitate these operations, HyperBEAM includes several preloaded devices that serve distinct purposes. \n- Then `~meta` device manages node configuration, defining hardware specifications and supported execution environments. \n- Then `~relay` device ensures seamless communication both within the network and with external systems, acting as the bridge between AO’s decentralized computation and the broader digital ecosystem. \n- Then `~process` device is responsible for maintaining persistent and shared executions, allowing long-running computations to be coordinated across multiple nodes. \n- Then `~scheduling` device ensures deterministic execution ordering by leveraging hashpath-based computations, guaranteeing consistency across distributed processes. \n- Then `~wasm64` device enables nodes to execute WebAssembly code, expanding the range of supported applications and ensuring compatibility with lightweight, portable execution environments.\netc.\n\nThrough this modular approach, HyperBEAM enables AO to function as a highly flexible and extensible decentralized supercomputer, where computation is not restricted to a single paradigm but can evolve dynamically based on the network’s needs.","ref":"intro.html#hyperbeam"},{"type":"extras","title":"The AO-Core protocol.","doc":"# The AO-Core protocol.","ref":"ao-core-protocol.html"},{"type":"extras","title":"Status: DRAFT-1 - The AO-Core protocol.","doc":"","ref":"ao-core-protocol.html#status-draft-1"},{"type":"extras","title":"Authors: Sam Williams, Tom Wilson, Tyler Hall, James Pichota, Vince Juliano < {first}@arweave.org> - The AO-Core protocol.","doc":"This document contains a rough specification, in `engineering note` form, for the AO-Core protocol. AO-Core is a method through which the permaweb can be interpreted as not only a flat, permanent ledger of data, but also as a mutable and reactive computation environment. Through this frame, the permaweb can be interpreted as a single, shared ['system image'](https://en.wikipedia.org/wiki/Single_system_image) that can be accessed and added to permissionlessly. Notably, the AO-Core itself intends to be a truly minimal computation model: It does not enforce any forms of consensus upon its execution directly, nor the use of any particular virtual machine. Even the requirements it imparts upon the host runtime environment are minimal. Instead, the AO-Core focuses on offering the simplest possible representation of _data_ and _computation_ upon that data, tailored for Arweave's distributed environment and [HTTP](https://datatracker.ietf.org/doc/html/rfc9114) access methods.\n\n[HyperBEAM](https://github.com/permaweb/HyperBEAM) is an implementation of the AO-Core protocol, as well as [AO](https://ao.arweave.net), a framework ontop of the AO-Core that constructs an environment for _trustless_ -- not just _permissionless_ -- computation.","ref":"ao-core-protocol.html#authors-sam-williams-tom-wilson-tyler-hall-james-pichota-vince-juliano-first-arweave-org"},{"type":"extras","title":"Context - The AO-Core protocol.","doc":"In this document we refer to 'the permaweb' as the collection of all pieces of permanent data stored on the [Arweave protocol](https://draft-17.arweave.dev/). In some other venues, 'the permaweb' is sometimes also used to refer to the _stack_ of protocols constructed ontop of Arweave in order to turn its permanent data replication into a 'web' of 'pages', as popularized by HTTP. For our purposes, we refer to the permaweb dataset at the level of abstract 'bundled items', as described in the [Arweave 2.0 release notes](https://github.com/ArweaveTeam/arweave/releases/tag/N.2.0.0.0), ignoring differences between 'base layer' Arweave transactions and bundled items.\n\nIn this specification we refer to a number of abstract properties of computation systems that are extremely useful, but often refered to with imprecision. For the avoidance of doubt we will be using them with the following defitions:\n\n`Permissionlessness`: No actor in the ecosystem may be denied -- by any other, or group thereof -- the ability to use the network.\n\n`Trustlessness`: Users can participate in the network without needing to trust other parties are not acting maliciously.\n\nBoth of these properties are extremely powerful and can only be offered by decentralized computation machines. These properties can also, unfortunately, only presently be offered in degrees. For example, Bitcoin may offer a high level of `permissionlessness`, but it is not absolute: A user still requires that a majority of the mining power does not censor their transactions or blocks containing them. Similarly, while your recipient of a Bitcoin transfer has a high degree of `trustlessness`, at minimum the user must still trust the implementors of the cryptographic verification algorithms of their client in order to use the system. Rather than offering a single, standardized approach to the problem of offering permissionless and trustlessness computation, which would necessitate enforcing the same trade-offs upon all parties, AO-Core and AO instead focus on allowing users to make their own appropriate choices amongst a variety of options while still being able to interoperate together.","ref":"ao-core-protocol.html#context"},{"type":"extras","title":"Machine Definition - The AO-Core protocol.","doc":"Every item on the permaweb is described as a `Message`. Each `Message` is interpretable by AO-Core as a `map` of named functions, or as a concrete binary term. Each function in a message may be called through the creation of another message, providing a map of arguments to the execution.\n\nEach `message` on the permaweb may optionally state a `Device` which should be used by AO-Core-compatible systems to interpret its contents. If no `Device` key is explicitly stated by the message, it must be infered as `Message`. The `Message` device should be implemented to simply return the binary or message at a given function name (a `key` in the map). Every `Device` must implement functions with the names `ID` and `Keys`. An `ID` is a function that can be used in order to refer to a message at a later time, while `Keys` should return a binary representation (with `Encoding` optionally specified as a parameter in the argument message) of each key in the message.\n\nConcretely, these relations can be expressed as follows:\n```\nTypes:\n    Permaweb :: [Message]\n    Message :: Map  | Binary\n\nFunctions:\n    Message1(Message2) => Message3 :: AO-Core.apply(Message1, Message2) => Message3\n    AO-Core.apply(Message1[Device], Message2, RuntimeEnv? :: Message) => Message3\n\nInvariants:\n    ∀ message ∈ Permaweb, ∃ <<\"ID\">> ∈ Message\n    ∀ message ∈ Permaweb, ∃ <<\"Keys\">> ∈ Message\n    ∀ message ∈ Permaweb, ∃ (<<\"Device\">> ∈ Message ∨ AO-Core.apply(Message, <<\"Device\">>) => <<\"Message\">>)\n```\n\nThe AO-Core protocol intends to be a computer native to the technologies of the internet. More specifically, we have focused its representation on compatibility with the HTTP family of protocols (`HTTP/{1.1,2,3}`). As such, every message in this system can be refered to via `Path`s. A path starts from a given message in the system (whether written to the permaweb yet or not), and applies a series of additional messages on top of it. Each resulting message itself must have an `ID` resolvable via its device -- subsequently enabling additional paths to be described atop the intermediate message.\n\nFor example:\n```\n    /StartingID/Input1ID/Input2ID/Input3ID =>\n\t/{AO-Core.apply(StartingMsg, Input1)}/Input2ID/Input3ID =>\n\t/OutputID1/Input2ID/Input3ID =>\n\t...\n\t/Output3ID\n        \n```","ref":"ao-core-protocol.html#machine-definition"},{"type":"extras","title":"Hyperbeam Devices - The AO-Core protocol.","doc":"The hyperbeam environment implements AO-Core through the use of device modules. Each module in the base deployment is namespaced `dev_*`, for example `dev_scheduler`. Devices in hyperbeam can communicate the basic set of keys that they offer using the function exports. Each of these functions is interpreted as yielding the value for a key on a message containing that device, with the key's name being defined by its function name. Each of these functions may take one to three arguments of the following: `function(StateMessage, InputMessage, Environment)`. It must yield a result of the form `{Status, NewMessage}`, where `Status` is typically (but not necessarily) either `ok` or `error`. If a device does not offer one of the required functions (`ID` or `device`), the environment falls back to the underlying `message` device implementations. `tolowercase` is applied to all function names before execution, and `-` characters are replaced with `_` to allow for more readable device implementations.\n\nThe special case `info/{0,1,2}` function may be implemented by the device, signalling environment requirements to hyperbeam. The `info` function can optionally take the `message` in question and the environment variables as arguments. It should return a map of environmental information of the following form:\n\n```\n\tinfo([Message, [Env]]) -> #{\n\t\thandler => Function\n\t\tdefault => Function,\n        exports => [Key]\n\t\tvariant => <<\"Variant/VersionID\">>,\n        ...\n\t}\n```\n\nSee `hb_ao.erl` for a full overview of supported keys.\n\nIf the `default` parameter is provided, the function will be used as the entrypoint all key resolution when a matching function is not found. The key's name is provided as an additional first argument in this case (`defaultFun/{2,3,4}`).\n\nIf the `handler` key is provided, all key resolution is routed through it instead of using Erlang functions.\n\nThe `uses` info key may be optionally utilized to signal to the environment which keys the device -- or a specific key inside it -- needs in order to execute. `UseDefinition`s should be of the following form:\n\n```\n\tUseDefition :: [Key] |\n\t\t#{ read => [Key], write => [Key] }\n```","ref":"ao-core-protocol.html#hyperbeam-devices"},{"type":"extras","title":"The Stack Device - The AO-Core protocol.","doc":"In order to allow messages to have more flexibility in their execution, hyperbeam offers an implementation of an AO-Core `stack`-style device, which combines a series of devices on a message into a single 'stack' of executable transformations. This device allows many complex forms of processors to be built inside the AO-Core environment -- for example, AO processes -- whiile transferring the architecture's modularity and flexibility to them.\n\nWhen added as the highest `Device` tag on a message, the stack device scans the remainder of the message's tags looking for (and subsequently loading) any other messages it finds. When a user then calls an execution on top of a message containing a device, the device passes through each of the elements of the stack in turn, 'folding' over it.","ref":"ao-core-protocol.html#the-stack-device"},{"type":"extras","title":"Paths, Hashpaths, and Commitments - The AO-Core protocol.","doc":"As described, all data in HyperBEAM is the result of the application of two messages together. Each piece of data has its own ID, which are 'mixed' cryptographically during execution resulting in a new value. This value is called the `hashpath`, and can be seen as a memoization of the tree of executions that were the source of a given piece of data.\n\nHashpaths are derived as follows:\n\n```\n    Message3/Hashpath :: Converve.apply(Message3/Hashpath-Alg, Message1/Hashpath, id(Message2))\n```\n\nDue to its Merklized form (each `Hashpath` is the result of cryptographically mixing two prior commitments), a hashpath is extremely short (32 bytes with the standard SHA2-256 `Hashpath-Alg`), yet can be used to reconstruct the entire tree of inputs necessary to generate a given state.\n\nWhen given together with the message that it resulted from and a cryptographic assurance, a hashpath represents a commitment of correctness of an output: That `Message1(Message)` does in fact give rise to the given collection of keys. This output itself is addressable via a traditional cryptographic hash, or via a signature upon that hash. While AO-Core provides the framework for these security mechanisms and their mutual compatibility, it does not enforce any single set of choices, such that users and implementors can make design decisions that are appropriate for their context. The AO protocol is an example implementation of this.\n\nNotably, this structure does not require a computor of `Message3` to know the value of every key inside it. This is helpful, for example, in circumstances in which `Message3` may be extremely large, yet the user only wants to know the value of a single given key inside the message, or to compute a new message that only references a small number of its keys. Through this mechanism computation can be effectively 'sharded' among an arbitrarily large set of computation nodes as necessary.","ref":"ao-core-protocol.html#paths-hashpaths-and-commitments"},{"type":"extras","title":"Redirection - The AO-Core protocol.","doc":"Because messages in the AO-Core protocol are immutably referenced (both by their message IDs and their hashpaths), immutable 'links' can be made between them. For example, as `Message1.Hashpath(Message2.ID)` will always generate the same `M3`, a commitment of this linkage can be distributed amongst peers and used to 'shortcut' computation. Since many repeated computations typically occur in a distributed compute network, these linkages can be spread amongst peers as necessary in order to optimize computation times. As AO-Core is expressed as natively using the HTTP Semantics, these linkages are simply expressed as `308 Permanent Redirect`s -- allowing even browsers and other HTTP clients to follow them, without needing any awareness of the mechanics of AO-Core protocol directly.","ref":"ao-core-protocol.html#redirection"},{"type":"extras","title":"AO-Core HTTP API Design notes","doc":"# AO-Core HTTP API Design notes","ref":"ao-http-api.html"},{"type":"extras","title":"Date: 11 Jan, 2025. - AO-Core HTTP API Design notes","doc":"The AO-Core protocol is designed to layer a computation system on top of\nHTTP Semantics. As such, it offers syntax for HTTP requests that allow users to\neasily manipulate and traverse through the computation graph. This document\ndescribes the semantics and syntax of the AO-Core HTTP API.","ref":"ao-http-api.html#date-11-jan-2025"},{"type":"extras","title":"Semantics and syntax - AO-Core HTTP API Design notes","doc":"- All paths for typical computations start with a base hashpath:\n```\nGET /hashpath1/...\n```\n- All keys after the base are interpreted as AO-Core messages individually, in \na chain. For example, `GET /hashpath1/key1/key2` is equivalent to:\n```\nGET /hashpath(hashpath1, key1)/key2\n```\n- Each path segment is interpreted as a key to resolve upon the message for the\nresolution of the previous message. The `key` is taken as the full path for\nthat message during that resolution.\n- When AO-Core is not given a base hashpath (the first key is not a 43 character\nbase64URL encoded string), the request message is assumed to be its own base\nmessage, with the path applied alone as the request (`Message2`).\n- Query parameters are treated as equivalent to headers.\n- When not otherwise specified, a query parameter or header is interpreted as\nbeing present in all messages in the path, in addition to the path key.\n- `+` in path segments delimits the `key` and an optional message dictionary. \nFor example, `GET /hashpath1/key1+dict1=val1/key2` adds `dict1=val1` to the\nmessage for the resolution of the `key1` key.\n- `N.KeyName` in headers or query parameters is interpreted as `KeyName` in the\nmessage dictionary for the resolution of the `N`th key.\n- `Key~DevName` in a path segment is interpreted as executing the message with\nthe `Device` set to `DevName`.\n- A dictionary key of form `Key|Type` is interpreted as a type annotation for\n`Key`, which can be used to parse the value of the key using HTTP Structured\nFields (RFC 8941).\n- Parentheses in key or path segments are interpreted as the result of the \nenclosed path, as if it were an independent invocation. For example, \n`GET /hashpath1/path2+key1=(/hashpath2/key2)` implies that `key1` in the \nmessage for the resolution of `path2` is the result of the invocation of \n`/hashpath2/key2`.","ref":"ao-http-api.html#semantics-and-syntax"},{"type":"extras","title":"Example workflows - AO-Core HTTP API Design notes","doc":"Get the current routes:\n```\ncurl http://host:port/Routes\n```\n\nSet a route for a specific path:\n```\ncurl -X POST http://host:port/Routes -H \"Priority: 10\" \\\n    -H \"Node: http://host:port\" -H \"Template: /Some/New/Path\"\n```\n\nSchedule a message on a process:\n```\ncurl -X POST http://host:port/ProcID/Schedule -H \"Action: Transfer\" \\\n    -H \"Recipient: Address\" -H \"Quantity: 1337\"\n```\n\nRun a WASM executable:\n```\ncurl -X POST http://host:port/Init/Compute -H \"Device: WASM-64/1.0\" \\\n    -H \"2.WASM-Function: fac\" -H \"2.WASM-Params: [10]\" -d @test/test-64.wasm\n```\n\n...returning response with a `Hashpath` header. To execute further messages\non the result, use the `Hashpath` as the base hashpath for the next message:\n```\ncurl http://host:port/Hashpath/Compute/Results -H \"WASM-Function: fac\" \\\n    -H \"WASM-Params: [11]\" -d @test/test-64.wasm\n```\n\nAssign a message from one process's outbox to the schedule of another:\n```\ncurl -X POST http://host:port/ProcID2/Schedule+Message= \\\n    (/ProcID1/Compute+Slot=1/Results/Outbox/1)\n```\n\nThis request is equivalent to:\n```\ncurl http://host:port/Hashpath/Compute/Results?WASM-Function=fac&WASM-Params=[11]\n```\n\nLoad the WASM computation from an existing hashpath:\n```\ncurl -X POST http://host:port/Init/Compute \\\n    -H \"1.WASM-Image|Resolve: /OldHashpath/Snapshot/WASM\" \\\n    -H \"2.WASM-Function: fac\" -H \"2.WASM-Params: [10]\"\n```\n\nTo fork an existing process to use a new device, we can use the `~` key operator:\n```\ncurl -X POST http://host:port/Schedule~Process/2.0/(/ProcID/Now)+Method=POST\n```\n\nTo run multiple computations in the same request, with separate headers for\neach, we should be able to use `Header#N` modifiers:\n```\ncurl -X POST http://host:port/Init/Compute/Compute -H \"Device: WASM-64/1.0\" \\\n    -H \"2.WASM-Function: fac\" -H \"2.WASM-Params: [10]\" \\\n    -H \"3.WASM-Function: fac\" -H \"3.WASM-Params: [11]\" \\\n    -d @test/test-64.wasm\n```\n\nThis request is equivalent to:\n```\ncurl http://host:port/Init+Device=WASM-64/1.0+Image=ID/Compute+ \\\n    WASM-Function=fac+WASM-Params=[10]/Compute+WASM-Function=fac&WASM-Params=[11]\n```\n\nGather the node's known commitments (including its own) on a process output:\n```\ncurl http://host:port/ProcID/Compute+Slot=1/Results/Commitments\n```\n\nDry-run a message on top of an AO process state:\n```\ncurl -X POST http://host:port/ProcID/Compute \\\n    -H \"Action: Balance\" -H \"Recipient: Address\"\n```","ref":"ao-http-api.html#example-workflows"},{"type":"extras","title":"Hacking on HyperBEAM","doc":"# Hacking on HyperBEAM\n\nThe HyperBEAM codebase has a number of mechanism to make building upon it\neasier. Here is a quick rundown of the must-knows:","ref":"hacking-on-hyperbeam.html"},{"type":"extras","title":"Starting HyperBEAM - Hacking on HyperBEAM","doc":"You can start HyperBEAM with rebar3 as follows:\n```\n\trebar3 shell\n```\n\nThis will drop you into an Erlang shell with all of the necessary modules \nloaded. Additionally, starting HyperBEAM this way will initialize its HTTP\nserver, such that you can begin to send requests to it. There are a few helpful\nshortcut options you can provide and environment variables:\n\n- `HB_STORE=dir`: Set a local filesystem store as HB's only location to read and \nwrite to. This can be helpful for separating multiple nodes running on the same\nhost/in the same directory.\n- `HB_KEY=file`: The key that HyperBEAM will use to sign all messages on the \nnode, unless otherwise indicated.\n- `HB_PORT=[number]`: The port number HB will use to register its HTTP server.\n\nCheck out `hb_opts` for the full list.","ref":"hacking-on-hyperbeam.html#starting-hyperbeam"},{"type":"extras","title":"Running the tests - Hacking on HyperBEAM","doc":"In order to run HyperBEAM's built-in tests, start eunit with rebar3 as follows:\n\n```\n\trebar3 eunit\n```\n\nThis should run all of the tests in every HyperBEAM module. If you would like to\nrun only tests from a specific set of modules, just add `--module=list,of,mods`.\nTo run only a specific test use `--test=your_module:your_test`.\n\nDo not send a PR in which the tests do not pass.","ref":"hacking-on-hyperbeam.html#running-the-tests"},{"type":"extras","title":"Event logging and debugging - Hacking on HyperBEAM","doc":"HyperBEAM provides a flexible mechanism for writing debug prints to the CLI\n(and later, perhaps, other logging systems). Simply call `?event(term())` and\nyour term will be processed through the logging mechanisms.\n\nYou can control the information that is displayed in the command-line log\nby either setting `debug_print` in `hb_opts` globally, or passing the \n`HB_PRINT=[setting]` environment variable when you start HyperBEAM. Your \n`[setting]` can be either `true` (or `1` via the CLI), or a list of module\nnames or topics that you would like to see the prints for. For example, if you \nwould like to analyze would HB's path management `dev_message` modules are doing\nwhile you run your tests, just execute:\n\n```\n\tHB_PRINT=hb_path,hb_ao,ao_result rebar3 eunit --module=your_mod\n```\n\nSome useful logging events are:\n\n```\n    ao_result: Outputs every AO-Core computation result (M1, M2, and M3).\n    worker: Information about spawns and registrations of worker processes.\n    ao_core: Output information about progression through the core \n    computation loop of AO-Core. Produces a large volume of output.\n```\n\nThe HB printing system is reasonably intelligent. It has a custom\npretty-printer that can recognize a few useful types of terms in the\nenvironment:\n\n- Messages\n- Arweave transactions and data items\n- Tuples of form `{Status, Term}`\n- Binary IDs\n\nThese terms will be printed along with other basic debugging info (modules,\nfunctions, line numbers). For message prints `#P` is used as short-hand for \n'hashpath', and `*S/U` refer to signed and unsigned IDs respectively. All \nbinaries are printed in human-readable base64url format, suffixed with `[*]`\nif they are of ID length.\n\nAdditionally, HyperBEAM has a custom pretty-printer for stacktraces that is \naware of the boundaries of the machine. It will print traces until the first\nstack frame that references a module prefix that it is unaware of. By default,\nit will print all frames that start with `hb_`, `ar_`, and `dev_`. You can \nchange this behavior via the options found in `hb_opts`.","ref":"hacking-on-hyperbeam.html#event-logging-and-debugging"},{"type":"extras","title":"Helpful utilities - Hacking on HyperBEAM","doc":"If you would like to re-build HyperBEAM in-place, while it is running, just \nrun `hb:build()`. This will invoke `rebar3` and build any modules changed \nsince the last invocation.","ref":"hacking-on-hyperbeam.html#helpful-utilities"},{"type":"extras","title":"Profiling with eflame (building flamecharts) - Hacking on HyperBEAM","doc":"1. Benchmark a given function (in Erlang shell) with\n   `eflame:apply(hb, address, []).`\n   This will store traces under \"stacks.out\" in the project folder.\n\n2. Convert stacks.out into svg file (in shell):\n  `_build/default/lib/eflame/stack_to_flame.sh   hb_address_flame.svg`\n\n3. Open the svg file in browser.\n\nHappy hacking!","ref":"hacking-on-hyperbeam.html#profiling-with-eflame-building-flamecharts"},{"type":"extras","title":"gathering-metrics-locally","doc":"","ref":"gathering-metrics-locally.html"},{"type":"extras","title":"Bring up grafana/Prometheus locally - gathering-metrics-locally","doc":"```\ncd ./metrics\ndocker-compose up -d\n```\n\nGrafana will be available under http://localhost:3000 (admin/admin) Prometheus http://localhost:9000","ref":"gathering-metrics-locally.html#bring-up-grafana-prometheus-locally"},{"type":"extras","title":"Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"# Setting Up and Selecting Devices for HyperBEAM Nodes\n\nHyperBEAM is a client implementation of the AO-Core protocol that enables decentralized computations. As a node operator, you'll need to understand the various devices available and how to configure them for your specific use case. This guide will help you make informed decisions when setting up your HyperBEAM node.","ref":"setting-up-selecting-devices.html"},{"type":"extras","title":"What are Devices in HyperBEAM? - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"In HyperBEAM, devices are modular components that provide specific functionalities to your node. They encapsulate different computational models that can be attached to the AO-Core protocol framework. Each device serves a specific purpose, from configuring your node to executing WebAssembly code, managing payments, or facilitating message relays.","ref":"setting-up-selecting-devices.html#what-are-devices-in-hyperbeam"},{"type":"extras","title":"Core Configuration: ~meta@1.0 Device - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"The foundation of every HyperBEAM node is the `~meta@1.0` device, which is used to configure your node's hardware, supported devices, metering, and payment information. This is the first device you'll need to set up.","ref":"setting-up-selecting-devices.html#core-configuration-meta-1-0-device"},{"type":"extras","title":"Setting Up the ~meta@1.0 Device - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"You can initialize the ~meta@1.0 device via command line arguments when starting your node:\n\n```bash\n\nrebar3 shell --eval \"hb:start_mainnet(#{ port => 9001, key_location => 'path/to/my/wallet.key' }).\"\n\n```\n\nThis command starts your node with a custom port (9001) and specifies the location of your Arweave wallet key file. You can also modify a running node's configuration by sending an HTTP Signed Message.","ref":"setting-up-selecting-devices.html#setting-up-the-meta-1-0-device"},{"type":"extras","title":"Choosing the Right Devices for Your Use Case - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"HyperBEAM includes 25+ preloaded devices. Here's how to select the most appropriate ones based on your needs:","ref":"setting-up-selecting-devices.html#choosing-the-right-devices-for-your-use-case"},{"type":"extras","title":"Basic Node Operation - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"These devices form the foundation of a functional HyperBEAM node:\n\n- **~meta@1.0**: Core configuration device (required for all nodes)\n- **~relay@1.0**: Handles message relaying between nodes and the HTTP network\n- **dev_message**: The identity device that handles message processing","ref":"setting-up-selecting-devices.html#basic-node-operation"},{"type":"extras","title":"Computation Services - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"If you want to offer computation services to the network:\n\n- **~wasm64@1.0**: Executes WebAssembly code using the Web Assembly Micro-Runtime\n- **dev_stack**: Manages execution of a stack of devices in either fold or map mode\n- **dev_scheduler**: Implements a simple scheduling scheme for handling process execution\n- **~process@1.0**: Enables persistent, shared executions accessible by multiple users","ref":"setting-up-selecting-devices.html#computation-services"},{"type":"extras","title":"Payment and Metering - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"If you want to monetize your node's services:\n\n- **p4@1.0**: Core payment framework that works with pricing and ledger devices\n- **~simple-pay@1.0**: Implements simple, flexible pricing for flat-fee execution\n- **~faff@1.0**: Allows nodes to restrict access to specific users (useful for personal nodes)","ref":"setting-up-selecting-devices.html#payment-and-metering"},{"type":"extras","title":"Enhanced Security - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"If security is a priority:\n\n- **~snp@1.0**: For generating and validating proofs that a node is executing inside a Trusted Execution Environment (TEE)\n- **dev_codec_httpsig**: Implements HTTP Message Signatures as described in RFC-9421","ref":"setting-up-selecting-devices.html#enhanced-security"},{"type":"extras","title":"Legacynet Compatibility - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"If you need to support older AO systems:\n\n- **~json-iface@1.0**: Translation layer between JSON-encoded messages and HyperBEAM's HTTP format\n- **~compute-lite@1.0**: Lightweight device for executing legacynet AO processes\n- **dev_genesis_wasm**: Provides an environment suitable for legacynet AO processes","ref":"setting-up-selecting-devices.html#legacynet-compatibility"},{"type":"extras","title":"Device Details and Functions - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"","ref":"setting-up-selecting-devices.html#device-details-and-functions"},{"type":"extras","title":"Communication and Relay Devices - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"### ~relay@1.0\n\nThis device is responsible for relaying messages between nodes and other HTTP(S) endpoints. It can operate in either \"call\" or \"cast\" mode:\n\n- **Call mode**: Returns a response from the remote peer\n- **Cast mode**: Returns immediately while the message is relayed asynchronously\n\n```\n\ncurl /~relay@.1.0/call?method=GET?0.path=https://www.arweave.net/\n\n```","ref":"setting-up-selecting-devices.html#communication-and-relay-devices"},{"type":"extras","title":"dev_router - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Routes outbound messages from the node to appropriate network recipients via HTTP. It load-balances messages between downstream workers that perform the actual requests. Routes are defined in a precedence-ordered list of maps.","ref":"setting-up-selecting-devices.html#dev_router"},{"type":"extras","title":"Computation Devices - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"### ~wasm64@1.0\n\nExecutes WebAssembly code using the Web Assembly Micro-Runtime (WAMR). This device enables running WASM modules from any other device, supporting code written in Rust, C, and C++.\n\nRequirements:\n\n- Process definition\n- WASM image\n- Message with data to be processed","ref":"setting-up-selecting-devices.html#computation-devices"},{"type":"extras","title":"dev_stack - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Manages execution of multiple devices in sequence. It operates in two modes:\n\n- **Fold mode (default)**: Executes devices in order, passing state forward\n- **Map mode**: Executes all devices and combines their results\n\nThis is useful for creating complex execution patterns by combining different devices.\n\n### ~process@1.0\n\nEnables persistent, shared executions that can be accessed by multiple users. Each user can add additional inputs to its hashpath. This device allows customization of execution and scheduler devices.\n\nExample process definition:\n\n```\n\nDevice: Process/1.0\nScheduler-Device: Scheduler/1.0\nExecution-Device: Stack/1.0\nExecution-Stack: \"Scheduler/1.0\", \"Cron/1.0\", \"WASM/1.0\", \"PoDA/1.0\"\nCron-Frequency: 10-Minutes\nWASM-Image: WASMImageID\nPoDA:\n    Device: PoDA/1.0\n    Authority: A\n    Authority: B\n    Authority: C\n    Quorum: 2\n\n```","ref":"setting-up-selecting-devices.html#dev_stack"},{"type":"extras","title":"Payment and Access Control Devices - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"","ref":"setting-up-selecting-devices.html#payment-and-access-control-devices"},{"type":"extras","title":"p4@1.0 - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Core payment framework that works with pricing and ledger devices. It requires the following node message settings:\n\n- `p4_pricing_device`: Estimates request cost\n- `p4_ledger_device`: Acts as payment ledger\n\n### ~simple-pay@1.0\n\nImplements simple, flexible pricing for per-message, flat-fee execution. The device's ledger is stored in the node message at `simple_pay_ledger`.\n\n### ~faff@1.0\n\nA \"friends and family\" pricing policy that allows users to process requests only if their addresses are in the node's allow-list. Useful for running a node for personal use or for a specific subset of users.","ref":"setting-up-selecting-devices.html#p4-1-0"},{"type":"extras","title":"Security Devices - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"### ~snp@1.0\n\nGenerates and validates proofs that a node is executing inside a Trusted Execution Environment (TEE). Nodes executing inside TEEs use an ephemeral key pair that provably exists only inside the TEE.","ref":"setting-up-selecting-devices.html#security-devices"},{"type":"extras","title":"dev_codec_httpsig - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Implements HTTP Message Signatures as described in RFC-9421, providing a way to authenticate and verify the integrity of HTTP messages.","ref":"setting-up-selecting-devices.html#dev_codec_httpsig"},{"type":"extras","title":"Utility Devices - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"","ref":"setting-up-selecting-devices.html#utility-devices"},{"type":"extras","title":"dev_cron - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Inserts new messages into the schedule to allow processes to passively 'call' themselves without user interaction. Useful for creating automated, scheduled tasks.","ref":"setting-up-selecting-devices.html#dev_cron"},{"type":"extras","title":"dev_dedup - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Deduplicates messages sent to a process. It runs on the first pass of a `compute` key call if executed in a stack, preventing duplicate processing.","ref":"setting-up-selecting-devices.html#dev_dedup"},{"type":"extras","title":"dev_monitor - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Allows flexible monitoring of a process execution. Adding this device to a process will call specified functions with the current process state during each pass.","ref":"setting-up-selecting-devices.html#dev_monitor"},{"type":"extras","title":"dev_multipass - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Triggers repass events until a certain counter has been reached. Useful for stacks that need various execution passes to be completed in sequence across devices.","ref":"setting-up-selecting-devices.html#dev_multipass"},{"type":"extras","title":"dev_patch - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Finds `PATCH` requests in the `results/outbox` of its message and applies them. Useful for processes whose computation needs to manipulate data outside of the `results` key.","ref":"setting-up-selecting-devices.html#dev_patch"},{"type":"extras","title":"Device Stacking Strategies - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"One of the powerful features of HyperBEAM is the ability to stack devices to create complex computational models. Here are some effective stacking strategies:","ref":"setting-up-selecting-devices.html#device-stacking-strategies"},{"type":"extras","title":"Basic Process Execution Stack - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"```\n\nExecution-Device: Stack/1.0\nExecution-Stack: \"Scheduler/1.0\", \"WASM/1.0\"\n\n```\n\nThis simple stack handles scheduling and WASM execution for basic process needs.","ref":"setting-up-selecting-devices.html#basic-process-execution-stack"},{"type":"extras","title":"Enhanced Security Stack - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"```\n\nExecution-Device: Stack/1.0\nExecution-Stack: \"Scheduler/1.0\", \"WASM/1.0\", \"PoDA/1.0\", \"~snp@1.0\"\n\n```\n\nAdds proof-of-authority consensus and TEE validation for enhanced security.","ref":"setting-up-selecting-devices.html#enhanced-security-stack"},{"type":"extras","title":"Automated Process Stack - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"```\n\nExecution-Device: Stack/1.0\nExecution-Stack: \"Scheduler/1.0\", \"Cron/1.0\", \"WASM/1.0\"\n\n```\n\nAdds the Cron device to enable automated, scheduled execution.","ref":"setting-up-selecting-devices.html#automated-process-stack"},{"type":"extras","title":"Analytics Stack - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"```\n\nExecution-Device: Stack/1.0\nExecution-Stack: \"Scheduler/1.0\", \"WASM/1.0\", \"Monitor/1.0\"\n\n```\n\nAdds monitoring capability to track process execution.","ref":"setting-up-selecting-devices.html#analytics-stack"},{"type":"extras","title":"Practical Setup Examples - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"","ref":"setting-up-selecting-devices.html#practical-setup-examples"},{"type":"extras","title":"Setting Up a Personal Node - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"For a node intended for personal use only:\n\n```bash\n\nrebar3 shell --eval \"hb:start_mainnet(#{\n  port => 9001,\n  key_location => 'path/to/my/wallet.key',\n  p4_pricing_device => '~faff@1.0',\n  p4_ledger_device => '~faff@1.0',\n  faff_allow_list => ['my-wallet-address']\n}).\"\n\n```","ref":"setting-up-selecting-devices.html#setting-up-a-personal-node"},{"type":"extras","title":"Setting Up a Public Computation Node - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"For a node offering computation services to the network:\n\n```bash\n\nrebar3 shell --eval \"hb:start_mainnet(#{\n  port => 9001,\n  key_location => 'path/to/my/wallet.key',\n  p4_pricing_device => '~simple-pay@1.0',\n  p4_ledger_device => '~simple-pay@1.0',\n  simple_pay_price => 0.01,\n  preloaded_devices => ['~wasm64@1.0', '~process@1.0', 'dev_stack', 'dev_scheduler']\n}).\"\n\n```","ref":"setting-up-selecting-devices.html#setting-up-a-public-computation-node"},{"type":"extras","title":"Setting Up a Secure TEE Node - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"For a node running in a Trusted Execution Environment:\n\n```bash\n\nrebar3 shell --eval \"hb:start_mainnet(#{\n  port => 9001,\n  key_location => 'path/to/my/wallet.key',\n  p4_pricing_device => '~simple-pay@1.0',\n  p4_ledger_device => '~simple-pay@1.0',\n  simple_pay_price => 0.05,\n  preloaded_devices => ['~wasm64@1.0', '~process@1.0', 'dev_stack', 'dev_scheduler', '~snp@1.0']\n}).\"\n\n```","ref":"setting-up-selecting-devices.html#setting-up-a-secure-tee-node"},{"type":"extras","title":"Conclusion - Setting Up and Selecting Devices for HyperBEAM Nodes","doc":"Setting up a HyperBEAM node involves understanding and configuring various devices based on your specific requirements. By selecting and stacking devices, you can create a node that meets your computational needs, security requirements, and monetization goals.\n\nFor more detailed information about each device, refer to the HyperBEAM code repositories. Remember that the AO-Core protocol is designed to be flexible, allowing you to adapt your node to various use cases by combining different devices and computational models.","ref":"setting-up-selecting-devices.html#conclusion"},{"type":"extras","title":"The HyperBEAM Style Guide.","doc":"# The HyperBEAM Style Guide.\n\n**Rule one of style guide club:** _We do not talk about style guide club._\n\nWe are here to build a fully decentralized alternative to cyberspace as it \nis currently constructed. We are not interested in long conversations about\nwhere to put commas or spaces.\n\n**Rule two of style guide club:** _Blend in._\n\nWrite your code as if you were the author of all of the existing code. If all \nof the other code is written in a certain style, then copy it. If the style\nof the code in your PR would not _blend in_, then its style is objectively\nin violation of `style guide club`'s rules.\n\nIn the event of disagreement, a simple rule should guide our decisions: What\ndoes the majority of the LoC in the codebase already do? Do that. Then get \nback to hacking.\n\nIf you don't like something about the style, simply contribute. If others\ndisagree strongly, the existing style will be kept. If your contributions are\nseen by others as reasonable and inline with the canon, then it will gradually \nbecome adopted as the standard in the codebase.\n\n**This concludes the rules of style guide club.**\n\nRemember: Cypherpunks write code! There is no time to bicker about\ntrivialities. 🫡","ref":"style-guide.html"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.35.1"}}